// Place global declarations here.
int fid_var34_main = 16;
int fid_var35_a = 17;
int fid_var36_b = 18;
int fid_var37_c = 19;
int fid_var38_d = 20;
int fid_var39_e = 21;
int fid_var40_f = 22;
int a_count = 0;
chan async_a[1];
chan sync_a[1];

int b_count = 0;
chan async_b[6];
chan sync_b[6];

int c_count = 0;
chan async_c[3];
chan sync_c[3];

int d_count = 0;
chan async_d[6];
chan sync_d[6];

int e_count = 0;
chan async_e[1];
chan sync_e[1];

int f_count = 0;
chan async_f[3];
chan sync_f[3];

int chan_count = 0;
int chan_counter[20];
int chan_buffer[20];
chan sender_trigger[20];
chan sender_confirm[20];
chan receiver_trigger[20];
chan receiver_confirm[20];
chan close[20];

int make_a() {
	int pid = a_count;
	a_count++;
	return pid;
}

int make_b() {
	int pid = b_count;
	b_count++;
	return pid;
}

int make_c() {
	int pid = c_count;
	c_count++;
	return pid;
}

int make_d() {
	int pid = d_count;
	d_count++;
	return pid;
}

int make_e() {
	int pid = e_count;
	e_count++;
	return pid;
}

int make_f() {
	int pid = f_count;
	f_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 19] i) {
// Place local declarations here.


state
    idle,
    confirming_closed,
    bad,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    closed;
commit
    confirming_closed,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closing;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process a(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var41_ch = -1;

int i0 = 0;


state
    started_c_1,
    closed_ch_0,
    ended,
    exit_loop_0,
    awaited_b_0,
    awaited_c_0,
    made_ch_0,
    enter_loop_cond_0,
    created_b_0,
    started_b_0,
    created_c_0,
    exit_loop_body_0,
    starting,
    ending,
    exit_loop_cond_0,
    enter_loop_body_0,
    started,
    started_c_0,
    created_c_1,
    awaited_c_1;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_b_0 { assign p = make_b(); },
    created_b_0 -> started_b_0 { sync sync_b[p]!; },
    started_b_0 -> awaited_b_0 { sync sync_b[p]?; },
    awaited_b_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> created_c_0 { assign p = make_c(); },
    created_c_0 -> started_c_0 { sync sync_c[p]!; },
    started_c_0 -> awaited_c_0 { sync sync_c[p]?; },
    awaited_c_0 -> created_c_1 { assign p = make_c(); },
    created_c_1 -> started_c_1 { sync sync_c[p]!; },
    started_c_1 -> awaited_c_1 { sync sync_c[p]?; },
    awaited_c_1 -> made_ch_0 { assign cid_var41_ch = make_chan(0); },
    made_ch_0 -> closed_ch_0 { sync close[cid_var41_ch]!; },
    closed_ch_0 -> ending { },
    starting -> started { sync async_a[pid]?; assign is_sync = false; },
    starting -> started { sync sync_a[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_a[pid]!; };
}

process b(int[0, 5] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var42_ch = -1;



state
    awaited_d_0,
    ending,
    ended,
    made_ch_0,
    created_d_0,
    starting,
    started,
    closed_ch_0,
    started_d_0;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var42_ch = make_chan(0); },
    made_ch_0 -> closed_ch_0 { sync close[cid_var42_ch]!; },
    closed_ch_0 -> created_d_0 { assign p = make_d(); },
    created_d_0 -> started_d_0 { sync sync_d[p]!; },
    started_d_0 -> awaited_d_0 { sync sync_d[p]?; },
    awaited_d_0 -> ending { },
    starting -> started { sync async_b[pid]?; assign is_sync = false; },
    starting -> started { sync sync_b[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_b[pid]!; };
}

process c(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    created_b_0,
    started_b_0,
    awaited_b_0;
init
    starting;
trans
    started -> created_b_0 { assign p = make_b(); },
    created_b_0 -> started_b_0 { sync sync_b[p]!; },
    started_b_0 -> awaited_b_0 { sync sync_b[p]?; },
    awaited_b_0 -> ending { },
    starting -> started { sync async_c[pid]?; assign is_sync = false; },
    starting -> started { sync sync_c[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_c[pid]!; };
}

process d(int[0, 5] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var43_ch = -1;

int cid_var44_ch = -1;



state
    made_ch_0,
    closed_ch_0,
    enter_else_0,
    closed_ch_1,
    starting,
    ended,
    enter_if_0,
    made_ch_1,
    started,
    ending,
    exit_if_0;
init
    starting;
trans
    enter_if_0 -> made_ch_0 { assign cid_var43_ch = make_chan(0); },
    made_ch_0 -> closed_ch_0 { sync close[cid_var43_ch]!; },
    closed_ch_0 -> exit_if_0 { },
    enter_else_0 -> made_ch_1 { assign cid_var44_ch = make_chan(0); },
    made_ch_1 -> closed_ch_1 { sync close[cid_var44_ch]!; },
    closed_ch_1 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    exit_if_0 -> ending { },
    starting -> started { sync async_d[pid]?; assign is_sync = false; },
    starting -> started { sync sync_d[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_d[pid]!; };
}

process e(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var45_ch = -1;

int i0 = 0;


state
    starting,
    ended,
    started_f_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    created_f_0,
    exit_loop_body_0,
    made_ch_0,
    awaited_f_0,
    started,
    ending,
    enter_loop_body_0,
    exit_loop_0,
    closed_ch_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> made_ch_0 { assign cid_var45_ch = make_chan(0); },
    made_ch_0 -> closed_ch_0 { sync close[cid_var45_ch]!; },
    closed_ch_0 -> created_f_0 { assign p = make_f(); },
    created_f_0 -> started_f_0 { sync sync_f[p]!; },
    started_f_0 -> awaited_f_0 { sync sync_f[p]?; },
    awaited_f_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> ending { },
    starting -> started { sync async_e[pid]?; assign is_sync = false; },
    starting -> started { sync sync_e[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_e[pid]!; };
}

process f(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var46_ch = -1;



state
    made_ch_2,
    closed_ch_0,
    starting,
    started,
    ending,
    ended,
    made_ch_0,
    made_ch_1;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var46_ch = make_chan(0); },
    made_ch_0 -> made_ch_1 { assign cid_var46_ch = make_chan(0); },
    made_ch_1 -> made_ch_2 { assign cid_var46_ch = make_chan(0); },
    made_ch_2 -> closed_ch_0 { sync close[cid_var46_ch]!; },
    closed_ch_0 -> ending { },
    starting -> started { sync async_f[pid]?; assign is_sync = false; },
    starting -> started { sync sync_f[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_f[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;



state
    created_a_0,
    started_a_0,
    awaited_a_0,
    awaited_c_0,
    created_e_0,
    awaited_e_0,
    starting,
    ending,
    ended,
    created_c_0,
    started_c_0,
    started_e_0,
    started;
init
    starting;
trans
    started -> created_a_0 { assign p = make_a(); },
    created_a_0 -> started_a_0 { sync sync_a[p]!; },
    started_a_0 -> awaited_a_0 { sync sync_a[p]?; },
    awaited_a_0 -> created_c_0 { assign p = make_c(); },
    created_c_0 -> started_c_0 { sync sync_c[p]!; },
    started_c_0 -> awaited_c_0 { sync sync_c[p]?; },
    awaited_c_0 -> created_e_0 { assign p = make_e(); },
    created_e_0 -> started_e_0 { sync sync_e[p]!; },
    started_e_0 -> awaited_e_0 { sync sync_e[p]?; },
    awaited_e_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel00 = Channel(0);
Channel01 = Channel(1);
Channel02 = Channel(2);
Channel03 = Channel(3);
Channel04 = Channel(4);
Channel05 = Channel(5);
Channel06 = Channel(6);
Channel07 = Channel(7);
Channel08 = Channel(8);
Channel09 = Channel(9);
Channel10 = Channel(10);
Channel11 = Channel(11);
Channel12 = Channel(12);
Channel13 = Channel(13);
Channel14 = Channel(14);
Channel15 = Channel(15);
Channel16 = Channel(16);
Channel17 = Channel(17);
Channel18 = Channel(18);
Channel19 = Channel(19);
a_0 = a(0);
b_0 = b(0);
b_1 = b(1);
b_2 = b(2);
b_3 = b(3);
b_4 = b(4);
b_5 = b(5);
c_0 = c(0);
c_1 = c(1);
c_2 = c(2);
d_0 = d(0);
d_1 = d(1);
d_2 = d(2);
d_3 = d(3);
d_4 = d(4);
d_5 = d(5);
e_0 = e(0);
f_0 = f(0);
f_1 = f(1);
f_2 = f(2);
system Channel00, Channel01, Channel02, Channel03, Channel04, Channel05, Channel06, Channel07, Channel08, Channel09, Channel10, Channel11, Channel12, Channel13, Channel14, Channel15, Channel16, Channel17, Channel18, Channel19, a_0, b_0, b_1, b_2, b_3, b_4, b_5, c_0, c_1, c_2, d_0, d_1, d_2, d_3, d_4, d_5, e_0, f_0, f_1, f_2, main;

