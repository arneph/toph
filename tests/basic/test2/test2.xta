// Place global declarations here.
int fid_var19_test = 10;
int fid_var20_main = 11;

int test_count = 0;
chan async_test[1];
chan sync_test[1];
int make_test() {
    int pid = test_count;
    test_count++;
    return pid;
}

int test_func12_count = 0;
int cap_cid_var29_ch[1];
chan async_test_func12[1];
chan sync_test_func12[1];
int make_test_func12() {
    int pid = test_func12_count;
    test_func12_count++;
    return pid;
}

int test_func13_count = 0;
int cap_cid_var30_ch[1];
chan async_test_func13[1];
chan sync_test_func13[1];
int make_test_func13() {
    int pid = test_func13_count;
    test_func13_count++;
    return pid;
}

int chan_count = 0;
int chan_counter[10];
int chan_buffer[10];
chan sender_trigger[10];
chan sender_confirm[10];
chan receiver_trigger[10];
chan receiver_confirm[10];
chan close[10];

int make_chan(int buffer) {
    int cid = chan_count;
    chan_count++;
    chan_counter[cid] = 0;
    chan_buffer[cid] = buffer;
    return cid;
}


process Channel(int[0, 9] i) {
// Place local declarations here.

state
    confirming_a,
    confirming_b,
    closing,
    confirming_closed,
    bad,
    idle,
    new_sender,
    new_receiver,
    closed;
commit
    new_sender,
    new_receiver,
    confirming_a,
    confirming_b,
    closing,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; assign chan_counter[i] = 1; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var25_ch = -1;
int cid_var26_ch = -1;
int cid_var27_ch = -1;
int cid_var28_ch = -1;

state
    made_cid_var27_ch_0,
    made_cid_var25_ch_0,
    started_test_func12_0,
    exit_inlined_test_2,
    exit_inlined_test_3,
    started_test_func12_3,
    started_test_func13_3,
    started_test_func13_0,
    started_test_func12_1,
    enter_inlined_test_1,
    made_cid_var28_ch_0,
    starting,
    created_test_func12_0,
    started_test_func12_2,
    started_test_func13_2,
    started,
    enter_inlined_test_0,
    exit_inlined_test_0,
    started_test_func13_1,
    created_test_func13_2,
    made_cid_var26_ch_0,
    created_test_func12_2,
    exit_inlined_test_1,
    created_test_func13_1,
    created_test_func13_0,
    created_test_func12_1,
    enter_inlined_test_2,
    enter_inlined_test_3,
    created_test_func12_3,
    created_test_func13_3,
    ending,
    ended;
init
    starting;
trans
    enter_inlined_test_0 -> made_cid_var25_ch_0 { assign cid_var25_ch = make_chan(0); },
    made_cid_var25_ch_0 -> created_test_func12_0 { assign p = make_test_func12(), cap_cid_var29_ch[p] = cid_var25_ch; },
    created_test_func12_0 -> started_test_func12_0 { sync async_test_func12[p]!; },
    started_test_func12_0 -> created_test_func13_0 { assign p = make_test_func13(), cap_cid_var30_ch[p] = cid_var25_ch; },
    created_test_func13_0 -> started_test_func13_0 { sync async_test_func13[p]!; },
    started_test_func13_0 -> exit_inlined_test_0 { },
    started -> enter_inlined_test_0 { },
    enter_inlined_test_1 -> made_cid_var26_ch_0 { assign cid_var26_ch = make_chan(0); },
    made_cid_var26_ch_0 -> created_test_func12_1 { assign p = make_test_func12(), cap_cid_var29_ch[p] = cid_var26_ch; },
    created_test_func12_1 -> started_test_func12_1 { sync async_test_func12[p]!; },
    started_test_func12_1 -> created_test_func13_1 { assign p = make_test_func13(), cap_cid_var30_ch[p] = cid_var26_ch; },
    created_test_func13_1 -> started_test_func13_1 { sync async_test_func13[p]!; },
    started_test_func13_1 -> exit_inlined_test_1 { },
    exit_inlined_test_0 -> enter_inlined_test_1 { },
    enter_inlined_test_2 -> made_cid_var27_ch_0 { assign cid_var27_ch = make_chan(0); },
    made_cid_var27_ch_0 -> created_test_func12_2 { assign p = make_test_func12(), cap_cid_var29_ch[p] = cid_var27_ch; },
    created_test_func12_2 -> started_test_func12_2 { sync async_test_func12[p]!; },
    started_test_func12_2 -> created_test_func13_2 { assign p = make_test_func13(), cap_cid_var30_ch[p] = cid_var27_ch; },
    created_test_func13_2 -> started_test_func13_2 { sync async_test_func13[p]!; },
    started_test_func13_2 -> exit_inlined_test_2 { },
    exit_inlined_test_1 -> enter_inlined_test_2 { },
    enter_inlined_test_3 -> made_cid_var28_ch_0 { assign cid_var28_ch = make_chan(0); },
    made_cid_var28_ch_0 -> created_test_func12_3 { assign p = make_test_func12(), cap_cid_var29_ch[p] = cid_var28_ch; },
    created_test_func12_3 -> started_test_func12_3 { sync async_test_func12[p]!; },
    started_test_func12_3 -> created_test_func13_3 { assign p = make_test_func13(), cap_cid_var30_ch[p] = cid_var28_ch; },
    created_test_func13_3 -> started_test_func13_3 { sync async_test_func13[p]!; },
    started_test_func13_3 -> exit_inlined_test_3 { },
    exit_inlined_test_2 -> enter_inlined_test_3 { },
    exit_inlined_test_3 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process test(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var24_ch = -1;

state
    started,
    ended,
    created_test_func12_0,
    started_test_func12_0,
    created_test_func13_0,
    started_test_func13_0,
    starting,
    ending,
    made_cid_var24_ch_0;
init
    starting;
trans
    started -> made_cid_var24_ch_0 { assign cid_var24_ch = make_chan(0); },
    made_cid_var24_ch_0 -> created_test_func12_0 { assign p = make_test_func12(), cap_cid_var29_ch[p] = cid_var24_ch; },
    created_test_func12_0 -> started_test_func12_0 { sync async_test_func12[p]!; },
    started_test_func12_0 -> created_test_func13_0 { assign p = make_test_func13(), cap_cid_var30_ch[p] = cid_var24_ch; },
    created_test_func13_0 -> started_test_func13_0 { sync async_test_func13[p]!; },
    started_test_func13_0 -> ending { },
    starting -> started { sync async_test[pid]?; assign is_sync = false; },
    starting -> started { sync sync_test[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_test[pid]!; };
}

process test_func12(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var29_ch = -1;
void initialize() {
    cid_var29_ch = cap_cid_var29_ch[pid];
}

state
    ending,
    ended,
    sending_cid_var29_ch_0,
    sent_cid_var29_ch_0,
    starting,
    started;
init
    starting;
trans
    started -> sending_cid_var29_ch_0 { sync sender_trigger[cid_var29_ch]!; assign chan_counter[cid_var29_ch]++; },
    sending_cid_var29_ch_0 -> sent_cid_var29_ch_0 { sync sender_confirm[cid_var29_ch]?; },
    sent_cid_var29_ch_0 -> ending { },
    starting -> started { sync async_test_func12[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_test_func12[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_test_func12[pid]!; };
}

process test_func13(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var30_ch = -1;
void initialize() {
    cid_var30_ch = cap_cid_var30_ch[pid];
}

state
    starting,
    started,
    ending,
    ended,
    receiving_cid_var30_ch_0,
    received_cid_var30_ch_0;
init
    starting;
trans
    started -> receiving_cid_var30_ch_0 { sync receiver_trigger[cid_var30_ch]!; assign chan_counter[cid_var30_ch]--; },
    receiving_cid_var30_ch_0 -> received_cid_var30_ch_0 { sync receiver_confirm[cid_var30_ch]?; },
    received_cid_var30_ch_0 -> ending { },
    starting -> started { sync async_test_func13[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_test_func13[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_test_func13[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
Channel5 = Channel(5);
Channel6 = Channel(6);
Channel7 = Channel(7);
Channel8 = Channel(8);
Channel9 = Channel(9);
test0 = test(0);
test_func120 = test_func12(0);
test_func130 = test_func13(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, Channel5, Channel6, Channel7, Channel8, Channel9, main, test0, test_func120, test_func130;

