// Place global declarations here.
int fid_var16_test = 7;
int fid_var17_main = 6;
int test_count = 0;
chan async_test[4];
chan sync_test[4];

int test_func8_count = 0;
chan async_test_func8[4];
chan sync_test_func8[4];
int par_pid_test_func8[4];

int test_func9_count = 0;
chan async_test_func9[4];
chan sync_test_func9[4];
int par_pid_test_func9[4];

int cid_var18_ch[4];

int chan_count = 0;
int chan_counter[4];
int chan_buffer[4];
chan sender_trigger[4];
chan sender_confirm[4];
chan receiver_trigger[4];
chan receiver_confirm[4];
chan close[4];

int make_test() {
	int pid = test_count;
	test_count++;
	return pid;
}

int make_test_func8(int par_pid) {
	int pid = test_func8_count;
	test_func8_count++;
	par_pid_test_func8[pid] = par_pid;
	return pid;
}

int make_test_func9(int par_pid) {
	int pid = test_func9_count;
	test_func9_count++;
	par_pid_test_func9[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 3] i) {
// Place local declarations here.


state
    confirming_closed,
    new_receiver,
    closing,
    confirming_a,
    confirming_b,
    closed,
    bad,
    idle,
    new_sender;
commit
    confirming_closed,
    new_receiver,
    closing,
    confirming_a,
    confirming_b,
    new_sender;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;



state
    awaited_test_1,
    starting,
    awaited_test_0,
    created_test_2,
    created_test_3,
    awaited_test_3,
    ending,
    created_test_0,
    started_test_1,
    awaited_test_2,
    started,
    ended,
    started_test_0,
    created_test_1,
    started_test_2,
    started_test_3;
init
    starting;
trans
    started -> created_test_0 { assign p = make_test(); },
    created_test_0 -> started_test_0 { sync sync_test[p]!; },
    started_test_0 -> awaited_test_0 { sync sync_test[p]?; },
    awaited_test_0 -> created_test_1 { assign p = make_test(); },
    created_test_1 -> started_test_1 { sync sync_test[p]!; },
    started_test_1 -> awaited_test_1 { sync sync_test[p]?; },
    awaited_test_1 -> created_test_2 { assign p = make_test(); },
    created_test_2 -> started_test_2 { sync sync_test[p]!; },
    started_test_2 -> awaited_test_2 { sync sync_test[p]?; },
    awaited_test_2 -> created_test_3 { assign p = make_test(); },
    created_test_3 -> started_test_3 { sync sync_test[p]!; },
    started_test_3 -> awaited_test_3 { sync sync_test[p]?; },
    awaited_test_3 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process test(int[0, 3] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var18_ch[pid] = -1;
}



state
    ended,
    started,
    ending,
    made_ch_0,
    created_test_func8_0,
    started_test_func8_0,
    created_test_func9_0,
    started_test_func9_0,
    starting;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var18_ch[pid] = make_chan(0); },
    made_ch_0 -> created_test_func8_0 { assign p = make_test_func8(pid); },
    created_test_func8_0 -> started_test_func8_0 { sync async_test_func8[p]!; },
    started_test_func8_0 -> created_test_func9_0 { assign p = make_test_func9(pid); },
    created_test_func9_0 -> started_test_func9_0 { sync async_test_func9[p]!; },
    started_test_func9_0 -> ending { },
    starting -> started { sync async_test[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_test[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_test[pid]!; };
}

process test_func8(int[0, 3] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    sending_ch_0,
    sent_ch_0,
    starting,
    started;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var18_ch[par_pid_test_func8[pid]]]!; assign chan_counter[cid_var18_ch[par_pid_test_func8[pid]]]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var18_ch[par_pid_test_func8[pid]]]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_test_func8[pid]?; assign is_sync = false; },
    starting -> started { sync sync_test_func8[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_test_func8[pid]!; };
}

process test_func9(int[0, 3] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    receiving_ch_0,
    received_ch_0,
    starting,
    started;
init
    starting;
trans
    started -> receiving_ch_0 { sync receiver_trigger[cid_var18_ch[par_pid_test_func9[pid]]]!; assign chan_counter[cid_var18_ch[par_pid_test_func9[pid]]]--; },
    receiving_ch_0 -> received_ch_0 { sync receiver_confirm[cid_var18_ch[par_pid_test_func9[pid]]]?; },
    received_ch_0 -> ending { },
    starting -> started { sync async_test_func9[pid]?; assign is_sync = false; },
    starting -> started { sync sync_test_func9[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_test_func9[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
test_0 = test(0);
test_1 = test(1);
test_2 = test(2);
test_3 = test(3);
test_func8_0 = test_func8(0);
test_func8_1 = test_func8(1);
test_func8_2 = test_func8(2);
test_func8_3 = test_func8(3);
test_func9_0 = test_func9(0);
test_func9_1 = test_func9(1);
test_func9_2 = test_func9(2);
test_func9_3 = test_func9(3);
system Channel0, Channel1, Channel2, Channel3, main, test_0, test_1, test_2, test_3, test_func8_0, test_func8_1, test_func8_2, test_func8_3, test_func9_0, test_func9_1, test_func9_2, test_func9_3;

