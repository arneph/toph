// Place global declarations here.
int cid_var0_ch = -1;
int fid_var1_testA = 1;
int fid_var2_testB = 2;
int fid_var3_testC = 3;
int fid_var4_testD = 4;
int fid_var5_main = 0;
int testA_count = 0;
chan async_testA[1];
chan sync_testA[1];

int testB_count = 0;
chan async_testB[1];
chan sync_testB[1];

int testC_count = 0;
chan async_testC[1];
chan sync_testC[1];

int testD_count = 0;
chan async_testD[1];
chan sync_testD[1];

int testB_func5_count = 0;
chan async_testB_func5[1];
chan sync_testB_func5[1];
int par_pid_testB_func5[1];
int res_testB_func5_0_Chan[1];

int chan_count = 0;
int chan_counter[1];
int chan_buffer[1];
chan sender_trigger[1];
chan sender_confirm[1];
chan receiver_trigger[1];
chan receiver_confirm[1];
chan close[1];

int make_testA() {
	int pid = testA_count;
	testA_count++;
	return pid;
}

int make_testB() {
	int pid = testB_count;
	testB_count++;
	return pid;
}

int make_testC() {
	int pid = testC_count;
	testC_count++;
	return pid;
}

int make_testD() {
	int pid = testD_count;
	testD_count++;
	return pid;
}

int make_testB_func5(int par_pid) {
	int pid = testB_func5_count;
	testB_func5_count++;
	par_pid_testB_func5[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 0] i) {
// Place local declarations here.


state
    idle,
    new_sender,
    confirming_a,
    new_receiver,
    closed,
    confirming_b,
    closing,
    confirming_closed,
    bad;
commit
    new_sender,
    confirming_a,
    new_receiver,
    closing,
    confirming_closed,
    confirming_b;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    exit_loop_0,
    starting,
    started,
    ended,
    ending;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process testA(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var7 = -1;
int cid_var6_b = -1;
int cid_var8 = -1;



state
    sent_b_1,
    started,
    ending,
    assigned_cid_var6_b_0,
    sending_b_0,
    sent_b_0,
    sending_b_1,
    starting,
    ended,
    made__0,
    made__1,
    assigned_cid_var6_b_1;
init
    starting;
trans
    started -> made__0 { assign cid_var7 = make_chan(0); },
    made__0 -> assigned_cid_var6_b_0 { assign cid_var6_b = cid_var7; },
    assigned_cid_var6_b_0 -> made__1 { assign cid_var8 = make_chan(0); },
    made__1 -> assigned_cid_var6_b_1 { assign cid_var6_b = cid_var8; },
    assigned_cid_var6_b_1 -> sending_b_0 { sync sender_trigger[cid_var6_b]!; assign chan_counter[cid_var6_b]++; },
    sending_b_0 -> sent_b_0 { sync sender_confirm[cid_var6_b]?; },
    sent_b_0 -> sending_b_1 { sync sender_trigger[cid_var6_b]!; assign chan_counter[cid_var6_b]++; },
    sending_b_1 -> sent_b_1 { sync sender_confirm[cid_var6_b]?; },
    sent_b_1 -> ending { },
    starting -> started { sync async_testA[pid]?; assign is_sync = false; },
    starting -> started { sync sync_testA[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_testA[pid]!; };
}

process testB(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var9_ch = -1;
int fid_var10_f = -1;
int fid_var12 = 5;



state
    ending,
    ended,
    assigned_fid_var10_f_0,
    sending_ch_0,
    sent_ch_0,
    starting,
    started;
init
    starting;
trans
    started -> assigned_fid_var10_f_0 { assign fid_var10_f = fid_var12; },
    assigned_fid_var10_f_0 -> sending_ch_0 { sync sender_trigger[cid_var9_ch]!; assign chan_counter[cid_var9_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var9_ch]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_testB[pid]?; assign is_sync = false; },
    starting -> started { sync sync_testB[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_testB[pid]!; };
}

process testB_func5(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var11 = -1;



state
    starting,
    started,
    ending,
    ended,
    made__0;
init
    starting;
trans
    started -> made__0 { assign cid_var11 = make_chan(0); },
    made__0 -> ending { assign res_testB_func5_0_Chan[pid] = cid_var11; },
    starting -> started { sync async_testB_func5[pid]?; assign is_sync = false; },
    starting -> started { sync sync_testB_func5[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_testB_func5[pid]!; };
}

process testC(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var13_ch = -1;

int cid_var14_ch = -1;



state
    enter_else_0,
    closed_ch_1,
    starting,
    ended,
    enter_if_0,
    exit_if_0,
    made_ch_1,
    started,
    ending,
    made_ch_0,
    closed_ch_0;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var13_ch = make_chan(0); },
    enter_if_0 -> made_ch_1 { assign cid_var14_ch = make_chan(0); },
    made_ch_1 -> closed_ch_0 { sync close[cid_var14_ch]!; },
    closed_ch_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    made_ch_0 -> enter_if_0 { },
    made_ch_0 -> enter_else_0 { },
    exit_if_0 -> closed_ch_1 { sync close[cid_var13_ch]!; },
    closed_ch_1 -> ending { },
    starting -> started { sync async_testC[pid]?; assign is_sync = false; },
    starting -> started { sync sync_testC[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_testC[pid]!; };
}

process testD(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var15_ch = -1;



state
    started,
    ending,
    ended,
    made_ch_0,
    enter_loop_body_0,
    sent_ch_0,
    closed_ch_0,
    starting,
    exit_loop_cond_0,
    exit_loop_body_0,
    exit_loop_0,
    sending_ch_0,
    enter_loop_cond_0;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var15_ch = make_chan(5); },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_ch_0 { sync sender_trigger[cid_var15_ch]!; assign chan_counter[cid_var15_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var15_ch]?; },
    sent_ch_0 -> exit_loop_body_0 { },
    made_ch_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> closed_ch_0 { sync close[cid_var15_ch]!; },
    closed_ch_0 -> ending { },
    starting -> started { sync async_testD[pid]?; assign is_sync = false; },
    starting -> started { sync sync_testD[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_testD[pid]!; };
}

Channel0 = Channel(0);
testA_0 = testA(0);
testB_0 = testB(0);
testB_func5_0 = testB_func5(0);
testC_0 = testC(0);
testD_0 = testD(0);
system Channel0, main, testA_0, testB_0, testB_func5_0, testC_0, testD_0;

