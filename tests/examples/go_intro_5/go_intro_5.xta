// Place global declarations here.
int fid_var640_producerA = 334;
int fid_var642_producerB = 335;
int fid_var644_consumer = 336;
int fid_var647_main = 333;
int producerA_count = 0;
chan async_producerA[1];
chan sync_producerA[1];
int arg_cid_var641_ch[1];

int producerB_count = 0;
chan async_producerB[1];
chan sync_producerB[1];
int arg_cid_var643_ch[1];

int consumer_count = 0;
chan async_consumer[1];
chan sync_consumer[1];
int arg_cid_var645_chA[1];
int arg_cid_var646_chB[1];

int time_after_count = 0;
chan async_time_after[20];
chan sync_time_after[20];
int res_time_after_0_Chan[20];

int time_after_func338_count = 0;
chan async_time_after_func338[20];
chan sync_time_after_func338[20];
int par_pid_time_after_func338[20];

int cid_var648_ch[20];

int chan_count = 0;
int chan_counter[20];
int chan_buffer[20];
chan sender_trigger[20];
chan sender_confirm[20];
chan receiver_trigger[20];
chan receiver_confirm[20];
chan close[20];

int make_producerA() {
	int pid = producerA_count;
	producerA_count++;
	return pid;
}

int make_producerB() {
	int pid = producerB_count;
	producerB_count++;
	return pid;
}

int make_consumer() {
	int pid = consumer_count;
	consumer_count++;
	return pid;
}

int make_time_after() {
	int pid = time_after_count;
	time_after_count++;
	return pid;
}

int make_time_after_func338(int par_pid) {
	int pid = time_after_func338_count;
	time_after_func338_count++;
	par_pid_time_after_func338[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 19] i) {
// Place local declarations here.


state
    idle,
    new_sender,
    confirming_b,
    bad,
    confirming_a,
    new_receiver,
    closing,
    closed,
    confirming_closed;
commit
    confirming_a,
    new_receiver,
    closing,
    confirming_closed,
    new_sender,
    confirming_b;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process consumer(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var645_chA = -1;
int cid_var646_chB = -1;

int cid_var649 = -1;

void initialize() {
    cid_var645_chA = arg_cid_var645_chA[pid];
    cid_var646_chB = arg_cid_var646_chB[pid];
}



state
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0,
    select_case_1_enter_0,
    select_case_2_trigger_0,
    ended,
    select_pass_2_0,
    select_case_2_enter_0,
    select_case_1_trigger_0,
    select_case_3_trigger_0,
    select_pass_1_0,
    starting,
    started,
    exit_loop_body_0,
    awaited_time_after_0,
    select_case_3_enter_0,
    ending,
    enter_loop_cond_0,
    created_time_after_0,
    started_time_after_0,
    select_end_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var649 = res_time_after_0_Chan[p]; },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> select_end_0 { },
    select_case_3_enter_0 -> ending { },
    awaited_time_after_0 -> select_pass_1_0 { assign chan_counter[cid_var645_chA]--, chan_counter[cid_var646_chB]--, chan_counter[cid_var649]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var645_chA] < 0 || chan_counter[cid_var645_chA] >= 0; sync receiver_trigger[cid_var645_chA]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var645_chA]?; assign chan_counter[cid_var646_chB]++, chan_counter[cid_var649]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var646_chB] < 0 || chan_counter[cid_var646_chB] >= 0; sync receiver_trigger[cid_var646_chB]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var646_chB]?; assign chan_counter[cid_var645_chA]++, chan_counter[cid_var649]++; },
    select_pass_1_0 -> select_case_3_trigger_0 { guard chan_buffer[cid_var649] < 0 || chan_counter[cid_var649] >= 0; sync receiver_trigger[cid_var649]!; },
    select_case_3_trigger_0 -> select_case_3_enter_0 { sync receiver_confirm[cid_var649]?; assign chan_counter[cid_var645_chA]++, chan_counter[cid_var646_chB]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var645_chA] < 0 || chan_counter[cid_var645_chA] >= 0) && !(chan_buffer[cid_var646_chB] < 0 || chan_counter[cid_var646_chB] >= 0) && !(chan_buffer[cid_var649] < 0 || chan_counter[cid_var649] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var645_chA]?; assign chan_counter[cid_var646_chB]++, chan_counter[cid_var649]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var646_chB]?; assign chan_counter[cid_var645_chA]++, chan_counter[cid_var649]++; },
    select_pass_2_0 -> select_case_3_enter_0 { sync receiver_confirm[cid_var649]?; assign chan_counter[cid_var645_chA]++, chan_counter[cid_var646_chB]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_consumer[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_consumer[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_consumer[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var650_chA = -1;
int cid_var651_chB = -1;



state
    starting,
    started,
    ending,
    created_producerA_0,
    started_producerA_0,
    ended,
    made_chA_0,
    made_chB_0,
    created_producerB_0,
    started_producerB_0,
    created_consumer_0,
    started_consumer_0;
init
    starting;
trans
    started -> made_chA_0 { assign cid_var650_chA = make_chan(0); },
    made_chA_0 -> made_chB_0 { assign cid_var651_chB = make_chan(0); },
    made_chB_0 -> created_producerA_0 { assign p = make_producerA(), arg_cid_var641_ch[p] = cid_var650_chA; },
    created_producerA_0 -> started_producerA_0 { sync async_producerA[p]!; },
    started_producerA_0 -> created_producerB_0 { assign p = make_producerB(), arg_cid_var643_ch[p] = cid_var651_chB; },
    created_producerB_0 -> started_producerB_0 { sync async_producerB[p]!; },
    started_producerB_0 -> created_consumer_0 { assign p = make_consumer(), arg_cid_var645_chA[p] = cid_var650_chA, arg_cid_var646_chB[p] = cid_var651_chB; },
    created_consumer_0 -> started_consumer_0 { sync async_consumer[p]!; },
    started_consumer_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process producerA(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var641_ch = -1;

void initialize() {
    cid_var641_ch = arg_cid_var641_ch[pid];
}



state
    enter_loop_body_0,
    sending_ch_0,
    sent_ch_0,
    starting,
    ending,
    ended,
    enter_loop_cond_0,
    started,
    exit_loop_cond_0,
    exit_loop_body_0,
    exit_loop_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_ch_0 { sync sender_trigger[cid_var641_ch]!; assign chan_counter[cid_var641_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var641_ch]?; },
    sent_ch_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_producerA[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_producerA[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_producerA[pid]!; };
}

process producerB(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var643_ch = -1;

void initialize() {
    cid_var643_ch = arg_cid_var643_ch[pid];
}



state
    exit_loop_0,
    sending_ch_0,
    starting,
    ended,
    enter_loop_cond_0,
    enter_loop_body_0,
    sent_ch_0,
    started,
    ending,
    exit_loop_cond_0,
    exit_loop_body_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_ch_0 { sync sender_trigger[cid_var643_ch]!; assign chan_counter[cid_var643_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var643_ch]?; },
    sent_ch_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_producerB[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_producerB[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_producerB[pid]!; };
}

process time_after(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var648_ch[pid] = -1;
}



state
    starting,
    started,
    ending,
    ended,
    made_ch_0,
    created_time_after_func338_0,
    started_time_after_func338_0;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var648_ch[pid] = make_chan(1); },
    made_ch_0 -> created_time_after_func338_0 { assign p = make_time_after_func338(pid); },
    created_time_after_func338_0 -> started_time_after_func338_0 { sync async_time_after_func338[p]!; },
    started_time_after_func338_0 -> ending { assign res_time_after_0_Chan[pid] = cid_var648_ch[pid]; },
    starting -> started { sync async_time_after[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_time_after[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after[pid]!; };
}

process time_after_func338(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    sent_ch_0,
    starting,
    started,
    ending,
    ended,
    sending_ch_0;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var648_ch[par_pid_time_after_func338[pid]]]!; assign chan_counter[cid_var648_ch[par_pid_time_after_func338[pid]]]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var648_ch[par_pid_time_after_func338[pid]]]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_time_after_func338[pid]?; assign is_sync = false; },
    starting -> started { sync sync_time_after_func338[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after_func338[pid]!; };
}

Channel00 = Channel(0);
Channel01 = Channel(1);
Channel02 = Channel(2);
Channel03 = Channel(3);
Channel04 = Channel(4);
Channel05 = Channel(5);
Channel06 = Channel(6);
Channel07 = Channel(7);
Channel08 = Channel(8);
Channel09 = Channel(9);
Channel10 = Channel(10);
Channel11 = Channel(11);
Channel12 = Channel(12);
Channel13 = Channel(13);
Channel14 = Channel(14);
Channel15 = Channel(15);
Channel16 = Channel(16);
Channel17 = Channel(17);
Channel18 = Channel(18);
Channel19 = Channel(19);
consumer_0 = consumer(0);
producerA_0 = producerA(0);
producerB_0 = producerB(0);
time_after_00 = time_after(0);
time_after_01 = time_after(1);
time_after_02 = time_after(2);
time_after_03 = time_after(3);
time_after_04 = time_after(4);
time_after_05 = time_after(5);
time_after_06 = time_after(6);
time_after_07 = time_after(7);
time_after_08 = time_after(8);
time_after_09 = time_after(9);
time_after_10 = time_after(10);
time_after_11 = time_after(11);
time_after_12 = time_after(12);
time_after_13 = time_after(13);
time_after_14 = time_after(14);
time_after_15 = time_after(15);
time_after_16 = time_after(16);
time_after_17 = time_after(17);
time_after_18 = time_after(18);
time_after_19 = time_after(19);
time_after_func338_00 = time_after_func338(0);
time_after_func338_01 = time_after_func338(1);
time_after_func338_02 = time_after_func338(2);
time_after_func338_03 = time_after_func338(3);
time_after_func338_04 = time_after_func338(4);
time_after_func338_05 = time_after_func338(5);
time_after_func338_06 = time_after_func338(6);
time_after_func338_07 = time_after_func338(7);
time_after_func338_08 = time_after_func338(8);
time_after_func338_09 = time_after_func338(9);
time_after_func338_10 = time_after_func338(10);
time_after_func338_11 = time_after_func338(11);
time_after_func338_12 = time_after_func338(12);
time_after_func338_13 = time_after_func338(13);
time_after_func338_14 = time_after_func338(14);
time_after_func338_15 = time_after_func338(15);
time_after_func338_16 = time_after_func338(16);
time_after_func338_17 = time_after_func338(17);
time_after_func338_18 = time_after_func338(18);
time_after_func338_19 = time_after_func338(19);
system Channel00, Channel01, Channel02, Channel03, Channel04, Channel05, Channel06, Channel07, Channel08, Channel09, Channel10, Channel11, Channel12, Channel13, Channel14, Channel15, Channel16, Channel17, Channel18, Channel19, consumer_0, main, producerA_0, producerB_0, time_after_00, time_after_01, time_after_02, time_after_03, time_after_04, time_after_05, time_after_06, time_after_07, time_after_08, time_after_09, time_after_10, time_after_11, time_after_12, time_after_13, time_after_14, time_after_15, time_after_16, time_after_17, time_after_18, time_after_19, time_after_func338_00, time_after_func338_01, time_after_func338_02, time_after_func338_03, time_after_func338_04, time_after_func338_05, time_after_func338_06, time_after_func338_07, time_after_func338_08, time_after_func338_09, time_after_func338_10, time_after_func338_11, time_after_func338_12, time_after_func338_13, time_after_func338_14, time_after_func338_15, time_after_func338_16, time_after_func338_17, time_after_func338_18, time_after_func338_19;

