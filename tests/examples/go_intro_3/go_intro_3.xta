// Place global declarations here.
int fid_var630_f = 329;
int fid_var632_main = 328;
int f_count = 0;
chan async_f[1];
chan sync_f[1];
int arg_cid_var631_ch[1];

int chan_count = 0;
int chan_counter[1];
int chan_buffer[1];
chan sender_trigger[1];
chan sender_confirm[1];
chan receiver_trigger[1];
chan receiver_confirm[1];
chan close[1];

int make_f() {
	int pid = f_count;
	f_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 0] i) {
// Place local declarations here.


state
    bad,
    idle,
    confirming_b,
    closing,
    closed,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_closed;
commit
    new_sender,
    confirming_a,
    new_receiver,
    confirming_closed,
    confirming_b,
    closing;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process f(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var631_ch = -1;

void initialize() {
    cid_var631_ch = arg_cid_var631_ch[pid];
}



state
    started,
    ending,
    ended,
    sent_ch_0,
    sent_ch_1,
    sent_ch_2,
    starting,
    sending_ch_0,
    sending_ch_1,
    sending_ch_2;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var631_ch]!; assign chan_counter[cid_var631_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var631_ch]?; },
    sent_ch_0 -> sending_ch_1 { sync sender_trigger[cid_var631_ch]!; assign chan_counter[cid_var631_ch]++; },
    sending_ch_1 -> sent_ch_1 { sync sender_confirm[cid_var631_ch]?; },
    sent_ch_1 -> sending_ch_2 { sync sender_trigger[cid_var631_ch]!; assign chan_counter[cid_var631_ch]++; },
    sending_ch_2 -> sent_ch_2 { sync sender_confirm[cid_var631_ch]?; },
    sent_ch_2 -> ending { },
    starting -> started { sync async_f[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_f[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_f[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var633_ch = -1;



state
    received_ch_2,
    made_ch_0,
    started_f_0,
    received_ch_1,
    receiving_ch_2,
    received_ch_4,
    starting,
    received_ch_0,
    receiving_ch_1,
    receiving_ch_4,
    ended,
    receiving_ch_0,
    receiving_ch_3,
    started,
    ending,
    created_f_0,
    received_ch_3;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var633_ch = make_chan(0); },
    made_ch_0 -> created_f_0 { assign p = make_f(), arg_cid_var631_ch[p] = cid_var633_ch; },
    created_f_0 -> started_f_0 { sync async_f[p]!; },
    started_f_0 -> receiving_ch_0 { sync receiver_trigger[cid_var633_ch]!; assign chan_counter[cid_var633_ch]--; },
    receiving_ch_0 -> received_ch_0 { sync receiver_confirm[cid_var633_ch]?; },
    received_ch_0 -> receiving_ch_1 { sync receiver_trigger[cid_var633_ch]!; assign chan_counter[cid_var633_ch]--; },
    receiving_ch_1 -> received_ch_1 { sync receiver_confirm[cid_var633_ch]?; },
    received_ch_1 -> receiving_ch_2 { sync receiver_trigger[cid_var633_ch]!; assign chan_counter[cid_var633_ch]--; },
    receiving_ch_2 -> received_ch_2 { sync receiver_confirm[cid_var633_ch]?; },
    received_ch_2 -> receiving_ch_3 { sync receiver_trigger[cid_var633_ch]!; assign chan_counter[cid_var633_ch]--; },
    receiving_ch_3 -> received_ch_3 { sync receiver_confirm[cid_var633_ch]?; },
    received_ch_3 -> receiving_ch_4 { sync receiver_trigger[cid_var633_ch]!; assign chan_counter[cid_var633_ch]--; },
    receiving_ch_4 -> received_ch_4 { sync receiver_confirm[cid_var633_ch]?; },
    received_ch_4 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel0 = Channel(0);
f_0 = f(0);
system Channel0, f_0, main;

