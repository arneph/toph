// Place global declarations here.
int cid_var652_errChan = -1;
int cid_var653_abortChan = -1;
int fid_var654_findFilesInFolder = 340;
int fid_var656_countWords = 341;
int fid_var659_main = 339;
int findFilesInFolder_count = 0;
chan async_findFilesInFolder[1];
chan sync_findFilesInFolder[1];
int arg_cid_var655_filesChan[1];

int countWords_count = 0;
chan async_countWords[2];
chan sync_countWords[2];
int arg_cid_var657_filesChan[2];
int arg_cid_var658_wordCountsChan[2];

int main_func342_count = 0;
chan async_main_func342[2];
chan sync_main_func342[2];
int par_pid_main_func342[2];

int main_func343_count = 0;
chan async_main_func343[1];
chan sync_main_func343[1];
int par_pid_main_func343[1];

int cid_var660_filesChan[1];
int cid_var661_wordCountsChan[1];
int cid_var662_waitChan[1];
int cid_var663_doneChan[1];

int chan_count = 0;
int chan_counter[6];
int chan_buffer[6];
chan sender_trigger[6];
chan sender_confirm[6];
chan receiver_trigger[6];
chan receiver_confirm[6];
chan close[6];

int make_findFilesInFolder() {
	int pid = findFilesInFolder_count;
	findFilesInFolder_count++;
	return pid;
}

int make_countWords() {
	int pid = countWords_count;
	countWords_count++;
	return pid;
}

int make_main_func342(int par_pid) {
	int pid = main_func342_count;
	main_func342_count++;
	par_pid_main_func342[pid] = par_pid;
	return pid;
}

int make_main_func343(int par_pid) {
	int pid = main_func343_count;
	main_func343_count++;
	par_pid_main_func343[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 5] i) {
// Place local declarations here.


state
    confirming_a,
    confirming_b,
    closing,
    bad,
    idle,
    new_sender,
    new_receiver,
    closed,
    confirming_closed;
commit
    confirming_a,
    confirming_b,
    closing,
    new_sender,
    new_receiver,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process countWords(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var657_filesChan = -1;
int cid_var658_wordCountsChan = -1;

void initialize() {
    cid_var657_filesChan = arg_cid_var657_filesChan[pid];
    cid_var658_wordCountsChan = arg_cid_var658_wordCountsChan[pid];
}



state
    starting,
    started,
    select_case_1_enter_0,
    enter_if_0,
    exit_if_0,
    enter_else_0,
    sending_wordCountsChan_0,
    range_enter_0,
    range_receiving_cid_var657_filesChan_0,
    range_received_cid_var657_filesChan_0,
    exit_loop_body_0,
    exit_loop_0,
    select_default_enter_0,
    sent_errChan_0,
    ending,
    ended,
    enter_loop_body_0,
    select_pass_1_0,
    select_case_1_trigger_0,
    sending_errChan_0,
    sent_wordCountsChan_0,
    select_end_0;
commit
    range_received_cid_var657_filesChan_0,
    select_pass_1_0;
init
    starting;
trans
    range_enter_0 -> range_receiving_cid_var657_filesChan_0 { sync receiver_trigger[cid_var657_filesChan]!; assign chan_counter[cid_var657_filesChan]--, ok = chan_counter[cid_var657_filesChan] >= 0; },
    range_receiving_cid_var657_filesChan_0 -> range_received_cid_var657_filesChan_0 { sync receiver_confirm[cid_var657_filesChan]?; },
    select_default_enter_0 -> select_end_0 { },
    select_case_1_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var653_abortChan]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var653_abortChan] < 0 || chan_counter[cid_var653_abortChan] >= 0; sync receiver_trigger[cid_var653_abortChan]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var653_abortChan]?; },
    select_pass_1_0 -> select_default_enter_0 { guard !(chan_buffer[cid_var653_abortChan] < 0 || chan_counter[cid_var653_abortChan] >= 0); assign chan_counter[cid_var653_abortChan]++; },
    enter_if_0 -> sending_errChan_0 { sync sender_trigger[cid_var652_errChan]!; assign chan_counter[cid_var652_errChan]++; },
    sending_errChan_0 -> sent_errChan_0 { sync sender_confirm[cid_var652_errChan]?; },
    sent_errChan_0 -> exit_loop_0 { },
    enter_else_0 -> exit_if_0 { },
    select_end_0 -> enter_if_0 { },
    select_end_0 -> enter_else_0 { },
    exit_if_0 -> sending_wordCountsChan_0 { sync sender_trigger[cid_var658_wordCountsChan]!; assign chan_counter[cid_var658_wordCountsChan]++; },
    sending_wordCountsChan_0 -> sent_wordCountsChan_0 { sync sender_confirm[cid_var658_wordCountsChan]?; },
    sent_wordCountsChan_0 -> exit_loop_body_0 { },
    started -> range_enter_0 { },
    range_received_cid_var657_filesChan_0 -> enter_loop_body_0 { guard chan_buffer[cid_var657_filesChan] >= 0 || ok; },
    range_received_cid_var657_filesChan_0 -> exit_loop_0 { guard chan_buffer[cid_var657_filesChan] < 0 && !ok; },
    exit_loop_body_0 -> range_enter_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_countWords[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_countWords[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_countWords[pid]!; };
}

process findFilesInFolder(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var655_filesChan = -1;

int i0 = 0;
void initialize() {
    cid_var655_filesChan = arg_cid_var655_filesChan[pid];
}



state
    select_case_1_trigger_0,
    enter_if_0,
    exit_loop_body_0,
    enter_if_1,
    select_case_2_trigger_0,
    sending_errChan_0,
    closed_filesChan_0,
    enter_else_0,
    select_end_0,
    select_case_1_enter_0,
    select_pass_1_0,
    started,
    ending,
    closed_filesChan_1,
    exit_if_0,
    sent_errChan_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0,
    starting,
    ended,
    select_pass_2_0,
    select_case_2_enter_0,
    exit_if_1,
    enter_else_1;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_if_0 -> sending_errChan_0 { sync sender_trigger[cid_var652_errChan]!; assign chan_counter[cid_var652_errChan]++; },
    sending_errChan_0 -> sent_errChan_0 { sync sender_confirm[cid_var652_errChan]?; },
    sent_errChan_0 -> closed_filesChan_0 { sync close[cid_var655_filesChan]!; },
    closed_filesChan_0 -> ending { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_if_1 -> exit_loop_body_0 { },
    enter_else_1 -> exit_if_1 { },
    enter_loop_body_0 -> enter_if_1 { },
    enter_loop_body_0 -> enter_else_1 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> exit_loop_0 { },
    exit_if_1 -> select_pass_1_0 { assign chan_counter[cid_var655_filesChan]++, chan_counter[cid_var653_abortChan]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var655_filesChan] < 0 || chan_counter[cid_var655_filesChan] <= chan_buffer[cid_var655_filesChan]; sync sender_trigger[cid_var655_filesChan]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var655_filesChan]?; assign chan_counter[cid_var653_abortChan]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var653_abortChan] < 0 || chan_counter[cid_var653_abortChan] >= 0; sync receiver_trigger[cid_var653_abortChan]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var653_abortChan]?; assign chan_counter[cid_var655_filesChan]--; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var655_filesChan] < 0 || chan_counter[cid_var655_filesChan] <= chan_buffer[cid_var655_filesChan]) && !(chan_buffer[cid_var653_abortChan] < 0 || chan_counter[cid_var653_abortChan] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var655_filesChan]?; assign chan_counter[cid_var653_abortChan]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var653_abortChan]?; assign chan_counter[cid_var655_filesChan]--; },
    select_end_0 -> exit_loop_body_0 { },
    exit_if_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> closed_filesChan_1 { sync close[cid_var655_filesChan]!; },
    closed_filesChan_1 -> ending { },
    starting -> started { sync async_findFilesInFolder[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_findFilesInFolder[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_findFilesInFolder[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int i0 = 0;
void initialize() {
    cid_var660_filesChan[pid] = -1;
    cid_var661_wordCountsChan[pid] = -1;
    cid_var662_waitChan[pid] = -1;
    cid_var663_doneChan[pid] = -1;
}



state
    created_findFilesInFolder_0,
    select_case_1_enter_0,
    select_case_2_enter_0,
    select_case_2_trigger_0,
    made_filesChan_0,
    started_findFilesInFolder_0,
    created_main_func342_0,
    select_case_3_trigger_0,
    ending,
    made_errChan_0,
    enter_loop_body_0,
    select_case_1_trigger_0,
    ended,
    exit_loop_0,
    created_main_func343_0,
    enter_loop_body_1,
    select_case_3_enter_0,
    select_pass_1_0,
    made_wordCountsChan_0,
    exit_loop_1,
    select_pass_2_0,
    starting,
    made_doneChan_0,
    enter_loop_cond_0,
    exit_loop_body_0,
    started_main_func342_0,
    exit_loop_cond_1,
    select_end_0,
    started,
    enter_loop_cond_1,
    closed_abortChan_0,
    exit_loop_cond_0,
    made_waitChan_0,
    started_main_func343_0,
    exit_loop_body_1,
    made_abortChan_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_errChan_0 { assign cid_var652_errChan = make_chan(3); },
    made_errChan_0 -> made_abortChan_0 { assign cid_var653_abortChan = make_chan(0); },
    made_abortChan_0 -> made_filesChan_0 { assign cid_var660_filesChan[pid] = make_chan(2); },
    made_filesChan_0 -> made_wordCountsChan_0 { assign cid_var661_wordCountsChan[pid] = make_chan(2); },
    made_wordCountsChan_0 -> created_findFilesInFolder_0 { assign p = make_findFilesInFolder(), arg_cid_var655_filesChan[p] = cid_var660_filesChan[pid]; },
    created_findFilesInFolder_0 -> started_findFilesInFolder_0 { sync async_findFilesInFolder[p]!; },
    started_findFilesInFolder_0 -> made_waitChan_0 { assign cid_var662_waitChan[pid] = make_chan(0); },
    made_waitChan_0 -> made_doneChan_0 { assign cid_var663_doneChan[pid] = make_chan(0); },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_main_func342_0 { assign p = make_main_func342(pid); },
    created_main_func342_0 -> started_main_func342_0 { sync async_main_func342[p]!; },
    started_main_func342_0 -> exit_loop_body_0 { },
    made_doneChan_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 2; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 2; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> created_main_func343_0 { assign p = make_main_func343(pid); },
    created_main_func343_0 -> started_main_func343_0 { sync async_main_func343[p]!; },
    enter_loop_cond_1 -> exit_loop_cond_1 { },
    select_case_1_enter_0 -> closed_abortChan_0 { sync close[cid_var653_abortChan]!; },
    closed_abortChan_0 -> ending { },
    select_case_2_enter_0 -> select_end_0 { },
    select_case_3_enter_0 -> ending { },
    enter_loop_body_1 -> select_pass_1_0 { assign chan_counter[cid_var652_errChan]--, chan_counter[cid_var661_wordCountsChan[pid]]--, chan_counter[cid_var663_doneChan[pid]]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var652_errChan] < 0 || chan_counter[cid_var652_errChan] >= 0; sync receiver_trigger[cid_var652_errChan]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var652_errChan]?; assign chan_counter[cid_var661_wordCountsChan[pid]]++, chan_counter[cid_var663_doneChan[pid]]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var661_wordCountsChan[pid]] < 0 || chan_counter[cid_var661_wordCountsChan[pid]] >= 0; sync receiver_trigger[cid_var661_wordCountsChan[pid]]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var661_wordCountsChan[pid]]?; assign chan_counter[cid_var652_errChan]++, chan_counter[cid_var663_doneChan[pid]]++; },
    select_pass_1_0 -> select_case_3_trigger_0 { guard chan_buffer[cid_var663_doneChan[pid]] < 0 || chan_counter[cid_var663_doneChan[pid]] >= 0; sync receiver_trigger[cid_var663_doneChan[pid]]!; },
    select_case_3_trigger_0 -> select_case_3_enter_0 { sync receiver_confirm[cid_var663_doneChan[pid]]?; assign chan_counter[cid_var652_errChan]++, chan_counter[cid_var661_wordCountsChan[pid]]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var652_errChan] < 0 || chan_counter[cid_var652_errChan] >= 0) && !(chan_buffer[cid_var661_wordCountsChan[pid]] < 0 || chan_counter[cid_var661_wordCountsChan[pid]] >= 0) && !(chan_buffer[cid_var663_doneChan[pid]] < 0 || chan_counter[cid_var663_doneChan[pid]] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var652_errChan]?; assign chan_counter[cid_var661_wordCountsChan[pid]]++, chan_counter[cid_var663_doneChan[pid]]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var661_wordCountsChan[pid]]?; assign chan_counter[cid_var652_errChan]++, chan_counter[cid_var663_doneChan[pid]]++; },
    select_pass_2_0 -> select_case_3_enter_0 { sync receiver_confirm[cid_var663_doneChan[pid]]?; assign chan_counter[cid_var652_errChan]++, chan_counter[cid_var661_wordCountsChan[pid]]++; },
    select_end_0 -> exit_loop_body_1 { },
    started_main_func343_0 -> enter_loop_cond_1 { },
    exit_loop_cond_1 -> enter_loop_body_1 { },
    exit_loop_body_1 -> enter_loop_cond_1 { },
    exit_loop_1 -> ending { },
    starting -> started { assign initialize(); },
    ending -> ended { };
}

process main_func342(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    sending_waitChan_0,
    starting,
    ended,
    started_countWords_0,
    awaited_countWords_0,
    sent_waitChan_0,
    started,
    ending,
    created_countWords_0;
init
    starting;
trans
    started -> created_countWords_0 { assign p = make_countWords(), arg_cid_var658_wordCountsChan[p] = cid_var661_wordCountsChan[par_pid_main_func342[pid]], arg_cid_var657_filesChan[p] = cid_var660_filesChan[par_pid_main_func342[pid]]; },
    created_countWords_0 -> started_countWords_0 { sync sync_countWords[p]!; },
    started_countWords_0 -> awaited_countWords_0 { sync sync_countWords[p]?; },
    awaited_countWords_0 -> sending_waitChan_0 { sync sender_trigger[cid_var662_waitChan[par_pid_main_func342[pid]]]!; assign chan_counter[cid_var662_waitChan[par_pid_main_func342[pid]]]++; },
    sending_waitChan_0 -> sent_waitChan_0 { sync sender_confirm[cid_var662_waitChan[par_pid_main_func342[pid]]]?; },
    sent_waitChan_0 -> ending { },
    starting -> started { sync async_main_func342[pid]?; assign is_sync = false; },
    starting -> started { sync sync_main_func342[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_main_func342[pid]!; };
}

process main_func343(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int i0 = 0;


state
    ended,
    enter_loop_cond_0,
    receiving_waitChan_0,
    received_waitChan_0,
    closed_doneChan_0,
    started,
    ending,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    exit_loop_0,
    starting;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_waitChan_0 { sync receiver_trigger[cid_var662_waitChan[par_pid_main_func343[pid]]]!; assign chan_counter[cid_var662_waitChan[par_pid_main_func343[pid]]]--; },
    receiving_waitChan_0 -> received_waitChan_0 { sync receiver_confirm[cid_var662_waitChan[par_pid_main_func343[pid]]]?; },
    received_waitChan_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 2; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 2; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> closed_doneChan_0 { sync close[cid_var663_doneChan[par_pid_main_func343[pid]]]!; },
    closed_doneChan_0 -> ending { },
    starting -> started { sync async_main_func343[pid]?; assign is_sync = false; },
    starting -> started { sync sync_main_func343[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_main_func343[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
Channel5 = Channel(5);
countWords_0 = countWords(0);
countWords_1 = countWords(1);
findFilesInFolder_0 = findFilesInFolder(0);
main_func342_0 = main_func342(0);
main_func342_1 = main_func342(1);
main_func343_0 = main_func343(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, Channel5, countWords_0, countWords_1, findFilesInFolder_0, main, main_func342_0, main_func342_1, main_func343_0;

