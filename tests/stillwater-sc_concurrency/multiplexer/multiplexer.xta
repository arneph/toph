// Place global declarations here.
int fid_var797_fanin1 = 468;
int fid_var800_fanin2 = 469;
int fid_var803_fanin3 = 470;
int fid_var806_process_A = 471;
int fid_var807_process_B = 472;
int fid_var808_process_Aprime = 473;
int fid_var809_process_Bprime = 474;
int fid_var810_main = 467;
int fanin1_count = 0;
chan async_fanin1[1];
chan sync_fanin1[1];
int arg_cid_var799_input2[1];
int arg_cid_var798_input1[1];
int res_fanin1_0_Chan[1];

int fanin2_count = 0;
chan async_fanin2[1];
chan sync_fanin2[1];
int arg_cid_var801_input1[1];
int arg_cid_var802_input2[1];
int res_fanin2_0_Chan[1];

int fanin3_count = 0;
chan async_fanin3[1];
chan sync_fanin3[1];
int arg_cid_var804_input1[1];
int arg_cid_var805_input2[1];
int res_fanin3_0_Chan[1];

int process_A_count = 0;
chan async_process_A[1];
chan sync_process_A[1];
int res_process_A_0_Chan[1];

int process_B_count = 0;
chan async_process_B[1];
chan sync_process_B[1];
int res_process_B_0_Chan[1];

int process_Aprime_count = 0;
chan async_process_Aprime[1];
chan sync_process_Aprime[1];
int res_process_Aprime_0_Chan[1];

int process_Bprime_count = 0;
chan async_process_Bprime[1];
chan sync_process_Bprime[1];
int res_process_Bprime_0_Chan[1];

int fanin1_func475_count = 0;
chan async_fanin1_func475[1];
chan sync_fanin1_func475[1];
int par_pid_fanin1_func475[1];

int fanin1_func476_count = 0;
chan async_fanin1_func476[1];
chan sync_fanin1_func476[1];
int par_pid_fanin1_func476[1];

int fanin2_func477_count = 0;
chan async_fanin2_func477[1];
chan sync_fanin2_func477[1];
int par_pid_fanin2_func477[1];

int fanin3_func478_count = 0;
chan async_fanin3_func478[1];
chan sync_fanin3_func478[1];
int par_pid_fanin3_func478[1];

int process_A_func479_count = 0;
chan async_process_A_func479[1];
chan sync_process_A_func479[1];
int par_pid_process_A_func479[1];

int process_B_func480_count = 0;
chan async_process_B_func480[1];
chan sync_process_B_func480[1];
int par_pid_process_B_func480[1];

int process_Aprime_func481_count = 0;
chan async_process_Aprime_func481[1];
chan sync_process_Aprime_func481[1];
int par_pid_process_Aprime_func481[1];

int process_Bprime_func482_count = 0;
chan async_process_Bprime_func482[1];
chan sync_process_Bprime_func482[1];
int par_pid_process_Bprime_func482[1];

int cid_var798_input1[1];
int cid_var799_input2[1];
int cid_var811_c[1];

int cid_var801_input1[1];
int cid_var802_input2[1];
int cid_var812_c[1];

int cid_var804_input1[1];
int cid_var805_input2[1];
int cid_var813_c[1];

int cid_var814_c[1];

int cid_var815_c[1];

int cid_var816_c[1];

int cid_var817_c[1];

int chan_count = 0;
int chan_counter[3];
int chan_buffer[3];
chan sender_trigger[3];
chan sender_confirm[3];
chan receiver_trigger[3];
chan receiver_confirm[3];
chan close[3];

int make_fanin1() {
	int pid = fanin1_count;
	fanin1_count++;
	return pid;
}

int make_fanin2() {
	int pid = fanin2_count;
	fanin2_count++;
	return pid;
}

int make_fanin3() {
	int pid = fanin3_count;
	fanin3_count++;
	return pid;
}

int make_process_A() {
	int pid = process_A_count;
	process_A_count++;
	return pid;
}

int make_process_B() {
	int pid = process_B_count;
	process_B_count++;
	return pid;
}

int make_process_Aprime() {
	int pid = process_Aprime_count;
	process_Aprime_count++;
	return pid;
}

int make_process_Bprime() {
	int pid = process_Bprime_count;
	process_Bprime_count++;
	return pid;
}

int make_fanin1_func475(int par_pid) {
	int pid = fanin1_func475_count;
	fanin1_func475_count++;
	par_pid_fanin1_func475[pid] = par_pid;
	return pid;
}

int make_fanin1_func476(int par_pid) {
	int pid = fanin1_func476_count;
	fanin1_func476_count++;
	par_pid_fanin1_func476[pid] = par_pid;
	return pid;
}

int make_fanin2_func477(int par_pid) {
	int pid = fanin2_func477_count;
	fanin2_func477_count++;
	par_pid_fanin2_func477[pid] = par_pid;
	return pid;
}

int make_fanin3_func478(int par_pid) {
	int pid = fanin3_func478_count;
	fanin3_func478_count++;
	par_pid_fanin3_func478[pid] = par_pid;
	return pid;
}

int make_process_A_func479(int par_pid) {
	int pid = process_A_func479_count;
	process_A_func479_count++;
	par_pid_process_A_func479[pid] = par_pid;
	return pid;
}

int make_process_B_func480(int par_pid) {
	int pid = process_B_func480_count;
	process_B_func480_count++;
	par_pid_process_B_func480[pid] = par_pid;
	return pid;
}

int make_process_Aprime_func481(int par_pid) {
	int pid = process_Aprime_func481_count;
	process_Aprime_func481_count++;
	par_pid_process_Aprime_func481[pid] = par_pid;
	return pid;
}

int make_process_Bprime_func482(int par_pid) {
	int pid = process_Bprime_func482_count;
	process_Bprime_func482_count++;
	par_pid_process_Bprime_func482[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 2] i) {
// Place local declarations here.


state
    bad,
    idle,
    new_sender,
    confirming_a,
    new_receiver,
    closing,
    confirming_b,
    closed,
    confirming_closed;
commit
    new_sender,
    confirming_a,
    new_receiver,
    closing,
    confirming_closed,
    confirming_b;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process fanin1(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var798_input1[pid] = -1;
    cid_var799_input2[pid] = -1;
    cid_var811_c[pid] = -1;
    cid_var798_input1[pid] = arg_cid_var798_input1[pid];
    cid_var799_input2[pid] = arg_cid_var799_input2[pid];
}



state
    starting,
    made_c_0,
    ended,
    created_fanin1_func475_0,
    started_fanin1_func475_0,
    created_fanin1_func476_0,
    started_fanin1_func476_0,
    started,
    ending;
init
    starting;
trans
    started -> made_c_0 { assign cid_var811_c[pid] = make_chan(0); },
    made_c_0 -> created_fanin1_func475_0 { assign p = make_fanin1_func475(pid); },
    created_fanin1_func475_0 -> started_fanin1_func475_0 { sync async_fanin1_func475[p]!; },
    started_fanin1_func475_0 -> created_fanin1_func476_0 { assign p = make_fanin1_func476(pid); },
    created_fanin1_func476_0 -> started_fanin1_func476_0 { sync async_fanin1_func476[p]!; },
    started_fanin1_func476_0 -> ending { assign res_fanin1_0_Chan[pid] = cid_var811_c[pid]; },
    starting -> started { sync async_fanin1[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin1[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin1[pid]!; };
}

process fanin1_func475(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    receiving_input1_0,
    received_input1_0,
    started,
    ended,
    exit_loop_0,
    sending_c_0,
    sent_c_0,
    starting;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_input1_0 { sync receiver_trigger[cid_var798_input1[par_pid_fanin1_func475[pid]]]!; assign chan_counter[cid_var798_input1[par_pid_fanin1_func475[pid]]]--; },
    receiving_input1_0 -> received_input1_0 { sync receiver_confirm[cid_var798_input1[par_pid_fanin1_func475[pid]]]?; },
    received_input1_0 -> sending_c_0 { sync sender_trigger[cid_var811_c[par_pid_fanin1_func475[pid]]]!; assign chan_counter[cid_var811_c[par_pid_fanin1_func475[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var811_c[par_pid_fanin1_func475[pid]]]?; },
    sent_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_fanin1_func475[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fanin1_func475[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin1_func475[pid]!; };
}

process fanin1_func476(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    exit_loop_body_0,
    exit_loop_0,
    receiving_input2_0,
    received_input2_0,
    ending,
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    sending_c_0,
    sent_c_0,
    starting,
    started;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_input2_0 { sync receiver_trigger[cid_var799_input2[par_pid_fanin1_func476[pid]]]!; assign chan_counter[cid_var799_input2[par_pid_fanin1_func476[pid]]]--; },
    receiving_input2_0 -> received_input2_0 { sync receiver_confirm[cid_var799_input2[par_pid_fanin1_func476[pid]]]?; },
    received_input2_0 -> sending_c_0 { sync sender_trigger[cid_var811_c[par_pid_fanin1_func476[pid]]]!; assign chan_counter[cid_var811_c[par_pid_fanin1_func476[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var811_c[par_pid_fanin1_func476[pid]]]?; },
    sent_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_fanin1_func476[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fanin1_func476[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin1_func476[pid]!; };
}

process fanin2(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var801_input1[pid] = -1;
    cid_var802_input2[pid] = -1;
    cid_var812_c[pid] = -1;
    cid_var801_input1[pid] = arg_cid_var801_input1[pid];
    cid_var802_input2[pid] = arg_cid_var802_input2[pid];
}



state
    starting,
    started,
    ending,
    ended,
    made_c_0,
    created_fanin2_func477_0,
    started_fanin2_func477_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var812_c[pid] = make_chan(0); },
    made_c_0 -> created_fanin2_func477_0 { assign p = make_fanin2_func477(pid); },
    created_fanin2_func477_0 -> started_fanin2_func477_0 { sync async_fanin2_func477[p]!; },
    started_fanin2_func477_0 -> ending { assign res_fanin2_0_Chan[pid] = cid_var812_c[pid]; },
    starting -> started { sync async_fanin2[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin2[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin2[pid]!; };
}

process fanin2_func477(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    select_case_1_trigger_0,
    started,
    ended,
    exit_loop_cond_0,
    sent_c_0,
    enter_loop_body_0,
    sending_c_1,
    select_case_2_trigger_0,
    ending,
    enter_loop_cond_0,
    select_case_1_enter_0,
    select_case_2_enter_0,
    select_pass_2_0,
    sending_c_0,
    sent_c_1,
    select_pass_1_0,
    starting,
    exit_loop_body_0,
    exit_loop_0,
    select_end_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> sending_c_0 { sync sender_trigger[cid_var812_c[par_pid_fanin2_func477[pid]]]!; assign chan_counter[cid_var812_c[par_pid_fanin2_func477[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var812_c[par_pid_fanin2_func477[pid]]]?; },
    sent_c_0 -> select_end_0 { },
    select_case_2_enter_0 -> sending_c_1 { sync sender_trigger[cid_var812_c[par_pid_fanin2_func477[pid]]]!; assign chan_counter[cid_var812_c[par_pid_fanin2_func477[pid]]]++; },
    sending_c_1 -> sent_c_1 { sync sender_confirm[cid_var812_c[par_pid_fanin2_func477[pid]]]?; },
    sent_c_1 -> select_end_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var801_input1[par_pid_fanin2_func477[pid]]]--, chan_counter[cid_var802_input2[par_pid_fanin2_func477[pid]]]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var801_input1[par_pid_fanin2_func477[pid]]] < 0 || chan_counter[cid_var801_input1[par_pid_fanin2_func477[pid]]] >= 0; sync receiver_trigger[cid_var801_input1[par_pid_fanin2_func477[pid]]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var801_input1[par_pid_fanin2_func477[pid]]]?; assign chan_counter[cid_var802_input2[par_pid_fanin2_func477[pid]]]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var802_input2[par_pid_fanin2_func477[pid]]] < 0 || chan_counter[cid_var802_input2[par_pid_fanin2_func477[pid]]] >= 0; sync receiver_trigger[cid_var802_input2[par_pid_fanin2_func477[pid]]]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var802_input2[par_pid_fanin2_func477[pid]]]?; assign chan_counter[cid_var801_input1[par_pid_fanin2_func477[pid]]]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var801_input1[par_pid_fanin2_func477[pid]]] < 0 || chan_counter[cid_var801_input1[par_pid_fanin2_func477[pid]]] >= 0) && !(chan_buffer[cid_var802_input2[par_pid_fanin2_func477[pid]]] < 0 || chan_counter[cid_var802_input2[par_pid_fanin2_func477[pid]]] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var801_input1[par_pid_fanin2_func477[pid]]]?; assign chan_counter[cid_var802_input2[par_pid_fanin2_func477[pid]]]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var802_input2[par_pid_fanin2_func477[pid]]]?; assign chan_counter[cid_var801_input1[par_pid_fanin2_func477[pid]]]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_fanin2_func477[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fanin2_func477[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin2_func477[pid]!; };
}

process fanin3(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var804_input1[pid] = -1;
    cid_var805_input2[pid] = -1;
    cid_var813_c[pid] = -1;
    cid_var805_input2[pid] = arg_cid_var805_input2[pid];
    cid_var804_input1[pid] = arg_cid_var804_input1[pid];
}



state
    started,
    ending,
    ended,
    made_c_0,
    created_fanin3_func478_0,
    started_fanin3_func478_0,
    starting;
init
    starting;
trans
    started -> made_c_0 { assign cid_var813_c[pid] = make_chan(0); },
    made_c_0 -> created_fanin3_func478_0 { assign p = make_fanin3_func478(pid); },
    created_fanin3_func478_0 -> started_fanin3_func478_0 { sync async_fanin3_func478[p]!; },
    started_fanin3_func478_0 -> ending { assign res_fanin3_0_Chan[pid] = cid_var813_c[pid]; },
    starting -> started { sync async_fanin3[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin3[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin3[pid]!; };
}

process fanin3_func478(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    enter_loop_body_0,
    exit_loop_body_0,
    select_end_0,
    sending_c_0,
    sent_c_0,
    sent_c_1,
    ending,
    select_case_2_trigger_0,
    exit_loop_0,
    select_case_1_enter_0,
    select_case_2_enter_0,
    sending_c_1,
    select_pass_1_0,
    select_case_1_trigger_0,
    exit_loop_cond_0,
    enter_loop_cond_0,
    started,
    select_pass_2_0,
    starting;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> sending_c_0 { sync sender_trigger[cid_var813_c[par_pid_fanin3_func478[pid]]]!; assign chan_counter[cid_var813_c[par_pid_fanin3_func478[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var813_c[par_pid_fanin3_func478[pid]]]?; },
    sent_c_0 -> select_end_0 { },
    select_case_2_enter_0 -> sending_c_1 { sync sender_trigger[cid_var813_c[par_pid_fanin3_func478[pid]]]!; assign chan_counter[cid_var813_c[par_pid_fanin3_func478[pid]]]++; },
    sending_c_1 -> sent_c_1 { sync sender_confirm[cid_var813_c[par_pid_fanin3_func478[pid]]]?; },
    sent_c_1 -> select_end_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var804_input1[par_pid_fanin3_func478[pid]]]--, chan_counter[cid_var805_input2[par_pid_fanin3_func478[pid]]]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var804_input1[par_pid_fanin3_func478[pid]]] < 0 || chan_counter[cid_var804_input1[par_pid_fanin3_func478[pid]]] >= 0; sync receiver_trigger[cid_var804_input1[par_pid_fanin3_func478[pid]]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var804_input1[par_pid_fanin3_func478[pid]]]?; assign chan_counter[cid_var805_input2[par_pid_fanin3_func478[pid]]]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var805_input2[par_pid_fanin3_func478[pid]]] < 0 || chan_counter[cid_var805_input2[par_pid_fanin3_func478[pid]]] >= 0; sync receiver_trigger[cid_var805_input2[par_pid_fanin3_func478[pid]]]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var805_input2[par_pid_fanin3_func478[pid]]]?; assign chan_counter[cid_var804_input1[par_pid_fanin3_func478[pid]]]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var804_input1[par_pid_fanin3_func478[pid]]] < 0 || chan_counter[cid_var804_input1[par_pid_fanin3_func478[pid]]] >= 0) && !(chan_buffer[cid_var805_input2[par_pid_fanin3_func478[pid]]] < 0 || chan_counter[cid_var805_input2[par_pid_fanin3_func478[pid]]] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var804_input1[par_pid_fanin3_func478[pid]]]?; assign chan_counter[cid_var805_input2[par_pid_fanin3_func478[pid]]]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var805_input2[par_pid_fanin3_func478[pid]]]?; assign chan_counter[cid_var804_input1[par_pid_fanin3_func478[pid]]]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_fanin3_func478[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fanin3_func478[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin3_func478[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var819 = -1;
int cid_var820 = -1;
int cid_var818_c = -1;

int i0 = 0;


state
    enter_loop_cond_0,
    exit_loop_cond_0,
    created_fanin3_0,
    ended,
    started_fanin3_0,
    exit_loop_body_0,
    receiving_c_0,
    started,
    created_process_Aprime_0,
    awaited_process_Aprime_0,
    started_process_Bprime_0,
    awaited_fanin3_0,
    starting,
    started_process_Aprime_0,
    created_process_Bprime_0,
    awaited_process_Bprime_0,
    enter_loop_body_0,
    exit_loop_0,
    received_c_0,
    ending;
init
    starting;
trans
    started -> created_process_Aprime_0 { assign p = make_process_Aprime(); },
    created_process_Aprime_0 -> started_process_Aprime_0 { sync sync_process_Aprime[p]!; },
    started_process_Aprime_0 -> awaited_process_Aprime_0 { sync sync_process_Aprime[p]?; assign cid_var819 = res_process_Aprime_0_Chan[p]; },
    awaited_process_Aprime_0 -> created_process_Bprime_0 { assign p = make_process_Bprime(); },
    created_process_Bprime_0 -> started_process_Bprime_0 { sync sync_process_Bprime[p]!; },
    started_process_Bprime_0 -> awaited_process_Bprime_0 { sync sync_process_Bprime[p]?; assign cid_var820 = res_process_Bprime_0_Chan[p]; },
    awaited_process_Bprime_0 -> created_fanin3_0 { assign p = make_fanin3(), arg_cid_var805_input2[p] = cid_var820, arg_cid_var804_input1[p] = cid_var819; },
    created_fanin3_0 -> started_fanin3_0 { sync sync_fanin3[p]!; },
    started_fanin3_0 -> awaited_fanin3_0 { sync sync_fanin3[p]?; assign cid_var818_c = res_fanin3_0_Chan[p]; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_c_0 { sync receiver_trigger[cid_var818_c]!; assign chan_counter[cid_var818_c]--; },
    receiving_c_0 -> received_c_0 { sync receiver_confirm[cid_var818_c]?; },
    received_c_0 -> exit_loop_body_0 { },
    awaited_fanin3_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 10; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 10; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process process_A(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var814_c[pid] = -1;
}



state
    ending,
    ended,
    made_c_0,
    created_process_A_func479_0,
    started_process_A_func479_0,
    starting,
    started;
init
    starting;
trans
    started -> made_c_0 { assign cid_var814_c[pid] = make_chan(0); },
    made_c_0 -> created_process_A_func479_0 { assign p = make_process_A_func479(pid); },
    created_process_A_func479_0 -> started_process_A_func479_0 { sync async_process_A_func479[p]!; },
    started_process_A_func479_0 -> ending { assign res_process_A_0_Chan[pid] = cid_var814_c[pid]; },
    starting -> started { sync async_process_A[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_process_A[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_A[pid]!; };
}

process process_A_func479(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    sending_c_0,
    sent_c_0,
    starting,
    started,
    ending,
    ended,
    exit_loop_body_0,
    exit_loop_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_c_0 { sync sender_trigger[cid_var814_c[par_pid_process_A_func479[pid]]]!; assign chan_counter[cid_var814_c[par_pid_process_A_func479[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var814_c[par_pid_process_A_func479[pid]]]?; },
    sent_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_process_A_func479[pid]?; assign is_sync = false; },
    starting -> started { sync sync_process_A_func479[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_A_func479[pid]!; };
}

process process_Aprime(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var816_c[pid] = -1;
}



state
    ended,
    made_c_0,
    created_process_Aprime_func481_0,
    started_process_Aprime_func481_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> made_c_0 { assign cid_var816_c[pid] = make_chan(0); },
    made_c_0 -> created_process_Aprime_func481_0 { assign p = make_process_Aprime_func481(pid); },
    created_process_Aprime_func481_0 -> started_process_Aprime_func481_0 { sync async_process_Aprime_func481[p]!; },
    started_process_Aprime_func481_0 -> ending { assign res_process_Aprime_0_Chan[pid] = cid_var816_c[pid]; },
    starting -> started { sync async_process_Aprime[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_process_Aprime[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_Aprime[pid]!; };
}

process process_Aprime_func481(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    exit_loop_cond_0,
    sending_c_0,
    sent_c_0,
    exit_loop_0,
    starting,
    ended,
    enter_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_c_0 { sync sender_trigger[cid_var816_c[par_pid_process_Aprime_func481[pid]]]!; assign chan_counter[cid_var816_c[par_pid_process_Aprime_func481[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var816_c[par_pid_process_Aprime_func481[pid]]]?; },
    sent_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_process_Aprime_func481[pid]?; assign is_sync = false; },
    starting -> started { sync sync_process_Aprime_func481[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_Aprime_func481[pid]!; };
}

process process_B(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var815_c[pid] = -1;
}



state
    ending,
    ended,
    made_c_0,
    created_process_B_func480_0,
    started_process_B_func480_0,
    starting,
    started;
init
    starting;
trans
    started -> made_c_0 { assign cid_var815_c[pid] = make_chan(0); },
    made_c_0 -> created_process_B_func480_0 { assign p = make_process_B_func480(pid); },
    created_process_B_func480_0 -> started_process_B_func480_0 { sync async_process_B_func480[p]!; },
    started_process_B_func480_0 -> ending { assign res_process_B_0_Chan[pid] = cid_var815_c[pid]; },
    starting -> started { sync async_process_B[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_process_B[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_B[pid]!; };
}

process process_B_func480(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    sent_c_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    starting,
    started,
    ending,
    ended,
    exit_loop_0,
    sending_c_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_c_0 { sync sender_trigger[cid_var815_c[par_pid_process_B_func480[pid]]]!; assign chan_counter[cid_var815_c[par_pid_process_B_func480[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var815_c[par_pid_process_B_func480[pid]]]?; },
    sent_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_process_B_func480[pid]?; assign is_sync = false; },
    starting -> started { sync sync_process_B_func480[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_B_func480[pid]!; };
}

process process_Bprime(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var817_c[pid] = -1;
}



state
    ended,
    made_c_0,
    created_process_Bprime_func482_0,
    started_process_Bprime_func482_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> made_c_0 { assign cid_var817_c[pid] = make_chan(0); },
    made_c_0 -> created_process_Bprime_func482_0 { assign p = make_process_Bprime_func482(pid); },
    created_process_Bprime_func482_0 -> started_process_Bprime_func482_0 { sync async_process_Bprime_func482[p]!; },
    started_process_Bprime_func482_0 -> ending { assign res_process_Bprime_0_Chan[pid] = cid_var817_c[pid]; },
    starting -> started { sync async_process_Bprime[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_process_Bprime[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_Bprime[pid]!; };
}

process process_Bprime_func482(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    sent_c_0,
    starting,
    exit_loop_body_0,
    exit_loop_0,
    sending_c_0,
    started;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_c_0 { sync sender_trigger[cid_var817_c[par_pid_process_Bprime_func482[pid]]]!; assign chan_counter[cid_var817_c[par_pid_process_Bprime_func482[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var817_c[par_pid_process_Bprime_func482[pid]]]?; },
    sent_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_process_Bprime_func482[pid]?; assign is_sync = false; },
    starting -> started { sync sync_process_Bprime_func482[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_Bprime_func482[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
fanin1_0 = fanin1(0);
fanin1_func475_0 = fanin1_func475(0);
fanin1_func476_0 = fanin1_func476(0);
fanin2_0 = fanin2(0);
fanin2_func477_0 = fanin2_func477(0);
fanin3_0 = fanin3(0);
fanin3_func478_0 = fanin3_func478(0);
process_A_0 = process_A(0);
process_A_func479_0 = process_A_func479(0);
process_Aprime_0 = process_Aprime(0);
process_Aprime_func481_0 = process_Aprime_func481(0);
process_B_0 = process_B(0);
process_B_func480_0 = process_B_func480(0);
process_Bprime_0 = process_Bprime(0);
process_Bprime_func482_0 = process_Bprime_func482(0);
system Channel0, Channel1, Channel2, fanin1_0, fanin1_func475_0, fanin1_func476_0, fanin2_0, fanin2_func477_0, fanin3_0, fanin3_func478_0, main, process_A_0, process_A_func479_0, process_Aprime_0, process_Aprime_func481_0, process_B_0, process_B_func480_0, process_Bprime_0, process_Bprime_func482_0;

