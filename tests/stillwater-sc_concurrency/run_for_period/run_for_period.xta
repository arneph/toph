// Place global declarations here.
int fid_var821_continuous_process = 484;
int fid_var822_main = 483;
int continuous_process_count = 0;
chan async_continuous_process[1];
chan sync_continuous_process[1];
int res_continuous_process_0_Chan[1];

int continuous_process_func485_count = 0;
chan async_continuous_process_func485[1];
chan sync_continuous_process_func485[1];
int par_pid_continuous_process_func485[1];

int time_after_count = 0;
chan async_time_after[1];
chan sync_time_after[1];
int res_time_after_0_Chan[1];

int time_after_func487_count = 0;
chan async_time_after_func487[1];
chan sync_time_after_func487[1];
int par_pid_time_after_func487[1];

int cid_var823_c[1];

int cid_var826_ch[1];

int chan_count = 0;
int chan_counter[2];
int chan_buffer[2];
chan sender_trigger[2];
chan sender_confirm[2];
chan receiver_trigger[2];
chan receiver_confirm[2];
chan close[2];

int make_continuous_process() {
	int pid = continuous_process_count;
	continuous_process_count++;
	return pid;
}

int make_continuous_process_func485(int par_pid) {
	int pid = continuous_process_func485_count;
	continuous_process_func485_count++;
	par_pid_continuous_process_func485[pid] = par_pid;
	return pid;
}

int make_time_after() {
	int pid = time_after_count;
	time_after_count++;
	return pid;
}

int make_time_after_func487(int par_pid) {
	int pid = time_after_func487_count;
	time_after_func487_count++;
	par_pid_time_after_func487[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 1] i) {
// Place local declarations here.


state
    closing,
    closed,
    idle,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    confirming_closed,
    bad;
commit
    confirming_closed,
    new_receiver,
    confirming_b,
    closing,
    new_sender,
    confirming_a;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process continuous_process(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var823_c[pid] = -1;
}



state
    ended,
    made_c_0,
    created_continuous_process_func485_0,
    started_continuous_process_func485_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> made_c_0 { assign cid_var823_c[pid] = make_chan(0); },
    made_c_0 -> created_continuous_process_func485_0 { assign p = make_continuous_process_func485(pid); },
    created_continuous_process_func485_0 -> started_continuous_process_func485_0 { sync async_continuous_process_func485[p]!; },
    started_continuous_process_func485_0 -> ending { assign res_continuous_process_0_Chan[pid] = cid_var823_c[pid]; },
    starting -> started { sync async_continuous_process[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_continuous_process[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_continuous_process[pid]!; };
}

process continuous_process_func485(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    exit_loop_body_0,
    exit_loop_0,
    starting,
    started,
    enter_loop_cond_0,
    enter_loop_body_0,
    sent_c_0,
    ending,
    ended,
    exit_loop_cond_0,
    sending_c_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_c_0 { sync sender_trigger[cid_var823_c[par_pid_continuous_process_func485[pid]]]!; assign chan_counter[cid_var823_c[par_pid_continuous_process_func485[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var823_c[par_pid_continuous_process_func485[pid]]]?; },
    sent_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_continuous_process_func485[pid]?; assign is_sync = false; },
    starting -> started { sync sync_continuous_process_func485[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_continuous_process_func485[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var824_c = -1;
int cid_var825_timeout = -1;



state
    started,
    created_time_after_0,
    exit_loop_0,
    select_end_0,
    select_case_2_enter_0,
    select_case_1_trigger_0,
    ended,
    exit_loop_cond_0,
    select_pass_2_0,
    select_case_1_enter_0,
    select_pass_1_0,
    select_case_2_trigger_0,
    starting,
    ending,
    created_continuous_process_0,
    started_time_after_0,
    awaited_time_after_0,
    enter_loop_cond_0,
    exit_loop_body_0,
    started_continuous_process_0,
    awaited_continuous_process_0,
    enter_loop_body_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> created_continuous_process_0 { assign p = make_continuous_process(); },
    created_continuous_process_0 -> started_continuous_process_0 { sync sync_continuous_process[p]!; },
    started_continuous_process_0 -> awaited_continuous_process_0 { sync sync_continuous_process[p]?; assign cid_var824_c = res_continuous_process_0_Chan[p]; },
    awaited_continuous_process_0 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var825_timeout = res_time_after_0_Chan[p]; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> select_end_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var824_c]--, chan_counter[cid_var825_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var824_c] < 0 || chan_counter[cid_var824_c] >= 0; sync receiver_trigger[cid_var824_c]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var824_c]?; assign chan_counter[cid_var825_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var825_timeout] < 0 || chan_counter[cid_var825_timeout] >= 0; sync receiver_trigger[cid_var825_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var825_timeout]?; assign chan_counter[cid_var824_c]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var824_c] < 0 || chan_counter[cid_var824_c] >= 0) && !(chan_buffer[cid_var825_timeout] < 0 || chan_counter[cid_var825_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var824_c]?; assign chan_counter[cid_var825_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var825_timeout]?; assign chan_counter[cid_var824_c]++; },
    select_end_0 -> exit_loop_body_0 { },
    awaited_time_after_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process time_after(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var826_ch[pid] = -1;
}



state
    starting,
    started,
    ending,
    ended,
    made_ch_0,
    created_time_after_func487_0,
    started_time_after_func487_0;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var826_ch[pid] = make_chan(1); },
    made_ch_0 -> created_time_after_func487_0 { assign p = make_time_after_func487(pid); },
    created_time_after_func487_0 -> started_time_after_func487_0 { sync async_time_after_func487[p]!; },
    started_time_after_func487_0 -> ending { assign res_time_after_0_Chan[pid] = cid_var826_ch[pid]; },
    starting -> started { sync async_time_after[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_time_after[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after[pid]!; };
}

process time_after_func487(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    sending_ch_0,
    sent_ch_0;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var826_ch[par_pid_time_after_func487[pid]]]!; assign chan_counter[cid_var826_ch[par_pid_time_after_func487[pid]]]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var826_ch[par_pid_time_after_func487[pid]]]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_time_after_func487[pid]?; assign is_sync = false; },
    starting -> started { sync sync_time_after_func487[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after_func487[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
continuous_process_0 = continuous_process(0);
continuous_process_func485_0 = continuous_process_func485(0);
time_after_0 = time_after(0);
time_after_func487_0 = time_after_func487(0);
system Channel0, Channel1, continuous_process_0, continuous_process_func485_0, main, time_after_0, time_after_func487_0;

