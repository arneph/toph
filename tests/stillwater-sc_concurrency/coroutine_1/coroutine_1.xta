// Place global declarations here.
int fid_var778_rnd_time_loop = 458;
int fid_var779_main = 457;
int rnd_time_loop_count = 0;
chan async_rnd_time_loop[1];
chan sync_rnd_time_loop[1];
int res_rnd_time_loop_0_Chan[1];

int rnd_time_loop_func459_count = 0;
chan async_rnd_time_loop_func459[1];
chan sync_rnd_time_loop_func459[1];
int par_pid_rnd_time_loop_func459[1];

int cid_var780_c[1];

int chan_count = 0;
int chan_counter[1];
int chan_buffer[1];
chan sender_trigger[1];
chan sender_confirm[1];
chan receiver_trigger[1];
chan receiver_confirm[1];
chan close[1];

int make_rnd_time_loop() {
	int pid = rnd_time_loop_count;
	rnd_time_loop_count++;
	return pid;
}

int make_rnd_time_loop_func459(int par_pid) {
	int pid = rnd_time_loop_func459_count;
	rnd_time_loop_func459_count++;
	par_pid_rnd_time_loop_func459[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 0] i) {
// Place local declarations here.


state
    confirming_b,
    closed,
    bad,
    new_sender,
    confirming_a,
    new_receiver,
    closing,
    confirming_closed,
    idle;
commit
    new_sender,
    confirming_b,
    confirming_a,
    new_receiver,
    closing,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var781_c = -1;



state
    enter_loop_cond_0,
    exit_loop_body_0,
    started,
    created_rnd_time_loop_0,
    exit_loop_0,
    received_c_0,
    starting,
    ending,
    ended,
    started_rnd_time_loop_0,
    awaited_rnd_time_loop_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    receiving_c_0;
init
    starting;
trans
    started -> created_rnd_time_loop_0 { assign p = make_rnd_time_loop(); },
    created_rnd_time_loop_0 -> started_rnd_time_loop_0 { sync sync_rnd_time_loop[p]!; },
    started_rnd_time_loop_0 -> awaited_rnd_time_loop_0 { sync sync_rnd_time_loop[p]?; assign cid_var781_c = res_rnd_time_loop_0_Chan[p]; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_c_0 { sync receiver_trigger[cid_var781_c]!; assign chan_counter[cid_var781_c]--; },
    receiving_c_0 -> received_c_0 { sync receiver_confirm[cid_var781_c]?; },
    received_c_0 -> exit_loop_body_0 { },
    awaited_rnd_time_loop_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process rnd_time_loop(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var780_c[pid] = -1;
}



state
    ending,
    ended,
    made_c_0,
    created_rnd_time_loop_func459_0,
    started_rnd_time_loop_func459_0,
    starting,
    started;
init
    starting;
trans
    started -> made_c_0 { assign cid_var780_c[pid] = make_chan(0); },
    made_c_0 -> created_rnd_time_loop_func459_0 { assign p = make_rnd_time_loop_func459(pid); },
    created_rnd_time_loop_func459_0 -> started_rnd_time_loop_func459_0 { sync async_rnd_time_loop_func459[p]!; },
    started_rnd_time_loop_func459_0 -> ending { assign res_rnd_time_loop_0_Chan[pid] = cid_var780_c[pid]; },
    starting -> started { sync async_rnd_time_loop[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_rnd_time_loop[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_rnd_time_loop[pid]!; };
}

process rnd_time_loop_func459(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ended,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    ending,
    enter_loop_cond_0,
    exit_loop_0,
    sending_c_0,
    sent_c_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_c_0 { sync sender_trigger[cid_var780_c[par_pid_rnd_time_loop_func459[pid]]]!; assign chan_counter[cid_var780_c[par_pid_rnd_time_loop_func459[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var780_c[par_pid_rnd_time_loop_func459[pid]]]?; },
    sent_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_rnd_time_loop_func459[pid]?; assign is_sync = false; },
    starting -> started { sync sync_rnd_time_loop_func459[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_rnd_time_loop_func459[pid]!; };
}

Channel0 = Channel(0);
rnd_time_loop_0 = rnd_time_loop(0);
rnd_time_loop_func459_0 = rnd_time_loop_func459(0);
system Channel0, main, rnd_time_loop_0, rnd_time_loop_func459_0;

