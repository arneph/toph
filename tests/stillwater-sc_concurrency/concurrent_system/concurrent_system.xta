// Place global declarations here.
int fid_var760_fakeSearch = 438;
int fid_var761_Web = -1;
int fid_var762_SequentialSearch = 439;
int fid_var763_ConcurrentSearch = 440;
int fid_var764_ConcurrentSearchWithCutOff = 441;
int fid_var765_First = 442;
int fid_var766_ReplicaSearch = 443;
int fid_var767_main = 437;
int fakeSearch_count = 0;
chan async_fakeSearch[1];
chan sync_fakeSearch[1];

int SequentialSearch_count = 0;
chan async_SequentialSearch[1];
chan sync_SequentialSearch[1];

int ConcurrentSearch_count = 0;
chan async_ConcurrentSearch[1];
chan sync_ConcurrentSearch[1];

int ConcurrentSearchWithCutOff_count = 0;
chan async_ConcurrentSearchWithCutOff[1];
chan sync_ConcurrentSearchWithCutOff[1];

int First_count = 0;
chan async_First[3];
chan sync_First[3];

int ReplicaSearch_count = 0;
chan async_ReplicaSearch[1];
chan sync_ReplicaSearch[1];

int fakeSearch_func444_count = 0;
chan async_fakeSearch_func444[1];
chan sync_fakeSearch_func444[1];
int par_pid_fakeSearch_func444[1];

int ConcurrentSearch_func445_count = 0;
chan async_ConcurrentSearch_func445[1];
chan sync_ConcurrentSearch_func445[1];
int par_pid_ConcurrentSearch_func445[1];

int ConcurrentSearch_func446_count = 0;
chan async_ConcurrentSearch_func446[1];
chan sync_ConcurrentSearch_func446[1];
int par_pid_ConcurrentSearch_func446[1];

int ConcurrentSearch_func447_count = 0;
chan async_ConcurrentSearch_func447[1];
chan sync_ConcurrentSearch_func447[1];
int par_pid_ConcurrentSearch_func447[1];

int ConcurrentSearchWithCutOff_func448_count = 0;
chan async_ConcurrentSearchWithCutOff_func448[1];
chan sync_ConcurrentSearchWithCutOff_func448[1];
int par_pid_ConcurrentSearchWithCutOff_func448[1];

int ConcurrentSearchWithCutOff_func449_count = 0;
chan async_ConcurrentSearchWithCutOff_func449[1];
chan sync_ConcurrentSearchWithCutOff_func449[1];
int par_pid_ConcurrentSearchWithCutOff_func449[1];

int ConcurrentSearchWithCutOff_func450_count = 0;
chan async_ConcurrentSearchWithCutOff_func450[1];
chan sync_ConcurrentSearchWithCutOff_func450[1];
int par_pid_ConcurrentSearchWithCutOff_func450[1];

int time_after_count = 0;
chan async_time_after[1];
chan sync_time_after[1];
int res_time_after_0_Chan[1];

int time_after_func452_count = 0;
chan async_time_after_func452[1];
chan sync_time_after_func452[1];
int par_pid_time_after_func452[1];

int First_func453_count = 0;
chan async_First_func453[1];
chan sync_First_func453[1];
int par_pid_First_func453[1];

int ReplicaSearch_func454_count = 0;
chan async_ReplicaSearch_func454[1];
chan sync_ReplicaSearch_func454[1];
int par_pid_ReplicaSearch_func454[1];

int ReplicaSearch_func455_count = 0;
chan async_ReplicaSearch_func455[1];
chan sync_ReplicaSearch_func455[1];
int par_pid_ReplicaSearch_func455[1];

int ReplicaSearch_func456_count = 0;
chan async_ReplicaSearch_func456[1];
chan sync_ReplicaSearch_func456[1];
int par_pid_ReplicaSearch_func456[1];

int cid_var769_c[1];

int cid_var770_c[1];

int cid_var773_c[3];

int cid_var776_c[1];

int cid_var772_ch[1];

int chan_count = 0;
int chan_counter[5];
int chan_buffer[5];
chan sender_trigger[5];
chan sender_confirm[5];
chan receiver_trigger[5];
chan receiver_confirm[5];
chan close[5];

int make_fakeSearch() {
	int pid = fakeSearch_count;
	fakeSearch_count++;
	return pid;
}

int make_SequentialSearch() {
	int pid = SequentialSearch_count;
	SequentialSearch_count++;
	return pid;
}

int make_ConcurrentSearch() {
	int pid = ConcurrentSearch_count;
	ConcurrentSearch_count++;
	return pid;
}

int make_ConcurrentSearchWithCutOff() {
	int pid = ConcurrentSearchWithCutOff_count;
	ConcurrentSearchWithCutOff_count++;
	return pid;
}

int make_First() {
	int pid = First_count;
	First_count++;
	return pid;
}

int make_ReplicaSearch() {
	int pid = ReplicaSearch_count;
	ReplicaSearch_count++;
	return pid;
}

int make_fakeSearch_func444(int par_pid) {
	int pid = fakeSearch_func444_count;
	fakeSearch_func444_count++;
	par_pid_fakeSearch_func444[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearch_func445(int par_pid) {
	int pid = ConcurrentSearch_func445_count;
	ConcurrentSearch_func445_count++;
	par_pid_ConcurrentSearch_func445[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearch_func446(int par_pid) {
	int pid = ConcurrentSearch_func446_count;
	ConcurrentSearch_func446_count++;
	par_pid_ConcurrentSearch_func446[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearch_func447(int par_pid) {
	int pid = ConcurrentSearch_func447_count;
	ConcurrentSearch_func447_count++;
	par_pid_ConcurrentSearch_func447[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearchWithCutOff_func448(int par_pid) {
	int pid = ConcurrentSearchWithCutOff_func448_count;
	ConcurrentSearchWithCutOff_func448_count++;
	par_pid_ConcurrentSearchWithCutOff_func448[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearchWithCutOff_func449(int par_pid) {
	int pid = ConcurrentSearchWithCutOff_func449_count;
	ConcurrentSearchWithCutOff_func449_count++;
	par_pid_ConcurrentSearchWithCutOff_func449[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearchWithCutOff_func450(int par_pid) {
	int pid = ConcurrentSearchWithCutOff_func450_count;
	ConcurrentSearchWithCutOff_func450_count++;
	par_pid_ConcurrentSearchWithCutOff_func450[pid] = par_pid;
	return pid;
}

int make_time_after() {
	int pid = time_after_count;
	time_after_count++;
	return pid;
}

int make_time_after_func452(int par_pid) {
	int pid = time_after_func452_count;
	time_after_func452_count++;
	par_pid_time_after_func452[pid] = par_pid;
	return pid;
}

int make_First_func453(int par_pid) {
	int pid = First_func453_count;
	First_func453_count++;
	par_pid_First_func453[pid] = par_pid;
	return pid;
}

int make_ReplicaSearch_func454(int par_pid) {
	int pid = ReplicaSearch_func454_count;
	ReplicaSearch_func454_count++;
	par_pid_ReplicaSearch_func454[pid] = par_pid;
	return pid;
}

int make_ReplicaSearch_func455(int par_pid) {
	int pid = ReplicaSearch_func455_count;
	ReplicaSearch_func455_count++;
	par_pid_ReplicaSearch_func455[pid] = par_pid;
	return pid;
}

int make_ReplicaSearch_func456(int par_pid) {
	int pid = ReplicaSearch_func456_count;
	ReplicaSearch_func456_count++;
	par_pid_ReplicaSearch_func456[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 4] i) {
// Place local declarations here.


state
    confirming_a,
    new_receiver,
    closed,
    confirming_closed,
    bad,
    idle,
    new_sender,
    confirming_b,
    closing;
commit
    confirming_a,
    new_receiver,
    confirming_closed,
    new_sender,
    confirming_b,
    closing;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process ConcurrentSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int i0 = 0;
void initialize() {
    cid_var769_c[pid] = -1;
}



state
    ending,
    exit_loop_cond_0,
    exit_loop_0,
    received_c_0,
    started,
    ended,
    made_c_0,
    started_ConcurrentSearch_func445_0,
    started_ConcurrentSearch_func446_0,
    created_ConcurrentSearch_func447_0,
    enter_loop_body_0,
    starting,
    created_ConcurrentSearch_func445_0,
    created_ConcurrentSearch_func446_0,
    started_ConcurrentSearch_func447_0,
    enter_loop_cond_0,
    exit_loop_body_0,
    receiving_c_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var769_c[pid] = make_chan(0); },
    made_c_0 -> created_ConcurrentSearch_func445_0 { assign p = make_ConcurrentSearch_func445(pid); },
    created_ConcurrentSearch_func445_0 -> started_ConcurrentSearch_func445_0 { sync async_ConcurrentSearch_func445[p]!; },
    started_ConcurrentSearch_func445_0 -> created_ConcurrentSearch_func446_0 { assign p = make_ConcurrentSearch_func446(pid); },
    created_ConcurrentSearch_func446_0 -> started_ConcurrentSearch_func446_0 { sync async_ConcurrentSearch_func446[p]!; },
    started_ConcurrentSearch_func446_0 -> created_ConcurrentSearch_func447_0 { assign p = make_ConcurrentSearch_func447(pid); },
    created_ConcurrentSearch_func447_0 -> started_ConcurrentSearch_func447_0 { sync async_ConcurrentSearch_func447[p]!; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_c_0 { sync receiver_trigger[cid_var769_c[pid]]!; assign chan_counter[cid_var769_c[pid]]--; },
    receiving_c_0 -> received_c_0 { sync receiver_confirm[cid_var769_c[pid]]?; },
    received_c_0 -> exit_loop_body_0 { },
    started_ConcurrentSearch_func447_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearch[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch[pid]!; };
}

process ConcurrentSearchWithCutOff(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var771_timeout = -1;

int i0 = 0;
void initialize() {
    cid_var770_c[pid] = -1;
}



state
    started_time_after_0,
    exit_loop_0,
    select_end_0,
    select_case_2_trigger_0,
    created_ConcurrentSearchWithCutOff_func449_0,
    started_ConcurrentSearchWithCutOff_func449_0,
    created_ConcurrentSearchWithCutOff_func448_0,
    started_ConcurrentSearchWithCutOff_func448_0,
    awaited_time_after_0,
    exit_loop_body_0,
    select_case_1_enter_0,
    select_case_2_enter_0,
    started,
    ended,
    select_case_1_trigger_0,
    started_ConcurrentSearchWithCutOff_func450_0,
    created_time_after_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    select_pass_1_0,
    starting,
    created_ConcurrentSearchWithCutOff_func450_0,
    enter_loop_body_0,
    select_pass_2_0,
    ending,
    made_c_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var770_c[pid] = make_chan(0); },
    made_c_0 -> created_ConcurrentSearchWithCutOff_func448_0 { assign p = make_ConcurrentSearchWithCutOff_func448(pid); },
    created_ConcurrentSearchWithCutOff_func448_0 -> started_ConcurrentSearchWithCutOff_func448_0 { sync async_ConcurrentSearchWithCutOff_func448[p]!; },
    started_ConcurrentSearchWithCutOff_func448_0 -> created_ConcurrentSearchWithCutOff_func449_0 { assign p = make_ConcurrentSearchWithCutOff_func449(pid); },
    created_ConcurrentSearchWithCutOff_func449_0 -> started_ConcurrentSearchWithCutOff_func449_0 { sync async_ConcurrentSearchWithCutOff_func449[p]!; },
    started_ConcurrentSearchWithCutOff_func449_0 -> created_ConcurrentSearchWithCutOff_func450_0 { assign p = make_ConcurrentSearchWithCutOff_func450(pid); },
    created_ConcurrentSearchWithCutOff_func450_0 -> started_ConcurrentSearchWithCutOff_func450_0 { sync async_ConcurrentSearchWithCutOff_func450[p]!; },
    started_ConcurrentSearchWithCutOff_func450_0 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var771_timeout = res_time_after_0_Chan[p]; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var770_c[pid]]--, chan_counter[cid_var771_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var770_c[pid]] < 0 || chan_counter[cid_var770_c[pid]] >= 0; sync receiver_trigger[cid_var770_c[pid]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var770_c[pid]]?; assign chan_counter[cid_var771_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var771_timeout] < 0 || chan_counter[cid_var771_timeout] >= 0; sync receiver_trigger[cid_var771_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var771_timeout]?; assign chan_counter[cid_var770_c[pid]]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var770_c[pid]] < 0 || chan_counter[cid_var770_c[pid]] >= 0) && !(chan_buffer[cid_var771_timeout] < 0 || chan_counter[cid_var771_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var770_c[pid]]?; assign chan_counter[cid_var771_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var771_timeout]?; assign chan_counter[cid_var770_c[pid]]++; },
    select_end_0 -> exit_loop_body_0 { },
    awaited_time_after_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearchWithCutOff[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff[pid]!; };
}

process ConcurrentSearchWithCutOff_func448(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    sent_c_0,
    starting,
    started,
    ending,
    ended,
    sending_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func448[pid]]]!; assign chan_counter[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func448[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func448[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func448[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func448[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func448[pid]!; };
}

process ConcurrentSearchWithCutOff_func449(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func449[pid]]]!; assign chan_counter[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func449[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func449[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func449[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func449[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func449[pid]!; };
}

process ConcurrentSearchWithCutOff_func450(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0,
    starting;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func450[pid]]]!; assign chan_counter[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func450[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var770_c[par_pid_ConcurrentSearchWithCutOff_func450[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func450[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func450[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func450[pid]!; };
}

process ConcurrentSearch_func445(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    sending_c_0,
    sent_c_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var769_c[par_pid_ConcurrentSearch_func445[pid]]]!; assign chan_counter[cid_var769_c[par_pid_ConcurrentSearch_func445[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var769_c[par_pid_ConcurrentSearch_func445[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func445[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearch_func445[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func445[pid]!; };
}

process ConcurrentSearch_func446(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var769_c[par_pid_ConcurrentSearch_func446[pid]]]!; assign chan_counter[cid_var769_c[par_pid_ConcurrentSearch_func446[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var769_c[par_pid_ConcurrentSearch_func446[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func446[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearch_func446[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func446[pid]!; };
}

process ConcurrentSearch_func447(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    sent_c_0,
    starting,
    started,
    ending,
    ended,
    sending_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var769_c[par_pid_ConcurrentSearch_func447[pid]]]!; assign chan_counter[cid_var769_c[par_pid_ConcurrentSearch_func447[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var769_c[par_pid_ConcurrentSearch_func447[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func447[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearch_func447[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func447[pid]!; };
}

process First(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int fid_var775 = 453;
int fid_var774_searchReplica = -1;

int i0 = 0;
void initialize() {
    cid_var773_c[pid] = -1;
}



state
    enter_loop_body_0,
    exit_loop_body_0,
    exit_loop_0,
    started,
    ending,
    ended,
    assigned_fid_var774_searchReplica_0,
    enter_loop_cond_0,
    receiving_c_0,
    received_c_0,
    starting,
    made_c_0,
    exit_loop_cond_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var773_c[pid] = make_chan(0); },
    made_c_0 -> assigned_fid_var774_searchReplica_0 { assign fid_var774_searchReplica = fid_var775; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    assigned_fid_var774_searchReplica_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> receiving_c_0 { sync receiver_trigger[cid_var773_c[pid]]!; assign chan_counter[cid_var773_c[pid]]--; },
    receiving_c_0 -> received_c_0 { sync receiver_confirm[cid_var773_c[pid]]?; },
    received_c_0 -> ending { },
    starting -> started { sync async_First[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_First[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_First[pid]!; };
}

process First_func453(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var773_c[par_pid_First_func453[pid]]]!; assign chan_counter[cid_var773_c[par_pid_First_func453[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var773_c[par_pid_First_func453[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_First_func453[pid]?; assign is_sync = false; },
    starting -> started { sync sync_First_func453[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_First_func453[pid]!; };
}

process ReplicaSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var777_timeout = -1;

int i0 = 0;
void initialize() {
    cid_var776_c[pid] = -1;
}



state
    awaited_time_after_0,
    exit_loop_cond_0,
    select_end_0,
    created_time_after_0,
    enter_loop_cond_0,
    select_case_1_enter_0,
    select_case_2_enter_0,
    select_pass_1_0,
    starting,
    started,
    made_c_0,
    select_case_2_trigger_0,
    started_time_after_0,
    enter_loop_body_0,
    exit_loop_body_0,
    exit_loop_0,
    ending,
    created_ReplicaSearch_func455_0,
    started_ReplicaSearch_func455_0,
    created_ReplicaSearch_func456_0,
    started_ReplicaSearch_func456_0,
    select_pass_2_0,
    select_case_1_trigger_0,
    ended,
    created_ReplicaSearch_func454_0,
    started_ReplicaSearch_func454_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var776_c[pid] = make_chan(0); },
    made_c_0 -> created_ReplicaSearch_func454_0 { assign p = make_ReplicaSearch_func454(pid); },
    created_ReplicaSearch_func454_0 -> started_ReplicaSearch_func454_0 { sync async_ReplicaSearch_func454[p]!; },
    started_ReplicaSearch_func454_0 -> created_ReplicaSearch_func455_0 { assign p = make_ReplicaSearch_func455(pid); },
    created_ReplicaSearch_func455_0 -> started_ReplicaSearch_func455_0 { sync async_ReplicaSearch_func455[p]!; },
    started_ReplicaSearch_func455_0 -> created_ReplicaSearch_func456_0 { assign p = make_ReplicaSearch_func456(pid); },
    created_ReplicaSearch_func456_0 -> started_ReplicaSearch_func456_0 { sync async_ReplicaSearch_func456[p]!; },
    started_ReplicaSearch_func456_0 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var777_timeout = res_time_after_0_Chan[p]; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var776_c[pid]]--, chan_counter[cid_var777_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var776_c[pid]] < 0 || chan_counter[cid_var776_c[pid]] >= 0; sync receiver_trigger[cid_var776_c[pid]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var776_c[pid]]?; assign chan_counter[cid_var777_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var777_timeout] < 0 || chan_counter[cid_var777_timeout] >= 0; sync receiver_trigger[cid_var777_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var777_timeout]?; assign chan_counter[cid_var776_c[pid]]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var776_c[pid]] < 0 || chan_counter[cid_var776_c[pid]] >= 0) && !(chan_buffer[cid_var777_timeout] < 0 || chan_counter[cid_var777_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var776_c[pid]]?; assign chan_counter[cid_var777_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var777_timeout]?; assign chan_counter[cid_var776_c[pid]]++; },
    select_end_0 -> exit_loop_body_0 { },
    awaited_time_after_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> ending { },
    starting -> started { sync async_ReplicaSearch[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ReplicaSearch[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch[pid]!; };
}

process ReplicaSearch_func454(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    created_First_0,
    started_First_0,
    awaited_First_0,
    sending_c_0,
    sent_c_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> created_First_0 { assign p = make_First(); },
    created_First_0 -> started_First_0 { sync sync_First[p]!; },
    started_First_0 -> awaited_First_0 { sync sync_First[p]?; },
    awaited_First_0 -> sending_c_0 { sync sender_trigger[cid_var776_c[par_pid_ReplicaSearch_func454[pid]]]!; assign chan_counter[cid_var776_c[par_pid_ReplicaSearch_func454[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var776_c[par_pid_ReplicaSearch_func454[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func454[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ReplicaSearch_func454[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func454[pid]!; };
}

process ReplicaSearch_func455(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    ended,
    created_First_0,
    started_First_0,
    awaited_First_0,
    sent_c_0,
    started,
    ending,
    sending_c_0;
init
    starting;
trans
    started -> created_First_0 { assign p = make_First(); },
    created_First_0 -> started_First_0 { sync sync_First[p]!; },
    started_First_0 -> awaited_First_0 { sync sync_First[p]?; },
    awaited_First_0 -> sending_c_0 { sync sender_trigger[cid_var776_c[par_pid_ReplicaSearch_func455[pid]]]!; assign chan_counter[cid_var776_c[par_pid_ReplicaSearch_func455[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var776_c[par_pid_ReplicaSearch_func455[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func455[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ReplicaSearch_func455[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func455[pid]!; };
}

process ReplicaSearch_func456(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    ended,
    created_First_0,
    awaited_First_0,
    sending_c_0,
    started,
    ending,
    started_First_0,
    sent_c_0;
init
    starting;
trans
    started -> created_First_0 { assign p = make_First(); },
    created_First_0 -> started_First_0 { sync sync_First[p]!; },
    started_First_0 -> awaited_First_0 { sync sync_First[p]?; },
    awaited_First_0 -> sending_c_0 { sync sender_trigger[cid_var776_c[par_pid_ReplicaSearch_func456[pid]]]!; assign chan_counter[cid_var776_c[par_pid_ReplicaSearch_func456[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var776_c[par_pid_ReplicaSearch_func456[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func456[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ReplicaSearch_func456[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func456[pid]!; };
}

process SequentialSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_SequentialSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_SequentialSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_SequentialSearch[pid]!; };
}

process fakeSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int fid_var768 = 444;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_fakeSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fakeSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fakeSearch[pid]!; };
}

process fakeSearch_func444(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_fakeSearch_func444[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fakeSearch_func444[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fakeSearch_func444[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    created_fakeSearch_0,
    awaited_fakeSearch_0,
    awaited_ReplicaSearch_0,
    starting,
    started_fakeSearch_0,
    created_ReplicaSearch_0,
    started_ReplicaSearch_0,
    started;
init
    starting;
trans
    started -> created_fakeSearch_0 { assign p = make_fakeSearch(); },
    created_fakeSearch_0 -> started_fakeSearch_0 { sync sync_fakeSearch[p]!; },
    started_fakeSearch_0 -> awaited_fakeSearch_0 { sync sync_fakeSearch[p]?; },
    awaited_fakeSearch_0 -> created_ReplicaSearch_0 { assign p = make_ReplicaSearch(); },
    created_ReplicaSearch_0 -> started_ReplicaSearch_0 { sync sync_ReplicaSearch[p]!; },
    started_ReplicaSearch_0 -> awaited_ReplicaSearch_0 { sync sync_ReplicaSearch[p]?; },
    awaited_ReplicaSearch_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process time_after(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var772_ch[pid] = -1;
}



state
    made_ch_0,
    created_time_after_func452_0,
    started_time_after_func452_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var772_ch[pid] = make_chan(1); },
    made_ch_0 -> created_time_after_func452_0 { assign p = make_time_after_func452(pid); },
    created_time_after_func452_0 -> started_time_after_func452_0 { sync async_time_after_func452[p]!; },
    started_time_after_func452_0 -> ending { assign res_time_after_0_Chan[pid] = cid_var772_ch[pid]; },
    starting -> started { sync async_time_after[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_time_after[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after[pid]!; };
}

process time_after_func452(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    sent_ch_0,
    starting,
    started,
    ending,
    ended,
    sending_ch_0;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var772_ch[par_pid_time_after_func452[pid]]]!; assign chan_counter[cid_var772_ch[par_pid_time_after_func452[pid]]]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var772_ch[par_pid_time_after_func452[pid]]]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_time_after_func452[pid]?; assign is_sync = false; },
    starting -> started { sync sync_time_after_func452[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after_func452[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
ConcurrentSearchWithCutOff_0 = ConcurrentSearchWithCutOff(0);
ConcurrentSearchWithCutOff_func448_0 = ConcurrentSearchWithCutOff_func448(0);
ConcurrentSearchWithCutOff_func449_0 = ConcurrentSearchWithCutOff_func449(0);
ConcurrentSearchWithCutOff_func450_0 = ConcurrentSearchWithCutOff_func450(0);
ConcurrentSearch_0 = ConcurrentSearch(0);
ConcurrentSearch_func445_0 = ConcurrentSearch_func445(0);
ConcurrentSearch_func446_0 = ConcurrentSearch_func446(0);
ConcurrentSearch_func447_0 = ConcurrentSearch_func447(0);
First_0 = First(0);
First_1 = First(1);
First_2 = First(2);
First_func453_0 = First_func453(0);
ReplicaSearch_0 = ReplicaSearch(0);
ReplicaSearch_func454_0 = ReplicaSearch_func454(0);
ReplicaSearch_func455_0 = ReplicaSearch_func455(0);
ReplicaSearch_func456_0 = ReplicaSearch_func456(0);
SequentialSearch_0 = SequentialSearch(0);
fakeSearch_0 = fakeSearch(0);
fakeSearch_func444_0 = fakeSearch_func444(0);
time_after_0 = time_after(0);
time_after_func452_0 = time_after_func452(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, ConcurrentSearchWithCutOff_0, ConcurrentSearchWithCutOff_func448_0, ConcurrentSearchWithCutOff_func449_0, ConcurrentSearchWithCutOff_func450_0, ConcurrentSearch_0, ConcurrentSearch_func445_0, ConcurrentSearch_func446_0, ConcurrentSearch_func447_0, First_0, First_1, First_2, First_func453_0, ReplicaSearch_0, ReplicaSearch_func454_0, ReplicaSearch_func455_0, ReplicaSearch_func456_0, SequentialSearch_0, fakeSearch_0, fakeSearch_func444_0, main, time_after_0, time_after_func452_0;

