// Place global declarations here.
int fid_var461_fakeSearch = 255;
int fid_var462_Web = -1;
int fid_var463_SequentialSearch = 256;
int fid_var464_ConcurrentSearch = 257;
int fid_var465_ConcurrentSearchWithCutOff = 258;
int fid_var466_First = 259;
int fid_var467_ReplicaSearch = 260;
int fid_var468_main = 254;
int fakeSearch_count = 0;
chan async_fakeSearch[1];
chan sync_fakeSearch[1];

int SequentialSearch_count = 0;
chan async_SequentialSearch[1];
chan sync_SequentialSearch[1];

int ConcurrentSearch_count = 0;
chan async_ConcurrentSearch[1];
chan sync_ConcurrentSearch[1];

int ConcurrentSearchWithCutOff_count = 0;
chan async_ConcurrentSearchWithCutOff[1];
chan sync_ConcurrentSearchWithCutOff[1];

int First_count = 0;
chan async_First[1];
chan sync_First[1];

int ReplicaSearch_count = 0;
chan async_ReplicaSearch[1];
chan sync_ReplicaSearch[1];

int fakeSearch_func261_count = 0;
chan async_fakeSearch_func261[1];
chan sync_fakeSearch_func261[1];
int par_pid_fakeSearch_func261[1];

int ConcurrentSearch_func262_count = 0;
chan async_ConcurrentSearch_func262[1];
chan sync_ConcurrentSearch_func262[1];
int par_pid_ConcurrentSearch_func262[1];
int arg_cid_var471_c[1];

int ConcurrentSearch_func263_count = 0;
chan async_ConcurrentSearch_func263[1];
chan sync_ConcurrentSearch_func263[1];
int par_pid_ConcurrentSearch_func263[1];
int arg_cid_var472_c[1];

int ConcurrentSearch_func264_count = 0;
chan async_ConcurrentSearch_func264[1];
chan sync_ConcurrentSearch_func264[1];
int par_pid_ConcurrentSearch_func264[1];
int arg_cid_var473_c[1];

int ConcurrentSearchWithCutOff_func265_count = 0;
chan async_ConcurrentSearchWithCutOff_func265[1];
chan sync_ConcurrentSearchWithCutOff_func265[1];
int par_pid_ConcurrentSearchWithCutOff_func265[1];

int ConcurrentSearchWithCutOff_func266_count = 0;
chan async_ConcurrentSearchWithCutOff_func266[1];
chan sync_ConcurrentSearchWithCutOff_func266[1];
int par_pid_ConcurrentSearchWithCutOff_func266[1];

int ConcurrentSearchWithCutOff_func267_count = 0;
chan async_ConcurrentSearchWithCutOff_func267[1];
chan sync_ConcurrentSearchWithCutOff_func267[1];
int par_pid_ConcurrentSearchWithCutOff_func267[1];

int time_after_count = 0;
chan async_time_after[1];
chan sync_time_after[1];
int res_time_after_0_Chan[1];

int time_after_func269_count = 0;
chan async_time_after_func269[1];
chan sync_time_after_func269[1];
int par_pid_time_after_func269[1];

int First_func270_count = 0;
chan async_First_func270[1];
chan sync_First_func270[1];
int par_pid_First_func270[1];

int ReplicaSearch_func271_count = 0;
chan async_ReplicaSearch_func271[1];
chan sync_ReplicaSearch_func271[1];
int par_pid_ReplicaSearch_func271[1];
int arg_cid_var481_c[1];

int ReplicaSearch_func272_count = 0;
chan async_ReplicaSearch_func272[1];
chan sync_ReplicaSearch_func272[1];
int par_pid_ReplicaSearch_func272[1];
int arg_cid_var482_c[1];

int ReplicaSearch_func273_count = 0;
chan async_ReplicaSearch_func273[1];
chan sync_ReplicaSearch_func273[1];
int par_pid_ReplicaSearch_func273[1];
int arg_cid_var483_c[1];

int cid_var474_c[1];

int cid_var477_c[1];

int cid_var476_ch[1];

int chan_count = 0;
int chan_counter[2];
int chan_buffer[2];
chan sender_trigger[2];
chan sender_confirm[2];
chan receiver_trigger[2];
chan receiver_confirm[2];
chan close[2];

int make_fakeSearch() {
	int pid = fakeSearch_count;
	fakeSearch_count++;
	return pid;
}

int make_SequentialSearch() {
	int pid = SequentialSearch_count;
	SequentialSearch_count++;
	return pid;
}

int make_ConcurrentSearch() {
	int pid = ConcurrentSearch_count;
	ConcurrentSearch_count++;
	return pid;
}

int make_ConcurrentSearchWithCutOff() {
	int pid = ConcurrentSearchWithCutOff_count;
	ConcurrentSearchWithCutOff_count++;
	return pid;
}

int make_First() {
	int pid = First_count;
	First_count++;
	return pid;
}

int make_ReplicaSearch() {
	int pid = ReplicaSearch_count;
	ReplicaSearch_count++;
	return pid;
}

int make_fakeSearch_func261(int par_pid) {
	int pid = fakeSearch_func261_count;
	fakeSearch_func261_count++;
	par_pid_fakeSearch_func261[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearch_func262(int par_pid) {
	int pid = ConcurrentSearch_func262_count;
	ConcurrentSearch_func262_count++;
	par_pid_ConcurrentSearch_func262[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearch_func263(int par_pid) {
	int pid = ConcurrentSearch_func263_count;
	ConcurrentSearch_func263_count++;
	par_pid_ConcurrentSearch_func263[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearch_func264(int par_pid) {
	int pid = ConcurrentSearch_func264_count;
	ConcurrentSearch_func264_count++;
	par_pid_ConcurrentSearch_func264[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearchWithCutOff_func265(int par_pid) {
	int pid = ConcurrentSearchWithCutOff_func265_count;
	ConcurrentSearchWithCutOff_func265_count++;
	par_pid_ConcurrentSearchWithCutOff_func265[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearchWithCutOff_func266(int par_pid) {
	int pid = ConcurrentSearchWithCutOff_func266_count;
	ConcurrentSearchWithCutOff_func266_count++;
	par_pid_ConcurrentSearchWithCutOff_func266[pid] = par_pid;
	return pid;
}

int make_ConcurrentSearchWithCutOff_func267(int par_pid) {
	int pid = ConcurrentSearchWithCutOff_func267_count;
	ConcurrentSearchWithCutOff_func267_count++;
	par_pid_ConcurrentSearchWithCutOff_func267[pid] = par_pid;
	return pid;
}

int make_time_after() {
	int pid = time_after_count;
	time_after_count++;
	return pid;
}

int make_time_after_func269(int par_pid) {
	int pid = time_after_func269_count;
	time_after_func269_count++;
	par_pid_time_after_func269[pid] = par_pid;
	return pid;
}

int make_First_func270(int par_pid) {
	int pid = First_func270_count;
	First_func270_count++;
	par_pid_First_func270[pid] = par_pid;
	return pid;
}

int make_ReplicaSearch_func271(int par_pid) {
	int pid = ReplicaSearch_func271_count;
	ReplicaSearch_func271_count++;
	par_pid_ReplicaSearch_func271[pid] = par_pid;
	return pid;
}

int make_ReplicaSearch_func272(int par_pid) {
	int pid = ReplicaSearch_func272_count;
	ReplicaSearch_func272_count++;
	par_pid_ReplicaSearch_func272[pid] = par_pid;
	return pid;
}

int make_ReplicaSearch_func273(int par_pid) {
	int pid = ReplicaSearch_func273_count;
	ReplicaSearch_func273_count++;
	par_pid_ReplicaSearch_func273[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 1] i) {
// Place local declarations here.


state
    confirming_a,
    confirming_b,
    closing,
    confirming_closed,
    bad,
    idle,
    new_sender,
    new_receiver,
    closed;
commit
    confirming_b,
    closing,
    confirming_closed,
    new_sender,
    confirming_a,
    new_receiver;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process ConcurrentSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var470_c = -1;



state
    exit_loop_0,
    ended,
    made_c_0,
    created_ConcurrentSearch_func263_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    starting,
    started,
    created_ConcurrentSearch_func262_0,
    created_ConcurrentSearch_func264_0,
    ending,
    started_ConcurrentSearch_func262_0,
    started_ConcurrentSearch_func264_0,
    receiving_c_0,
    started_ConcurrentSearch_func263_0,
    received_c_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var470_c = make_chan(0); },
    made_c_0 -> created_ConcurrentSearch_func262_0 { assign p = make_ConcurrentSearch_func262(pid), arg_cid_var471_c[p] = cid_var470_c; },
    created_ConcurrentSearch_func262_0 -> started_ConcurrentSearch_func262_0 { sync async_ConcurrentSearch_func262[p]!; },
    started_ConcurrentSearch_func262_0 -> created_ConcurrentSearch_func263_0 { assign p = make_ConcurrentSearch_func263(pid), arg_cid_var472_c[p] = cid_var470_c; },
    created_ConcurrentSearch_func263_0 -> started_ConcurrentSearch_func263_0 { sync async_ConcurrentSearch_func263[p]!; },
    started_ConcurrentSearch_func263_0 -> created_ConcurrentSearch_func264_0 { assign p = make_ConcurrentSearch_func264(pid), arg_cid_var473_c[p] = cid_var470_c; },
    created_ConcurrentSearch_func264_0 -> started_ConcurrentSearch_func264_0 { sync async_ConcurrentSearch_func264[p]!; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_c_0 { sync receiver_trigger[cid_var470_c]!; assign chan_counter[cid_var470_c]--; },
    receiving_c_0 -> received_c_0 { sync receiver_confirm[cid_var470_c]?; },
    received_c_0 -> exit_loop_body_0 { },
    started_ConcurrentSearch_func264_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch[pid]!; };
}

process ConcurrentSearchWithCutOff(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var475_timeout = -1;

void initialize() {
    cid_var474_c[pid] = -1;
}



state
    made_c_0,
    started_ConcurrentSearchWithCutOff_func265_0,
    created_ConcurrentSearchWithCutOff_func267_0,
    created_time_after_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    starting,
    select_case_2_trigger_0,
    created_ConcurrentSearchWithCutOff_func266_0,
    awaited_time_after_0,
    exit_loop_body_0,
    select_pass_2_0,
    select_case_2_enter_0,
    select_pass_1_0,
    ending,
    started_ConcurrentSearchWithCutOff_func267_0,
    select_end_0,
    select_case_1_trigger_0,
    created_ConcurrentSearchWithCutOff_func265_0,
    ended,
    started_ConcurrentSearchWithCutOff_func266_0,
    started_time_after_0,
    exit_loop_0,
    select_case_1_enter_0,
    started;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var474_c[pid] = make_chan(0); },
    made_c_0 -> created_ConcurrentSearchWithCutOff_func265_0 { assign p = make_ConcurrentSearchWithCutOff_func265(pid); },
    created_ConcurrentSearchWithCutOff_func265_0 -> started_ConcurrentSearchWithCutOff_func265_0 { sync async_ConcurrentSearchWithCutOff_func265[p]!; },
    started_ConcurrentSearchWithCutOff_func265_0 -> created_ConcurrentSearchWithCutOff_func266_0 { assign p = make_ConcurrentSearchWithCutOff_func266(pid); },
    created_ConcurrentSearchWithCutOff_func266_0 -> started_ConcurrentSearchWithCutOff_func266_0 { sync async_ConcurrentSearchWithCutOff_func266[p]!; },
    started_ConcurrentSearchWithCutOff_func266_0 -> created_ConcurrentSearchWithCutOff_func267_0 { assign p = make_ConcurrentSearchWithCutOff_func267(pid); },
    created_ConcurrentSearchWithCutOff_func267_0 -> started_ConcurrentSearchWithCutOff_func267_0 { sync async_ConcurrentSearchWithCutOff_func267[p]!; },
    started_ConcurrentSearchWithCutOff_func267_0 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var475_timeout = res_time_after_0_Chan[p]; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var474_c[pid]]--, chan_counter[cid_var475_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var474_c[pid]] < 0 || chan_counter[cid_var474_c[pid]] >= 0; sync receiver_trigger[cid_var474_c[pid]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var474_c[pid]]?; assign chan_counter[cid_var475_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var475_timeout] < 0 || chan_counter[cid_var475_timeout] >= 0; sync receiver_trigger[cid_var475_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var475_timeout]?; assign chan_counter[cid_var474_c[pid]]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var474_c[pid]] < 0 || chan_counter[cid_var474_c[pid]] >= 0) && !(chan_buffer[cid_var475_timeout] < 0 || chan_counter[cid_var475_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var474_c[pid]]?; assign chan_counter[cid_var475_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var475_timeout]?; assign chan_counter[cid_var474_c[pid]]++; },
    select_end_0 -> exit_loop_body_0 { },
    awaited_time_after_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearchWithCutOff[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff[pid]!; };
}

process ConcurrentSearchWithCutOff_func265(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func265[pid]]]!; assign chan_counter[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func265[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func265[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func265[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func265[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func265[pid]!; };
}

process ConcurrentSearchWithCutOff_func266(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0,
    starting;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func266[pid]]]!; assign chan_counter[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func266[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func266[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func266[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func266[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func266[pid]!; };
}

process ConcurrentSearchWithCutOff_func267(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func267[pid]]]!; assign chan_counter[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func267[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var474_c[par_pid_ConcurrentSearchWithCutOff_func267[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func267[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func267[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func267[pid]!; };
}

process ConcurrentSearch_func262(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var471_c = -1;

void initialize() {
    cid_var471_c = arg_cid_var471_c[pid];
}



state
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0,
    starting;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var471_c]!; assign chan_counter[cid_var471_c]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var471_c]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func262[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearch_func262[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func262[pid]!; };
}

process ConcurrentSearch_func263(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var472_c = -1;

void initialize() {
    cid_var472_c = arg_cid_var472_c[pid];
}



state
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0,
    starting;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var472_c]!; assign chan_counter[cid_var472_c]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var472_c]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func263[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearch_func263[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func263[pid]!; };
}

process ConcurrentSearch_func264(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var473_c = -1;

void initialize() {
    cid_var473_c = arg_cid_var473_c[pid];
}



state
    sent_c_0,
    starting,
    started,
    ending,
    ended,
    sending_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var473_c]!; assign chan_counter[cid_var473_c]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var473_c]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func264[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearch_func264[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func264[pid]!; };
}

process First(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int fid_var479 = 270;
int fid_var478_searchReplica = -1;

void initialize() {
    cid_var477_c[pid] = -1;
}



state
    made_c_0,
    assigned_fid_var478_searchReplica_0,
    exit_loop_cond_0,
    exit_loop_body_0,
    exit_loop_0,
    starting,
    started,
    ended,
    receiving_c_0,
    received_c_0,
    ending,
    enter_loop_cond_0,
    enter_loop_body_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var477_c[pid] = make_chan(1); },
    made_c_0 -> assigned_fid_var478_searchReplica_0 { assign fid_var478_searchReplica = fid_var479; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    assigned_fid_var478_searchReplica_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> receiving_c_0 { sync receiver_trigger[cid_var477_c[pid]]!; assign chan_counter[cid_var477_c[pid]]--; },
    receiving_c_0 -> received_c_0 { sync receiver_confirm[cid_var477_c[pid]]?; },
    received_c_0 -> ending { },
    starting -> started { sync async_First[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_First[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_First[pid]!; };
}

process First_func270(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var477_c[par_pid_First_func270[pid]]]!; assign chan_counter[cid_var477_c[par_pid_First_func270[pid]]]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var477_c[par_pid_First_func270[pid]]]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_First_func270[pid]?; assign is_sync = false; },
    starting -> started { sync sync_First_func270[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_First_func270[pid]!; };
}

process ReplicaSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var480_c = -1;
int cid_var484_timeout = -1;



state
    made_c_0,
    select_case_1_enter_0,
    started,
    ended,
    created_ReplicaSearch_func273_0,
    created_time_after_0,
    select_pass_2_0,
    select_case_2_enter_0,
    select_pass_1_0,
    select_case_2_trigger_0,
    started_ReplicaSearch_func271_0,
    started_ReplicaSearch_func272_0,
    created_ReplicaSearch_func272_0,
    started_ReplicaSearch_func273_0,
    select_case_1_trigger_0,
    ending,
    created_ReplicaSearch_func271_0,
    awaited_time_after_0,
    select_end_0,
    starting,
    started_time_after_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var480_c = make_chan(0); },
    made_c_0 -> created_ReplicaSearch_func271_0 { assign p = make_ReplicaSearch_func271(pid), arg_cid_var481_c[p] = cid_var480_c; },
    created_ReplicaSearch_func271_0 -> started_ReplicaSearch_func271_0 { sync async_ReplicaSearch_func271[p]!; },
    started_ReplicaSearch_func271_0 -> created_ReplicaSearch_func272_0 { assign p = make_ReplicaSearch_func272(pid), arg_cid_var482_c[p] = cid_var480_c; },
    created_ReplicaSearch_func272_0 -> started_ReplicaSearch_func272_0 { sync async_ReplicaSearch_func272[p]!; },
    started_ReplicaSearch_func272_0 -> created_ReplicaSearch_func273_0 { assign p = make_ReplicaSearch_func273(pid), arg_cid_var483_c[p] = cid_var480_c; },
    created_ReplicaSearch_func273_0 -> started_ReplicaSearch_func273_0 { sync async_ReplicaSearch_func273[p]!; },
    started_ReplicaSearch_func273_0 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var484_timeout = res_time_after_0_Chan[p]; },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    awaited_time_after_0 -> select_pass_1_0 { assign chan_counter[cid_var480_c]--, chan_counter[cid_var484_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var480_c] < 0 || chan_counter[cid_var480_c] >= 0; sync receiver_trigger[cid_var480_c]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var480_c]?; assign chan_counter[cid_var484_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var484_timeout] < 0 || chan_counter[cid_var484_timeout] >= 0; sync receiver_trigger[cid_var484_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var484_timeout]?; assign chan_counter[cid_var480_c]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var480_c] < 0 || chan_counter[cid_var480_c] >= 0) && !(chan_buffer[cid_var484_timeout] < 0 || chan_counter[cid_var484_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var480_c]?; assign chan_counter[cid_var484_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var484_timeout]?; assign chan_counter[cid_var480_c]++; },
    select_end_0 -> ending { },
    starting -> started { sync async_ReplicaSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ReplicaSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch[pid]!; };
}

process ReplicaSearch_func271(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var481_c = -1;

void initialize() {
    cid_var481_c = arg_cid_var481_c[pid];
}



state
    starting,
    started,
    ending,
    ended,
    sending_c_0,
    sent_c_0;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var481_c]!; assign chan_counter[cid_var481_c]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var481_c]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func271[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ReplicaSearch_func271[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func271[pid]!; };
}

process ReplicaSearch_func272(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var482_c = -1;

void initialize() {
    cid_var482_c = arg_cid_var482_c[pid];
}



state
    sending_c_0,
    sent_c_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var482_c]!; assign chan_counter[cid_var482_c]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var482_c]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func272[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ReplicaSearch_func272[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func272[pid]!; };
}

process ReplicaSearch_func273(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var483_c = -1;

void initialize() {
    cid_var483_c = arg_cid_var483_c[pid];
}



state
    sending_c_0,
    sent_c_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> sending_c_0 { sync sender_trigger[cid_var483_c]!; assign chan_counter[cid_var483_c]++; },
    sending_c_0 -> sent_c_0 { sync sender_confirm[cid_var483_c]?; },
    sent_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func273[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ReplicaSearch_func273[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func273[pid]!; };
}

process SequentialSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_SequentialSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_SequentialSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_SequentialSearch[pid]!; };
}

process fakeSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int fid_var469 = 261;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_fakeSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fakeSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fakeSearch[pid]!; };
}

process fakeSearch_func261(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    starting,
    started;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_fakeSearch_func261[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fakeSearch_func261[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fakeSearch_func261[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;



state
    created_SequentialSearch_0,
    started_SequentialSearch_0,
    awaited_SequentialSearch_0,
    awaited_ReplicaSearch_0,
    starting,
    started_fakeSearch_0,
    ended,
    created_fakeSearch_0,
    awaited_fakeSearch_0,
    created_ReplicaSearch_0,
    started_ReplicaSearch_0,
    started,
    ending;
init
    starting;
trans
    started -> created_fakeSearch_0 { assign p = make_fakeSearch(); },
    created_fakeSearch_0 -> started_fakeSearch_0 { sync sync_fakeSearch[p]!; },
    started_fakeSearch_0 -> awaited_fakeSearch_0 { sync sync_fakeSearch[p]?; },
    awaited_fakeSearch_0 -> created_SequentialSearch_0 { assign p = make_SequentialSearch(); },
    created_SequentialSearch_0 -> started_SequentialSearch_0 { sync sync_SequentialSearch[p]!; },
    started_SequentialSearch_0 -> awaited_SequentialSearch_0 { sync sync_SequentialSearch[p]?; },
    awaited_SequentialSearch_0 -> created_ReplicaSearch_0 { assign p = make_ReplicaSearch(); },
    created_ReplicaSearch_0 -> started_ReplicaSearch_0 { sync sync_ReplicaSearch[p]!; },
    started_ReplicaSearch_0 -> awaited_ReplicaSearch_0 { sync sync_ReplicaSearch[p]?; },
    awaited_ReplicaSearch_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process time_after(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var476_ch[pid] = -1;
}



state
    starting,
    started,
    ending,
    ended,
    made_ch_0,
    created_time_after_func269_0,
    started_time_after_func269_0;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var476_ch[pid] = make_chan(1); },
    made_ch_0 -> created_time_after_func269_0 { assign p = make_time_after_func269(pid); },
    created_time_after_func269_0 -> started_time_after_func269_0 { sync async_time_after_func269[p]!; },
    started_time_after_func269_0 -> ending { assign res_time_after_0_Chan[pid] = cid_var476_ch[pid]; },
    starting -> started { sync async_time_after[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_time_after[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after[pid]!; };
}

process time_after_func269(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    sending_ch_0,
    sent_ch_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var476_ch[par_pid_time_after_func269[pid]]]!; assign chan_counter[cid_var476_ch[par_pid_time_after_func269[pid]]]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var476_ch[par_pid_time_after_func269[pid]]]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_time_after_func269[pid]?; assign is_sync = false; },
    starting -> started { sync sync_time_after_func269[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after_func269[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
ConcurrentSearchWithCutOff_0 = ConcurrentSearchWithCutOff(0);
ConcurrentSearchWithCutOff_func265_0 = ConcurrentSearchWithCutOff_func265(0);
ConcurrentSearchWithCutOff_func266_0 = ConcurrentSearchWithCutOff_func266(0);
ConcurrentSearchWithCutOff_func267_0 = ConcurrentSearchWithCutOff_func267(0);
ConcurrentSearch_0 = ConcurrentSearch(0);
ConcurrentSearch_func262_0 = ConcurrentSearch_func262(0);
ConcurrentSearch_func263_0 = ConcurrentSearch_func263(0);
ConcurrentSearch_func264_0 = ConcurrentSearch_func264(0);
First_0 = First(0);
First_func270_0 = First_func270(0);
ReplicaSearch_0 = ReplicaSearch(0);
ReplicaSearch_func271_0 = ReplicaSearch_func271(0);
ReplicaSearch_func272_0 = ReplicaSearch_func272(0);
ReplicaSearch_func273_0 = ReplicaSearch_func273(0);
SequentialSearch_0 = SequentialSearch(0);
fakeSearch_0 = fakeSearch(0);
fakeSearch_func261_0 = fakeSearch_func261(0);
time_after_0 = time_after(0);
time_after_func269_0 = time_after_func269(0);
system Channel0, Channel1, ConcurrentSearchWithCutOff_0, ConcurrentSearchWithCutOff_func265_0, ConcurrentSearchWithCutOff_func266_0, ConcurrentSearchWithCutOff_func267_0, ConcurrentSearch_0, ConcurrentSearch_func262_0, ConcurrentSearch_func263_0, ConcurrentSearch_func264_0, First_0, First_func270_0, ReplicaSearch_0, ReplicaSearch_func271_0, ReplicaSearch_func272_0, ReplicaSearch_func273_0, SequentialSearch_0, fakeSearch_0, fakeSearch_func261_0, main, time_after_0, time_after_func269_0;

