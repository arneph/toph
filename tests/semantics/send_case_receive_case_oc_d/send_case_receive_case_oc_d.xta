// Place global declarations here.
int fid_var736_main = 413;
int main_func414_count = 0;
chan async_main_func414[1];
chan sync_main_func414[1];
int par_pid_main_func414[1];

int main_func415_count = 0;
chan async_main_func415[1];
chan sync_main_func415[1];
int par_pid_main_func415[1];

int cid_var737_chA[1];
int cid_var738_chB[1];

int chan_count = 0;
int chan_counter[2];
int chan_buffer[2];
chan sender_trigger[2];
chan sender_confirm[2];
chan receiver_trigger[2];
chan receiver_confirm[2];
chan close[2];

int make_main_func414(int par_pid) {
	int pid = main_func414_count;
	main_func414_count++;
	par_pid_main_func414[pid] = par_pid;
	return pid;
}

int make_main_func415(int par_pid) {
	int pid = main_func415_count;
	main_func415_count++;
	par_pid_main_func415[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 1] i) {
// Place local declarations here.


state
    closed,
    confirming_closed,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    bad,
    idle,
    new_sender;
commit
    confirming_closed,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    new_sender;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var737_chA[pid] = -1;
    cid_var738_chB[pid] = -1;
}



state
    ending,
    ended,
    made_chA_0,
    made_chB_0,
    closed_chB_0,
    starting,
    started,
    created_main_func414_0,
    started_main_func414_0,
    created_main_func415_0,
    started_main_func415_0;
init
    starting;
trans
    started -> made_chA_0 { assign cid_var737_chA[pid] = make_chan(0); },
    made_chA_0 -> made_chB_0 { assign cid_var738_chB[pid] = make_chan(0); },
    made_chB_0 -> closed_chB_0 { sync close[cid_var738_chB[pid]]!; },
    closed_chB_0 -> created_main_func414_0 { assign p = make_main_func414(pid); },
    created_main_func414_0 -> started_main_func414_0 { sync async_main_func414[p]!; },
    started_main_func414_0 -> created_main_func415_0 { assign p = make_main_func415(pid); },
    created_main_func415_0 -> started_main_func415_0 { sync async_main_func415[p]!; },
    started_main_func415_0 -> ending { },
    starting -> started { assign initialize(); },
    ending -> ended { };
}

process main_func414(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    select_pass_2_0,
    select_case_1_trigger_0,
    select_end_0,
    select_case_1_enter_0,
    select_pass_1_0,
    started,
    ending,
    ended;
commit
    select_pass_1_0;
init
    starting;
trans
    select_case_1_enter_0 -> select_end_0 { },
    started -> select_pass_1_0 { assign chan_counter[cid_var737_chA[par_pid_main_func414[pid]]]++; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var737_chA[par_pid_main_func414[pid]]] < 0 || chan_counter[cid_var737_chA[par_pid_main_func414[pid]]] <= chan_buffer[cid_var737_chA[par_pid_main_func414[pid]]]; sync sender_trigger[cid_var737_chA[par_pid_main_func414[pid]]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var737_chA[par_pid_main_func414[pid]]]?; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var737_chA[par_pid_main_func414[pid]]] < 0 || chan_counter[cid_var737_chA[par_pid_main_func414[pid]]] <= chan_buffer[cid_var737_chA[par_pid_main_func414[pid]]]); },
    select_pass_2_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var737_chA[par_pid_main_func414[pid]]]?; },
    select_end_0 -> ending { },
    starting -> started { sync async_main_func414[pid]?; assign is_sync = false; },
    starting -> started { sync sync_main_func414[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_main_func414[pid]!; };
}

process main_func415(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    select_end_0,
    select_case_2_enter_0,
    select_pass_1_0,
    started,
    ended,
    enter_loop_cond_0,
    select_case_1_enter_0,
    select_case_1_trigger_0,
    select_case_2_trigger_0,
    starting,
    exit_loop_cond_0,
    enter_loop_body_0,
    select_default_enter_0,
    exit_loop_body_0,
    exit_loop_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_default_enter_0 -> select_end_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> select_end_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var737_chA[par_pid_main_func415[pid]]]--, chan_counter[cid_var738_chB[par_pid_main_func415[pid]]]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var737_chA[par_pid_main_func415[pid]]] < 0 || chan_counter[cid_var737_chA[par_pid_main_func415[pid]]] >= 0; sync receiver_trigger[cid_var737_chA[par_pid_main_func415[pid]]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var737_chA[par_pid_main_func415[pid]]]?; assign chan_counter[cid_var738_chB[par_pid_main_func415[pid]]]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var738_chB[par_pid_main_func415[pid]]] < 0 || chan_counter[cid_var738_chB[par_pid_main_func415[pid]]] >= 0; sync receiver_trigger[cid_var738_chB[par_pid_main_func415[pid]]]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var738_chB[par_pid_main_func415[pid]]]?; assign chan_counter[cid_var737_chA[par_pid_main_func415[pid]]]++; },
    select_pass_1_0 -> select_default_enter_0 { guard !(chan_buffer[cid_var737_chA[par_pid_main_func415[pid]]] < 0 || chan_counter[cid_var737_chA[par_pid_main_func415[pid]]] >= 0) && !(chan_buffer[cid_var738_chB[par_pid_main_func415[pid]]] < 0 || chan_counter[cid_var738_chB[par_pid_main_func415[pid]]] >= 0); assign chan_counter[cid_var737_chA[par_pid_main_func415[pid]]]++, chan_counter[cid_var738_chB[par_pid_main_func415[pid]]]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_main_func415[pid]?; assign is_sync = false; },
    starting -> started { sync sync_main_func415[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_main_func415[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
main_func414_0 = main_func414(0);
main_func415_0 = main_func415(0);
system Channel0, Channel1, main, main_func414_0, main_func415_0;

