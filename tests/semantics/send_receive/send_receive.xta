// Place global declarations here.
int fid_var494_main = 270;

int main_func271_count = 0;
int cap_cid_var501_chA[1];
chan async_main_func271[1];
chan sync_main_func271[1];
int make_main_func271() {
    int pid = main_func271_count;
    main_func271_count++;
    return pid;
}

int main_func272_count = 0;
int cap_cid_var502_chA[1];
chan async_main_func272[1];
chan sync_main_func272[1];
int make_main_func272() {
    int pid = main_func272_count;
    main_func272_count++;
    return pid;
}

int chan_count = 0;
int chan_counter[10];
int chan_buffer[10];
chan sender_trigger[10];
chan sender_confirm[10];
chan receiver_trigger[10];
chan receiver_confirm[10];
chan close[10];

int make_chan(int buffer) {
    int cid = chan_count;
    chan_count++;
    chan_counter[cid] = 0;
    chan_buffer[cid] = buffer;
    return cid;
}


process Channel(int[0, 9] i) {
// Place local declarations here.

state
    new_sender,
    confirming_a,
    new_receiver,
    closed,
    bad,
    idle,
    confirming_b,
    closing,
    confirming_closed;
commit
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; assign chan_counter[i] = 1; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var499_chA = -1;
int cid_var500_chB = -1;

state
    starting,
    started,
    started_main_func271_0,
    started_main_func272_0,
    ending,
    ended,
    made_cid_var499_chA_0,
    made_cid_var500_chB_0,
    closed_cid_var500_chB_0,
    created_main_func271_0,
    created_main_func272_0;
init
    starting;
trans
    started -> made_cid_var499_chA_0 { assign cid_var499_chA = make_chan(0); },
    made_cid_var499_chA_0 -> made_cid_var500_chB_0 { assign cid_var500_chB = make_chan(0); },
    made_cid_var500_chB_0 -> closed_cid_var500_chB_0 { sync close[cid_var500_chB]!; },
    closed_cid_var500_chB_0 -> created_main_func271_0 { assign p = make_main_func271(), cap_cid_var501_chA[p] = cid_var499_chA; },
    created_main_func271_0 -> started_main_func271_0 { sync async_main_func271[p]!; },
    started_main_func271_0 -> created_main_func272_0 { assign p = make_main_func272(), cap_cid_var502_chA[p] = cid_var499_chA; },
    created_main_func272_0 -> started_main_func272_0 { sync async_main_func272[p]!; },
    started_main_func272_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process main_func271(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var501_chA = -1;
void initialize() {
    cid_var501_chA = cap_cid_var501_chA[pid];
}

state
    sending_cid_var501_chA_0,
    sent_cid_var501_chA_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> sending_cid_var501_chA_0 { sync sender_trigger[cid_var501_chA]!; assign chan_counter[cid_var501_chA]++; },
    sending_cid_var501_chA_0 -> sent_cid_var501_chA_0 { sync sender_confirm[cid_var501_chA]?; },
    sent_cid_var501_chA_0 -> ending { },
    starting -> started { sync async_main_func271[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_main_func271[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_main_func271[pid]!; };
}

process main_func272(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var502_chA = -1;
void initialize() {
    cid_var502_chA = cap_cid_var502_chA[pid];
}

state
    starting,
    started,
    ending,
    ended,
    receiving_cid_var502_chA_0,
    received_cid_var502_chA_0;
init
    starting;
trans
    started -> receiving_cid_var502_chA_0 { sync receiver_trigger[cid_var502_chA]!; assign chan_counter[cid_var502_chA]--; },
    receiving_cid_var502_chA_0 -> received_cid_var502_chA_0 { sync receiver_confirm[cid_var502_chA]?; },
    received_cid_var502_chA_0 -> ending { },
    starting -> started { sync async_main_func272[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_main_func272[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_main_func272[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
Channel5 = Channel(5);
Channel6 = Channel(6);
Channel7 = Channel(7);
Channel8 = Channel(8);
Channel9 = Channel(9);
main_func2710 = main_func271(0);
main_func2720 = main_func272(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, Channel5, Channel6, Channel7, Channel8, Channel9, main, main_func2710, main_func2720;

