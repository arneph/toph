// Place global declarations here.
int fid_var140_main = 72;

int func73_count = 0;
int cap_cid_var143_chA[1];
chan async_func73[1];
chan sync_func73[1];
int make_func73() {
    int pid = func73_count;
    func73_count++;
    return pid;
}

int func74_count = 0;
int cap_cid_var144_chA[1];
chan async_func74[1];
chan sync_func74[1];
int make_func74() {
    int pid = func74_count;
    func74_count++;
    return pid;
}

int chan_count = 0;
int chan_counter[10];
int chan_buffer[10];
chan sender_alpha[10];
chan sender_omega[10];
chan receiver_alpha[10];
chan receiver_omega[10];
chan close[10];

int make_chan(int buffer) {
    int cid = chan_count;
    chan_count++;
    chan_counter[cid] = 0;
    chan_buffer[cid] = buffer;
    return cid;
}


process main() {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var141_chA = -1;
int cid_var142_chB = -1;

state
    made_cid_var142_chB_0,
    closed_cid_var142_chB_0,
    started_func73_0,
    created_func74_0,
    started,
    ending,
    ended,
    made_cid_var141_chA_0,
    created_func73_0,
    started_func74_0,
    starting;
init
    starting;
trans
    started -> made_cid_var141_chA_0 { assign cid_var141_chA = make_chan(0); },
    made_cid_var141_chA_0 -> made_cid_var142_chB_0 { assign cid_var142_chB = make_chan(0); },
    made_cid_var142_chB_0 -> closed_cid_var142_chB_0 { sync close[cid_var142_chB]!; },
    closed_cid_var142_chB_0 -> created_func73_0 { assign p = make_func73(), cap_cid_var143_chA[p] = cid_var141_chA; },
    created_func73_0 -> started_func73_0 { sync async_func73[p]!; },
    started_func73_0 -> created_func74_0 { assign p = make_func74(), cap_cid_var144_chA[p] = cid_var141_chA; },
    created_func74_0 -> started_func74_0 { sync async_func74[p]!; },
    started_func74_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process func73(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var143_chA = -1;
void initialize() {
    cid_var143_chA = cap_cid_var143_chA[pid];
}

state
    ending,
    ended,
    sending_cid_var143_chA_0,
    sent_cid_var143_chA_0,
    starting,
    started;
init
    starting;
trans
    started -> sending_cid_var143_chA_0 { sync sender_alpha[cid_var143_chA]!; },
    sending_cid_var143_chA_0 -> sent_cid_var143_chA_0 { sync sender_omega[cid_var143_chA]?; },
    sent_cid_var143_chA_0 -> ending { },
    starting -> started { sync async_func73[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func73[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func73[pid]!; };
}

process func74(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var144_chA = -1;
void initialize() {
    cid_var144_chA = cap_cid_var144_chA[pid];
}

state
    started,
    ending,
    ended,
    receiving_cid_var144_chA_0,
    received_cid_var144_chA_0,
    starting;
init
    starting;
trans
    started -> receiving_cid_var144_chA_0 { sync receiver_alpha[cid_var144_chA]!; },
    receiving_cid_var144_chA_0 -> received_cid_var144_chA_0 { sync receiver_omega[cid_var144_chA]?; },
    received_cid_var144_chA_0 -> ending { },
    starting -> started { sync async_func74[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func74[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func74[pid]!; };
}

process Channel(int[0, 9] i) {
// Place local declarations here.

state
    idle,
    confirming_b,
    confirming_closing,
    closed,
    confirming_closed,
    new_sender,
    confirming_a,
    new_receiver,
    closing,
    bad;
commit
    confirming_b,
    confirming_closing,
    confirming_closed,
    new_sender,
    confirming_a,
    new_receiver,
    closing;
init
    idle;
trans
    idle -> new_sender { sync sender_alpha[i]?; assign chan_counter[i]++; },
    new_sender -> idle { guard chan_counter[i] > chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= chan_buffer[i]; sync sender_omega[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_omega[i]!; },
    idle -> new_receiver { sync receiver_alpha[i]?; assign chan_counter[i]--; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_omega[i]!; },
    confirming_b -> idle { guard chan_counter[i] < chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= chan_buffer[i]; sync sender_omega[i]!; },
    idle -> confirming_closing { guard chan_counter[i] < 0; sync close[i]?; },
    confirming_closing -> confirming_closing { guard chan_counter[i] < 0; sync receiver_omega[i]!; assign chan_counter[i]++; },
    confirming_closing -> closing { guard chan_counter[i] == 0; },
    idle -> closing { guard 0 <= chan_counter[i] && chan_counter[i] <= chan_buffer[i]; sync close[i]?; },
    idle -> bad { guard chan_counter[i] > chan_buffer[i]; sync close[i]?; },
    closing -> closed { assign chan_counter[i] = 1,
chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_alpha[i]?; },
    confirming_closed -> closed { sync receiver_omega[i]!; },
    closed -> bad { sync sender_alpha[i]?; },
    closed -> bad { sync close[i]?; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
Channel5 = Channel(5);
Channel6 = Channel(6);
Channel7 = Channel(7);
Channel8 = Channel(8);
Channel9 = Channel(9);
func730 = func73(0);
func740 = func74(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, Channel5, Channel6, Channel7, Channel8, Channel9, func730, func740, main;

