// Place global declarations here.
int fid_var47_main = 23;
int fid_var48_flip = 24;
int fid_var49_tx = 25;
int fid_var52_rx = 26;
int flip_count = 0;
chan async_flip[9];
chan sync_flip[9];

int tx_count = 0;
chan async_tx[1];
chan sync_tx[1];
int arg_cid_var51_ack[1];
int arg_cid_var50_snd[1];

int rx_count = 0;
chan async_rx[1];
chan sync_rx[1];
int arg_cid_var53_reply[1];
int arg_cid_var54_trans[1];

int time_after_count = 0;
chan async_time_after[18];
chan sync_time_after[18];
int res_time_after_0_Chan[18];

int time_after_func28_count = 0;
chan async_time_after_func28[18];
chan sync_time_after_func28[18];
int par_pid_time_after_func28[18];

int cid_var57_ch[18];

int chan_count = 0;
int chan_counter[20];
int chan_buffer[20];
chan sender_trigger[20];
chan sender_confirm[20];
chan receiver_trigger[20];
chan receiver_confirm[20];
chan close[20];

int make_flip() {
	int pid = flip_count;
	flip_count++;
	return pid;
}

int make_tx() {
	int pid = tx_count;
	tx_count++;
	return pid;
}

int make_rx() {
	int pid = rx_count;
	rx_count++;
	return pid;
}

int make_time_after() {
	int pid = time_after_count;
	time_after_count++;
	return pid;
}

int make_time_after_func28(int par_pid) {
	int pid = time_after_func28_count;
	time_after_func28_count++;
	par_pid_time_after_func28[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 19] i) {
// Place local declarations here.


state
    new_sender,
    closed,
    bad,
    idle,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    confirming_closed;
commit
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    confirming_closed,
    new_sender;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process flip(int[0, 8] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_flip[pid]?; assign is_sync = false; },
    starting -> started { sync sync_flip[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_flip[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var55_trans = -1;
int cid_var56_ack = -1;



state
    started,
    created_tx_0,
    started_tx_0,
    created_rx_0,
    started_rx_0,
    starting,
    ending,
    ended,
    made_trans_0,
    made_ack_0,
    awaited_rx_0;
init
    starting;
trans
    started -> made_trans_0 { assign cid_var55_trans = make_chan(1); },
    made_trans_0 -> made_ack_0 { assign cid_var56_ack = make_chan(1); },
    made_ack_0 -> created_tx_0 { assign p = make_tx(), arg_cid_var50_snd[p] = cid_var55_trans, arg_cid_var51_ack[p] = cid_var56_ack; },
    created_tx_0 -> started_tx_0 { sync async_tx[p]!; },
    started_tx_0 -> created_rx_0 { assign p = make_rx(), arg_cid_var53_reply[p] = cid_var56_ack, arg_cid_var54_trans[p] = cid_var55_trans; },
    created_rx_0 -> started_rx_0 { sync sync_rx[p]!; },
    started_rx_0 -> awaited_rx_0 { sync sync_rx[p]?; },
    awaited_rx_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process rx(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var53_reply = -1;
int cid_var54_trans = -1;

int cid_var59 = -1;

int i1 = 0;
int i0 = 0;
void initialize() {
    cid_var54_trans = arg_cid_var54_trans[pid];
    cid_var53_reply = arg_cid_var53_reply[pid];
}



state
    select_pass_1_0,
    ended,
    exit_loop_cond_0,
    created_time_after_0,
    select_end_0,
    enter_loop_body_0,
    exit_loop_body_0,
    sending_reply_0,
    sent_reply_0,
    sending_reply_1,
    select_case_2_trigger_0,
    starting,
    ending,
    enter_if_0,
    exit_loop_body_1,
    awaited_time_after_0,
    exit_loop_1,
    enter_else_0,
    exit_loop_0,
    exit_loop_cond_1,
    exit_if_0,
    enter_loop_body_1,
    select_pass_2_0,
    enter_loop_cond_1,
    select_case_2_enter_0,
    started_time_after_0,
    select_case_1_enter_0,
    sent_reply_1,
    select_case_1_trigger_0,
    started,
    enter_loop_cond_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_reply_0 { sync sender_trigger[cid_var53_reply]!; assign chan_counter[cid_var53_reply]++; },
    sending_reply_0 -> sent_reply_0 { sync sender_confirm[cid_var53_reply]?; },
    enter_loop_cond_1 -> exit_loop_cond_1 { },
    enter_loop_body_1 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var59 = res_time_after_0_Chan[p]; },
    enter_if_0 -> exit_loop_1 { },
    enter_else_0 -> exit_if_0 { },
    select_case_1_enter_0 -> enter_if_0 { },
    select_case_1_enter_0 -> enter_else_0 { },
    exit_if_0 -> select_end_0 { },
    select_case_2_enter_0 -> sending_reply_1 { sync sender_trigger[cid_var53_reply]!; assign chan_counter[cid_var53_reply]++; },
    sending_reply_1 -> sent_reply_1 { sync sender_confirm[cid_var53_reply]?; },
    sent_reply_1 -> select_end_0 { },
    awaited_time_after_0 -> select_pass_1_0 { assign chan_counter[cid_var54_trans]--, chan_counter[cid_var59]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var54_trans] < 0 || chan_counter[cid_var54_trans] >= 0; sync receiver_trigger[cid_var54_trans]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var54_trans]?; assign chan_counter[cid_var59]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var59] < 0 || chan_counter[cid_var59] >= 0; sync receiver_trigger[cid_var59]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var59]?; assign chan_counter[cid_var54_trans]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var54_trans] < 0 || chan_counter[cid_var54_trans] >= 0) && !(chan_buffer[cid_var59] < 0 || chan_counter[cid_var59] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var54_trans]?; assign chan_counter[cid_var59]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var59]?; assign chan_counter[cid_var54_trans]++; },
    select_end_0 -> exit_loop_body_1 { },
    sent_reply_0 -> enter_loop_cond_1 { assign i1 = 0; },
    exit_loop_cond_1 -> enter_loop_body_1 { guard i1 < 3; },
    exit_loop_body_1 -> enter_loop_cond_1 { assign i1++; },
    exit_loop_1 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> ending { },
    starting -> started { sync async_rx[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_rx[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_rx[pid]!; };
}

process time_after(int[0, 17] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var57_ch[pid] = -1;
}



state
    created_time_after_func28_0,
    started_time_after_func28_0,
    starting,
    started,
    ending,
    ended,
    made_ch_0;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var57_ch[pid] = make_chan(1); },
    made_ch_0 -> created_time_after_func28_0 { assign p = make_time_after_func28(pid); },
    created_time_after_func28_0 -> started_time_after_func28_0 { sync async_time_after_func28[p]!; },
    started_time_after_func28_0 -> ending { assign res_time_after_0_Chan[pid] = cid_var57_ch[pid]; },
    starting -> started { sync async_time_after[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_time_after[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after[pid]!; };
}

process time_after_func28(int[0, 17] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    sending_ch_0,
    sent_ch_0;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var57_ch[par_pid_time_after_func28[pid]]]!; assign chan_counter[cid_var57_ch[par_pid_time_after_func28[pid]]]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var57_ch[par_pid_time_after_func28[pid]]]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_time_after_func28[pid]?; assign is_sync = false; },
    starting -> started { sync sync_time_after_func28[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after_func28[pid]!; };
}

process tx(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var50_snd = -1;
int cid_var51_ack = -1;

int cid_var58 = -1;

int i1 = 0;
int i0 = 0;
void initialize() {
    cid_var51_ack = arg_cid_var51_ack[pid];
    cid_var50_snd = arg_cid_var50_snd[pid];
}



state
    ending,
    enter_loop_body_1,
    awaited_flip_0,
    created_flip_1,
    select_pass_1_0,
    ended,
    exit_loop_body_0,
    select_case_1_enter_0,
    select_case_2_enter_0,
    exit_loop_cond_1,
    exit_loop_body_1,
    exit_loop_1,
    created_flip_0,
    awaited_flip_1,
    sending_snd_1,
    select_case_2_trigger_0,
    enter_loop_cond_0,
    sent_snd_0,
    created_time_after_0,
    started_time_after_0,
    awaited_time_after_0,
    exit_loop_0,
    sending_snd_0,
    select_end_0,
    exit_if_0,
    select_case_1_trigger_0,
    enter_loop_body_0,
    enter_loop_cond_1,
    select_pass_2_0,
    enter_if_0,
    started_flip_0,
    starting,
    started_flip_1,
    sent_snd_1,
    started,
    exit_loop_cond_0,
    enter_else_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_snd_0 { sync sender_trigger[cid_var50_snd]!; assign chan_counter[cid_var50_snd]++; },
    sending_snd_0 -> sent_snd_0 { sync sender_confirm[cid_var50_snd]?; },
    enter_loop_cond_1 -> exit_loop_cond_1 { },
    enter_loop_body_1 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var58 = res_time_after_0_Chan[p]; },
    enter_if_0 -> created_flip_0 { assign p = make_flip(); },
    created_flip_0 -> started_flip_0 { sync sync_flip[p]!; },
    started_flip_0 -> awaited_flip_0 { sync sync_flip[p]?; },
    awaited_flip_0 -> exit_loop_1 { },
    enter_else_0 -> created_flip_1 { assign p = make_flip(); },
    created_flip_1 -> started_flip_1 { sync sync_flip[p]!; },
    started_flip_1 -> awaited_flip_1 { sync sync_flip[p]?; },
    awaited_flip_1 -> exit_if_0 { },
    select_case_1_enter_0 -> enter_if_0 { },
    select_case_1_enter_0 -> enter_else_0 { },
    exit_if_0 -> select_end_0 { },
    select_case_2_enter_0 -> sending_snd_1 { sync sender_trigger[cid_var50_snd]!; assign chan_counter[cid_var50_snd]++; },
    sending_snd_1 -> sent_snd_1 { sync sender_confirm[cid_var50_snd]?; },
    sent_snd_1 -> select_end_0 { },
    awaited_time_after_0 -> select_pass_1_0 { assign chan_counter[cid_var51_ack]--, chan_counter[cid_var58]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var51_ack] < 0 || chan_counter[cid_var51_ack] >= 0; sync receiver_trigger[cid_var51_ack]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var51_ack]?; assign chan_counter[cid_var58]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var58] < 0 || chan_counter[cid_var58] >= 0; sync receiver_trigger[cid_var58]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var58]?; assign chan_counter[cid_var51_ack]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var51_ack] < 0 || chan_counter[cid_var51_ack] >= 0) && !(chan_buffer[cid_var58] < 0 || chan_counter[cid_var58] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var51_ack]?; assign chan_counter[cid_var58]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var58]?; assign chan_counter[cid_var51_ack]++; },
    select_end_0 -> exit_loop_body_1 { },
    sent_snd_0 -> enter_loop_cond_1 { assign i1 = 0; },
    exit_loop_cond_1 -> enter_loop_body_1 { guard i1 < 3; },
    exit_loop_body_1 -> enter_loop_cond_1 { assign i1++; },
    exit_loop_1 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> ending { },
    starting -> started { sync async_tx[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_tx[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_tx[pid]!; };
}

Channel00 = Channel(0);
Channel01 = Channel(1);
Channel02 = Channel(2);
Channel03 = Channel(3);
Channel04 = Channel(4);
Channel05 = Channel(5);
Channel06 = Channel(6);
Channel07 = Channel(7);
Channel08 = Channel(8);
Channel09 = Channel(9);
Channel10 = Channel(10);
Channel11 = Channel(11);
Channel12 = Channel(12);
Channel13 = Channel(13);
Channel14 = Channel(14);
Channel15 = Channel(15);
Channel16 = Channel(16);
Channel17 = Channel(17);
Channel18 = Channel(18);
Channel19 = Channel(19);
flip_0 = flip(0);
flip_1 = flip(1);
flip_2 = flip(2);
flip_3 = flip(3);
flip_4 = flip(4);
flip_5 = flip(5);
flip_6 = flip(6);
flip_7 = flip(7);
flip_8 = flip(8);
rx_0 = rx(0);
time_after_00 = time_after(0);
time_after_01 = time_after(1);
time_after_02 = time_after(2);
time_after_03 = time_after(3);
time_after_04 = time_after(4);
time_after_05 = time_after(5);
time_after_06 = time_after(6);
time_after_07 = time_after(7);
time_after_08 = time_after(8);
time_after_09 = time_after(9);
time_after_10 = time_after(10);
time_after_11 = time_after(11);
time_after_12 = time_after(12);
time_after_13 = time_after(13);
time_after_14 = time_after(14);
time_after_15 = time_after(15);
time_after_16 = time_after(16);
time_after_17 = time_after(17);
time_after_func28_00 = time_after_func28(0);
time_after_func28_01 = time_after_func28(1);
time_after_func28_02 = time_after_func28(2);
time_after_func28_03 = time_after_func28(3);
time_after_func28_04 = time_after_func28(4);
time_after_func28_05 = time_after_func28(5);
time_after_func28_06 = time_after_func28(6);
time_after_func28_07 = time_after_func28(7);
time_after_func28_08 = time_after_func28(8);
time_after_func28_09 = time_after_func28(9);
time_after_func28_10 = time_after_func28(10);
time_after_func28_11 = time_after_func28(11);
time_after_func28_12 = time_after_func28(12);
time_after_func28_13 = time_after_func28(13);
time_after_func28_14 = time_after_func28(14);
time_after_func28_15 = time_after_func28(15);
time_after_func28_16 = time_after_func28(16);
time_after_func28_17 = time_after_func28(17);
tx_0 = tx(0);
system Channel00, Channel01, Channel02, Channel03, Channel04, Channel05, Channel06, Channel07, Channel08, Channel09, Channel10, Channel11, Channel12, Channel13, Channel14, Channel15, Channel16, Channel17, Channel18, Channel19, flip_0, flip_1, flip_2, flip_3, flip_4, flip_5, flip_6, flip_7, flip_8, main, rx_0, time_after_00, time_after_01, time_after_02, time_after_03, time_after_04, time_after_05, time_after_06, time_after_07, time_after_08, time_after_09, time_after_10, time_after_11, time_after_12, time_after_13, time_after_14, time_after_15, time_after_16, time_after_17, time_after_func28_00, time_after_func28_01, time_after_func28_02, time_after_func28_03, time_after_func28_04, time_after_func28_05, time_after_func28_06, time_after_func28_07, time_after_func28_08, time_after_func28_09, time_after_func28_10, time_after_func28_11, time_after_func28_12, time_after_func28_13, time_after_func28_14, time_after_func28_15, time_after_func28_16, time_after_func28_17, tx_0;

