// Place global declarations here.
int fid_var60_S = 30;
int fid_var63_R = 31;
int fid_var66_main = 29;
int S_count = 0;
chan async_S[3];
chan sync_S[3];
int arg_cid_var61_ch[3];
int arg_cid_var62_done[3];

int R_count = 0;
chan async_R[3];
chan sync_R[3];
int arg_cid_var65_done[3];
int arg_cid_var64_ch[3];

int chan_count = 0;
int chan_counter[4];
int chan_buffer[4];
chan sender_trigger[4];
chan sender_confirm[4];
chan receiver_trigger[4];
chan receiver_confirm[4];
chan close[4];

int make_S() {
	int pid = S_count;
	S_count++;
	return pid;
}

int make_R() {
	int pid = R_count;
	R_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 3] i) {
// Place local declarations here.


state
    confirming_a,
    new_receiver,
    closed,
    confirming_closed,
    bad,
    idle,
    new_sender,
    confirming_b,
    closing;
commit
    new_sender,
    confirming_b,
    closing,
    confirming_closed,
    confirming_a,
    new_receiver;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process R(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var64_ch = -1;
int cid_var65_done = -1;

void initialize() {
    cid_var65_done = arg_cid_var65_done[pid];
    cid_var64_ch = arg_cid_var64_ch[pid];
}



state
    ending,
    ended,
    receiving_ch_0,
    received_ch_0,
    sending_done_0,
    sent_done_0,
    starting,
    started;
init
    starting;
trans
    started -> receiving_ch_0 { sync receiver_trigger[cid_var64_ch]!; assign chan_counter[cid_var64_ch]--; },
    receiving_ch_0 -> received_ch_0 { sync receiver_confirm[cid_var64_ch]?; },
    received_ch_0 -> sending_done_0 { sync sender_trigger[cid_var65_done]!; assign chan_counter[cid_var65_done]++; },
    sending_done_0 -> sent_done_0 { sync sender_confirm[cid_var65_done]?; },
    sent_done_0 -> ending { },
    starting -> started { sync async_R[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_R[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_R[pid]!; };
}

process S(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var61_ch = -1;
int cid_var62_done = -1;

void initialize() {
    cid_var61_ch = arg_cid_var61_ch[pid];
    cid_var62_done = arg_cid_var62_done[pid];
}



state
    sending_done_0,
    sent_done_0,
    starting,
    started,
    ending,
    ended,
    sending_ch_0,
    sent_ch_0;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var61_ch]!; assign chan_counter[cid_var61_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var61_ch]?; },
    sent_ch_0 -> sending_done_0 { sync sender_trigger[cid_var62_done]!; assign chan_counter[cid_var62_done]++; },
    sending_done_0 -> sent_done_0 { sync sender_confirm[cid_var62_done]?; },
    sent_done_0 -> ending { },
    starting -> started { sync async_S[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_S[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_S[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var67_done = -1;

int cid_var68_ch = -1;

int i0 = 0;


state
    exit_loop_0,
    exit_if_0,
    created_R_0,
    starting,
    started,
    made_done_0,
    exit_loop_body_0,
    created_S_0,
    enter_else_0,
    started_R_0,
    ending,
    ended,
    enter_loop_body_0,
    made_ch_0,
    started_S_0,
    receiving_done_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_if_0,
    received_done_0;
init
    starting;
trans
    started -> made_done_0 { assign cid_var67_done = make_chan(0); },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> made_ch_0 { assign cid_var68_ch = make_chan(0); },
    enter_if_0 -> created_S_0 { assign p = make_S(), arg_cid_var61_ch[p] = cid_var68_ch, arg_cid_var62_done[p] = cid_var67_done; },
    created_S_0 -> started_S_0 { sync async_S[p]!; },
    started_S_0 -> exit_if_0 { },
    enter_else_0 -> created_R_0 { assign p = make_R(), arg_cid_var64_ch[p] = cid_var68_ch, arg_cid_var65_done[p] = cid_var67_done; },
    created_R_0 -> started_R_0 { sync async_R[p]!; },
    started_R_0 -> exit_if_0 { },
    made_ch_0 -> enter_if_0 { },
    made_ch_0 -> enter_else_0 { },
    exit_if_0 -> exit_loop_body_0 { },
    made_done_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> receiving_done_0 { sync receiver_trigger[cid_var67_done]!; assign chan_counter[cid_var67_done]--; },
    receiving_done_0 -> received_done_0 { sync receiver_confirm[cid_var67_done]?; },
    received_done_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
R_0 = R(0);
R_1 = R(1);
R_2 = R(2);
S_0 = S(0);
S_1 = S(1);
S_2 = S(2);
system Channel0, Channel1, Channel2, Channel3, R_0, R_1, R_2, S_0, S_1, S_2, main;

