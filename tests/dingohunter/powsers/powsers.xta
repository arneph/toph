// Place global declarations here.
int fid_var279_pr = 131;
int fid_var280_eq = 132;
int fid_var281_mkdch = 133;
int fid_var282_mkdch2 = 134;
int fid_var283_dosplit = 135;
int fid_var285_split = 136;
int fid_var286_put = 137;
int fid_var287_get = 138;
int fid_var288_getn = 139;
int fid_var289_get2 = 140;
int fid_var290_copy = 141;
int fid_var291_repeat = 142;
int fid_var292_mkPS = 143;
int fid_var293_mkPS2 = 144;
int fid_var294_gcd = 145;
int fid_var295_i2tor = 146;
int fid_var296_itor = 147;
int fid_var297_end = 148;
int fid_var298_add = 149;
int fid_var299_mul = 150;
int fid_var300_neg = 151;
int fid_var301_sub = 152;
int fid_var302_inv = 153;
int fid_var303_evaln = 154;
int fid_var304_printn = 155;
int fid_var305_eval = 156;
int fid_var306_Split = 157;
int fid_var307_Add = 158;
int fid_var308_Cmul = 159;
int fid_var309_Sub = 160;
int fid_var310_Monmul = 161;
int fid_var311_Xmul = 162;
int fid_var312_Rep = 163;
int fid_var313_Mon = 164;
int fid_var314_Shift = 165;
int fid_var315_Mul = 166;
int fid_var316_Diff = 167;
int fid_var317_Integ = 168;
int fid_var318_Binom = 169;
int fid_var319_Recip = 170;
int fid_var320_Exp = 171;
int fid_var321_Subst = 172;
int fid_var322_MonSubst = 173;
int fid_var323_Init = 174;
int fid_var324_check = 175;
int fid_var325_checka = 176;
int fid_var326_main = 130;
int pr_count = 0;
chan async_pr[1];
chan sync_pr[1];

int eq_count = 0;
chan async_eq[1];
chan sync_eq[1];

int mkdch_count = 0;
chan async_mkdch[20];
chan sync_mkdch[20];

int mkdch2_count = 0;
chan async_mkdch2[20];
chan sync_mkdch2[20];

int dosplit_count = 0;
chan async_dosplit[20];
chan sync_dosplit[20];
int arg_cid_var284_wait[20];

int split_count = 0;
chan async_split[20];
chan sync_split[20];

int put_count = 0;
chan async_put[20];
chan sync_put[20];

int get_count = 0;
chan async_get[20];
chan sync_get[20];

int getn_count = 0;
chan async_getn[20];
chan sync_getn[20];

int get2_count = 0;
chan async_get2[20];
chan sync_get2[20];

int copy_count = 0;
chan async_copy[1];
chan sync_copy[1];

int repeat_count = 0;
chan async_repeat[2];
chan sync_repeat[2];

int mkPS_count = 0;
chan async_mkPS[20];
chan sync_mkPS[20];

int mkPS2_count = 0;
chan async_mkPS2[1];
chan sync_mkPS2[1];

int gcd_count = 0;
chan async_gcd[20];
chan sync_gcd[20];

int i2tor_count = 0;
chan async_i2tor[20];
chan sync_i2tor[20];

int itor_count = 0;
chan async_itor[20];
chan sync_itor[20];

int end_count = 0;
chan async_end[20];
chan sync_end[20];

int add_count = 0;
chan async_add[20];
chan sync_add[20];

int mul_count = 0;
chan async_mul[20];
chan sync_mul[20];

int neg_count = 0;
chan async_neg[4];
chan sync_neg[4];

int sub_count = 0;
chan async_sub[1];
chan sync_sub[1];

int inv_count = 0;
chan async_inv[1];
chan sync_inv[1];

int evaln_count = 0;
chan async_evaln[1];
chan sync_evaln[1];

int printn_count = 0;
chan async_printn[11];
chan sync_printn[11];

int eval_count = 0;
chan async_eval[20];
chan sync_eval[20];

int Split_count = 0;
chan async_Split[20];
chan sync_Split[20];

int Add_count = 0;
chan async_Add[20];
chan sync_Add[20];

int Cmul_count = 0;
chan async_Cmul[20];
chan sync_Cmul[20];

int Sub_count = 0;
chan async_Sub[1];
chan sync_Sub[1];

int Monmul_count = 0;
chan async_Monmul[1];
chan sync_Monmul[1];

int Xmul_count = 0;
chan async_Xmul[1];
chan sync_Xmul[1];

int Rep_count = 0;
chan async_Rep[2];
chan sync_Rep[2];

int Mon_count = 0;
chan async_Mon[1];
chan sync_Mon[1];

int Shift_count = 0;
chan async_Shift[1];
chan sync_Shift[1];

int Mul_count = 0;
chan async_Mul[20];
chan sync_Mul[20];

int Diff_count = 0;
chan async_Diff[2];
chan sync_Diff[2];

int Integ_count = 0;
chan async_Integ[3];
chan sync_Integ[3];

int Binom_count = 0;
chan async_Binom[1];
chan sync_Binom[1];

int Recip_count = 0;
chan async_Recip[1];
chan sync_Recip[1];

int Exp_count = 0;
chan async_Exp[1];
chan sync_Exp[1];

int Subst_count = 0;
chan async_Subst[20];
chan sync_Subst[20];

int MonSubst_count = 0;
chan async_MonSubst[2];
chan sync_MonSubst[2];

int Init_count = 0;
chan async_Init[1];
chan sync_Init[1];

int check_count = 0;
chan async_check[20];
chan sync_check[20];

int checka_count = 0;
chan async_checka[5];
chan sync_checka[5];

int Add_func177_count = 0;
chan async_Add_func177[20];
chan sync_Add_func177[20];
int par_pid_Add_func177[20];

int Cmul_func178_count = 0;
chan async_Cmul_func178[20];
chan sync_Cmul_func178[20];
int par_pid_Cmul_func178[20];

int Monmul_func179_count = 0;
chan async_Monmul_func179[1];
chan sync_Monmul_func179[1];
int par_pid_Monmul_func179[1];

int Mon_func180_count = 0;
chan async_Mon_func180[1];
chan sync_Mon_func180[1];
int par_pid_Mon_func180[1];

int Shift_func181_count = 0;
chan async_Shift_func181[1];
chan sync_Shift_func181[1];
int par_pid_Shift_func181[1];

int Mul_func182_count = 0;
chan async_Mul_func182[20];
chan sync_Mul_func182[20];
int par_pid_Mul_func182[20];

int Diff_func183_count = 0;
chan async_Diff_func183[2];
chan sync_Diff_func183[2];
int par_pid_Diff_func183[2];

int Integ_func184_count = 0;
chan async_Integ_func184[3];
chan sync_Integ_func184[3];
int par_pid_Integ_func184[3];

int Binom_func185_count = 0;
chan async_Binom_func185[1];
chan sync_Binom_func185[1];
int par_pid_Binom_func185[1];

int Recip_func186_count = 0;
chan async_Recip_func186[1];
chan sync_Recip_func186[1];
int par_pid_Recip_func186[1];

int Subst_func187_count = 0;
chan async_Subst_func187[20];
chan sync_Subst_func187[20];
int par_pid_Subst_func187[20];

int MonSubst_func188_count = 0;
chan async_MonSubst_func188[2];
chan sync_MonSubst_func188[2];
int par_pid_MonSubst_func188[2];

int chan_count = 0;
int chan_counter[20];
int chan_buffer[20];
chan sender_trigger[20];
chan sender_confirm[20];
chan receiver_trigger[20];
chan receiver_confirm[20];
chan close[20];

int make_pr() {
	int pid = pr_count;
	pr_count++;
	return pid;
}

int make_eq() {
	int pid = eq_count;
	eq_count++;
	return pid;
}

int make_mkdch() {
	int pid = mkdch_count;
	mkdch_count++;
	return pid;
}

int make_mkdch2() {
	int pid = mkdch2_count;
	mkdch2_count++;
	return pid;
}

int make_dosplit() {
	int pid = dosplit_count;
	dosplit_count++;
	return pid;
}

int make_split() {
	int pid = split_count;
	split_count++;
	return pid;
}

int make_put() {
	int pid = put_count;
	put_count++;
	return pid;
}

int make_get() {
	int pid = get_count;
	get_count++;
	return pid;
}

int make_getn() {
	int pid = getn_count;
	getn_count++;
	return pid;
}

int make_get2() {
	int pid = get2_count;
	get2_count++;
	return pid;
}

int make_copy() {
	int pid = copy_count;
	copy_count++;
	return pid;
}

int make_repeat() {
	int pid = repeat_count;
	repeat_count++;
	return pid;
}

int make_mkPS() {
	int pid = mkPS_count;
	mkPS_count++;
	return pid;
}

int make_mkPS2() {
	int pid = mkPS2_count;
	mkPS2_count++;
	return pid;
}

int make_gcd() {
	int pid = gcd_count;
	gcd_count++;
	return pid;
}

int make_i2tor() {
	int pid = i2tor_count;
	i2tor_count++;
	return pid;
}

int make_itor() {
	int pid = itor_count;
	itor_count++;
	return pid;
}

int make_end() {
	int pid = end_count;
	end_count++;
	return pid;
}

int make_add() {
	int pid = add_count;
	add_count++;
	return pid;
}

int make_mul() {
	int pid = mul_count;
	mul_count++;
	return pid;
}

int make_neg() {
	int pid = neg_count;
	neg_count++;
	return pid;
}

int make_sub() {
	int pid = sub_count;
	sub_count++;
	return pid;
}

int make_inv() {
	int pid = inv_count;
	inv_count++;
	return pid;
}

int make_evaln() {
	int pid = evaln_count;
	evaln_count++;
	return pid;
}

int make_printn() {
	int pid = printn_count;
	printn_count++;
	return pid;
}

int make_eval() {
	int pid = eval_count;
	eval_count++;
	return pid;
}

int make_Split() {
	int pid = Split_count;
	Split_count++;
	return pid;
}

int make_Add() {
	int pid = Add_count;
	Add_count++;
	return pid;
}

int make_Cmul() {
	int pid = Cmul_count;
	Cmul_count++;
	return pid;
}

int make_Sub() {
	int pid = Sub_count;
	Sub_count++;
	return pid;
}

int make_Monmul() {
	int pid = Monmul_count;
	Monmul_count++;
	return pid;
}

int make_Xmul() {
	int pid = Xmul_count;
	Xmul_count++;
	return pid;
}

int make_Rep() {
	int pid = Rep_count;
	Rep_count++;
	return pid;
}

int make_Mon() {
	int pid = Mon_count;
	Mon_count++;
	return pid;
}

int make_Shift() {
	int pid = Shift_count;
	Shift_count++;
	return pid;
}

int make_Mul() {
	int pid = Mul_count;
	Mul_count++;
	return pid;
}

int make_Diff() {
	int pid = Diff_count;
	Diff_count++;
	return pid;
}

int make_Integ() {
	int pid = Integ_count;
	Integ_count++;
	return pid;
}

int make_Binom() {
	int pid = Binom_count;
	Binom_count++;
	return pid;
}

int make_Recip() {
	int pid = Recip_count;
	Recip_count++;
	return pid;
}

int make_Exp() {
	int pid = Exp_count;
	Exp_count++;
	return pid;
}

int make_Subst() {
	int pid = Subst_count;
	Subst_count++;
	return pid;
}

int make_MonSubst() {
	int pid = MonSubst_count;
	MonSubst_count++;
	return pid;
}

int make_Init() {
	int pid = Init_count;
	Init_count++;
	return pid;
}

int make_check() {
	int pid = check_count;
	check_count++;
	return pid;
}

int make_checka() {
	int pid = checka_count;
	checka_count++;
	return pid;
}

int make_Add_func177(int par_pid) {
	int pid = Add_func177_count;
	Add_func177_count++;
	par_pid_Add_func177[pid] = par_pid;
	return pid;
}

int make_Cmul_func178(int par_pid) {
	int pid = Cmul_func178_count;
	Cmul_func178_count++;
	par_pid_Cmul_func178[pid] = par_pid;
	return pid;
}

int make_Monmul_func179(int par_pid) {
	int pid = Monmul_func179_count;
	Monmul_func179_count++;
	par_pid_Monmul_func179[pid] = par_pid;
	return pid;
}

int make_Mon_func180(int par_pid) {
	int pid = Mon_func180_count;
	Mon_func180_count++;
	par_pid_Mon_func180[pid] = par_pid;
	return pid;
}

int make_Shift_func181(int par_pid) {
	int pid = Shift_func181_count;
	Shift_func181_count++;
	par_pid_Shift_func181[pid] = par_pid;
	return pid;
}

int make_Mul_func182(int par_pid) {
	int pid = Mul_func182_count;
	Mul_func182_count++;
	par_pid_Mul_func182[pid] = par_pid;
	return pid;
}

int make_Diff_func183(int par_pid) {
	int pid = Diff_func183_count;
	Diff_func183_count++;
	par_pid_Diff_func183[pid] = par_pid;
	return pid;
}

int make_Integ_func184(int par_pid) {
	int pid = Integ_func184_count;
	Integ_func184_count++;
	par_pid_Integ_func184[pid] = par_pid;
	return pid;
}

int make_Binom_func185(int par_pid) {
	int pid = Binom_func185_count;
	Binom_func185_count++;
	par_pid_Binom_func185[pid] = par_pid;
	return pid;
}

int make_Recip_func186(int par_pid) {
	int pid = Recip_func186_count;
	Recip_func186_count++;
	par_pid_Recip_func186[pid] = par_pid;
	return pid;
}

int make_Subst_func187(int par_pid) {
	int pid = Subst_func187_count;
	Subst_func187_count++;
	par_pid_Subst_func187[pid] = par_pid;
	return pid;
}

int make_MonSubst_func188(int par_pid) {
	int pid = MonSubst_func188_count;
	MonSubst_func188_count++;
	par_pid_MonSubst_func188[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Add(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    started_mkPS_0,
    awaited_mkPS_0,
    created_Add_func177_0,
    started_Add_func177_0,
    starting,
    started,
    created_mkPS_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Add_func177_0 { assign p = make_Add_func177(pid); },
    created_Add_func177_0 -> started_Add_func177_0 { sync async_Add_func177[p]!; },
    started_Add_func177_0 -> ending { },
    starting -> started { sync async_Add[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Add[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Add[pid]!; };
}

process Add_func177(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started_get2_0,
    started,
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    created_get2_0,
    starting,
    ending,
    exit_loop_body_0,
    exit_loop_0,
    awaited_get2_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get2_0 { assign p = make_get2(); },
    created_get2_0 -> started_get2_0 { sync sync_get2[p]!; },
    started_get2_0 -> awaited_get2_0 { sync sync_get2[p]?; },
    awaited_get2_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_Add_func177[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Add_func177[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Add_func177[pid]!; };
}

process Binom(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    created_mkPS_0,
    started_mkPS_0,
    created_Binom_func185_0,
    starting,
    started,
    ending,
    awaited_mkPS_0,
    started_Binom_func185_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Binom_func185_0 { assign p = make_Binom_func185(pid); },
    created_Binom_func185_0 -> started_Binom_func185_0 { sync async_Binom_func185[p]!; },
    started_Binom_func185_0 -> ending { },
    starting -> started { sync async_Binom[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Binom[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Binom[pid]!; };
}

process Binom_func185(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_loop_body_0,
    exit_loop_body_0,
    awaited_put_0,
    created_mul_0,
    started_mul_0,
    awaited_mul_1,
    exit_loop_0,
    started_put_1,
    started_put_0,
    started_mul_1,
    started_sub_0,
    ending,
    started_i2tor_0,
    created_mul_1,
    created_put_1,
    starting,
    ended,
    created_itor_0,
    awaited_itor_0,
    awaited_mul_0,
    created_i2tor_0,
    started_itor_0,
    exit_loop_cond_0,
    started,
    enter_loop_cond_0,
    awaited_sub_0,
    created_put_0,
    awaited_i2tor_0,
    created_sub_0,
    awaited_put_1;
init
    starting;
trans
    started -> created_itor_0 { assign p = make_itor(); },
    created_itor_0 -> started_itor_0 { sync sync_itor[p]!; },
    started_itor_0 -> awaited_itor_0 { sync sync_itor[p]?; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_put_0 { assign p = make_put(); },
    created_put_0 -> started_put_0 { sync sync_put[p]!; },
    started_put_0 -> awaited_put_0 { sync sync_put[p]?; },
    awaited_put_0 -> created_mul_0 { assign p = make_mul(); },
    created_mul_0 -> started_mul_0 { sync sync_mul[p]!; },
    started_mul_0 -> awaited_mul_0 { sync sync_mul[p]?; },
    awaited_mul_0 -> created_i2tor_0 { assign p = make_i2tor(); },
    created_i2tor_0 -> started_i2tor_0 { sync sync_i2tor[p]!; },
    started_i2tor_0 -> awaited_i2tor_0 { sync sync_i2tor[p]?; },
    awaited_i2tor_0 -> created_mul_1 { assign p = make_mul(); },
    created_mul_1 -> started_mul_1 { sync sync_mul[p]!; },
    started_mul_1 -> awaited_mul_1 { sync sync_mul[p]?; },
    awaited_mul_1 -> created_sub_0 { assign p = make_sub(); },
    created_sub_0 -> started_sub_0 { sync sync_sub[p]!; },
    started_sub_0 -> awaited_sub_0 { sync sync_sub[p]?; },
    awaited_sub_0 -> exit_loop_body_0 { },
    awaited_itor_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> created_put_1 { assign p = make_put(); },
    created_put_1 -> started_put_1 { sync sync_put[p]!; },
    started_put_1 -> awaited_put_1 { sync sync_put[p]?; },
    awaited_put_1 -> ending { },
    starting -> started { sync async_Binom_func185[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Binom_func185[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Binom_func185[pid]!; };
}

process Channel(int[0, 19] i) {
// Place local declarations here.


state
    confirming_a,
    confirming_b,
    confirming_closed,
    bad,
    idle,
    new_sender,
    new_receiver,
    closing,
    closed;
commit
    confirming_closed,
    confirming_a,
    confirming_b,
    new_receiver,
    closing,
    new_sender;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process Cmul(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    created_mkPS_0,
    started_mkPS_0,
    awaited_mkPS_0,
    started_Cmul_func178_0,
    starting,
    ending,
    started,
    created_Cmul_func178_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Cmul_func178_0 { assign p = make_Cmul_func178(pid); },
    created_Cmul_func178_0 -> started_Cmul_func178_0 { sync async_Cmul_func178[p]!; },
    started_Cmul_func178_0 -> ending { },
    starting -> started { sync async_Cmul[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Cmul[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Cmul[pid]!; };
}

process Cmul_func178(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started_get_0,
    exit_if_0,
    created_mul_0,
    started,
    enter_loop_cond_0,
    exit_loop_body_0,
    created_get_0,
    awaited_end_0,
    starting,
    ended,
    exit_loop_cond_0,
    enter_if_0,
    started_mul_0,
    awaited_mul_0,
    exit_loop_0,
    awaited_get_0,
    created_end_0,
    enter_else_0,
    ending,
    enter_loop_body_0,
    started_end_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> created_mul_0 { assign p = make_mul(); },
    created_mul_0 -> started_mul_0 { sync sync_mul[p]!; },
    started_mul_0 -> awaited_mul_0 { sync sync_mul[p]?; },
    awaited_mul_0 -> exit_if_0 { },
    awaited_end_0 -> enter_if_0 { },
    awaited_end_0 -> enter_else_0 { },
    exit_if_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_Cmul_func178[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Cmul_func178[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Cmul_func178[pid]!; };
}

process Diff(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    created_mkPS_0,
    started_mkPS_0,
    started_Diff_func183_0,
    starting,
    started,
    ending,
    ended,
    awaited_mkPS_0,
    created_Diff_func183_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Diff_func183_0 { assign p = make_Diff_func183(pid); },
    created_Diff_func183_0 -> started_Diff_func183_0 { sync async_Diff_func183[p]!; },
    started_Diff_func183_0 -> ending { },
    starting -> started { sync async_Diff[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Diff[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Diff[pid]!; };
}

process Diff_func183(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started_end_0,
    enter_loop_body_0,
    starting,
    awaited_end_0,
    enter_if_0,
    enter_loop_cond_0,
    awaited_itor_0,
    started_get_0,
    started_end_1,
    awaited_end_1,
    created_get_0,
    created_end_0,
    created_get_1,
    created_end_1,
    awaited_mul_0,
    started,
    ended,
    exit_loop_0,
    started_get_1,
    exit_if_1,
    started_mul_0,
    exit_if_0,
    exit_loop_body_0,
    awaited_get_1,
    created_itor_0,
    enter_else_1,
    created_mul_0,
    ending,
    awaited_get_0,
    exit_loop_cond_0,
    enter_if_1,
    enter_else_0,
    started_itor_0;
init
    starting;
trans
    started -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get_1 { assign p = make_get(); },
    created_get_1 -> started_get_1 { sync sync_get[p]!; },
    started_get_1 -> awaited_get_1 { sync sync_get[p]?; },
    awaited_get_1 -> created_end_1 { assign p = make_end(); },
    created_end_1 -> started_end_1 { sync sync_end[p]!; },
    started_end_1 -> awaited_end_1 { sync sync_end[p]?; },
    enter_if_1 -> exit_if_1 { },
    enter_else_0 -> created_itor_0 { assign p = make_itor(); },
    created_itor_0 -> started_itor_0 { sync sync_itor[p]!; },
    started_itor_0 -> awaited_itor_0 { sync sync_itor[p]?; },
    awaited_itor_0 -> created_mul_0 { assign p = make_mul(); },
    created_mul_0 -> started_mul_0 { sync sync_mul[p]!; },
    started_mul_0 -> awaited_mul_0 { sync sync_mul[p]?; },
    awaited_mul_0 -> exit_if_1 { },
    awaited_end_1 -> enter_if_1 { },
    awaited_end_1 -> enter_else_0 { },
    exit_if_1 -> exit_loop_body_0 { },
    enter_if_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> exit_if_0 { },
    enter_else_1 -> exit_if_0 { },
    awaited_end_0 -> enter_if_0 { },
    awaited_end_0 -> enter_else_1 { },
    exit_if_0 -> ending { },
    starting -> started { sync async_Diff_func183[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Diff_func183[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Diff_func183[pid]!; };
}

process Exp(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    started_mkPS2_0,
    awaited_mkPS2_0,
    created_Diff_0,
    started_Mul_0,
    awaited_Mul_0,
    created_Integ_0,
    started_Integ_0,
    created_split_0,
    ended,
    started,
    started_split_0,
    awaited_split_0,
    starting,
    created_mkPS2_0,
    started_Diff_0,
    awaited_Diff_0,
    created_Mul_0,
    awaited_Integ_0;
init
    starting;
trans
    started -> created_mkPS2_0 { assign p = make_mkPS2(); },
    created_mkPS2_0 -> started_mkPS2_0 { sync sync_mkPS2[p]!; },
    started_mkPS2_0 -> awaited_mkPS2_0 { sync sync_mkPS2[p]?; },
    awaited_mkPS2_0 -> created_Diff_0 { assign p = make_Diff(); },
    created_Diff_0 -> started_Diff_0 { sync sync_Diff[p]!; },
    started_Diff_0 -> awaited_Diff_0 { sync sync_Diff[p]?; },
    awaited_Diff_0 -> created_Mul_0 { assign p = make_Mul(); },
    created_Mul_0 -> started_Mul_0 { sync sync_Mul[p]!; },
    started_Mul_0 -> awaited_Mul_0 { sync sync_Mul[p]?; },
    awaited_Mul_0 -> created_Integ_0 { assign p = make_Integ(); },
    created_Integ_0 -> started_Integ_0 { sync sync_Integ[p]!; },
    started_Integ_0 -> awaited_Integ_0 { sync sync_Integ[p]?; },
    awaited_Integ_0 -> created_split_0 { assign p = make_split(); },
    created_split_0 -> started_split_0 { sync sync_split[p]!; },
    started_split_0 -> awaited_split_0 { sync sync_split[p]?; },
    awaited_split_0 -> ending { },
    starting -> started { sync async_Exp[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Exp[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Exp[pid]!; };
}

process Init(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started_itor_1,
    started_Rep_0,
    starting,
    created_itor_1,
    awaited_itor_1,
    started_i2tor_0,
    awaited_i2tor_0,
    created_Rep_1,
    awaited_Rep_1,
    created_itor_0,
    started_itor_0,
    started_itor_2,
    awaited_itor_2,
    started_Rep_1,
    started,
    ending,
    ended,
    awaited_itor_0,
    created_i2tor_0,
    created_Rep_0,
    awaited_Rep_0,
    created_itor_2;
init
    starting;
trans
    started -> created_itor_0 { assign p = make_itor(); },
    created_itor_0 -> started_itor_0 { sync sync_itor[p]!; },
    started_itor_0 -> awaited_itor_0 { sync sync_itor[p]?; },
    awaited_itor_0 -> created_itor_1 { assign p = make_itor(); },
    created_itor_1 -> started_itor_1 { sync sync_itor[p]!; },
    started_itor_1 -> awaited_itor_1 { sync sync_itor[p]?; },
    awaited_itor_1 -> created_i2tor_0 { assign p = make_i2tor(); },
    created_i2tor_0 -> started_i2tor_0 { sync sync_i2tor[p]!; },
    started_i2tor_0 -> awaited_i2tor_0 { sync sync_i2tor[p]?; },
    awaited_i2tor_0 -> created_Rep_0 { assign p = make_Rep(); },
    created_Rep_0 -> started_Rep_0 { sync sync_Rep[p]!; },
    started_Rep_0 -> awaited_Rep_0 { sync sync_Rep[p]?; },
    awaited_Rep_0 -> created_itor_2 { assign p = make_itor(); },
    created_itor_2 -> started_itor_2 { sync sync_itor[p]!; },
    started_itor_2 -> awaited_itor_2 { sync sync_itor[p]?; },
    awaited_itor_2 -> created_Rep_1 { assign p = make_Rep(); },
    created_Rep_1 -> started_Rep_1 { sync sync_Rep[p]!; },
    started_Rep_1 -> awaited_Rep_1 { sync sync_Rep[p]?; },
    awaited_Rep_1 -> ending { },
    starting -> started { sync async_Init[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Init[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Init[pid]!; };
}

process Integ(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    ending,
    started_Integ_func184_0,
    awaited_mkPS_0,
    created_Integ_func184_0,
    started,
    ended,
    created_mkPS_0,
    started_mkPS_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Integ_func184_0 { assign p = make_Integ_func184(pid); },
    created_Integ_func184_0 -> started_Integ_func184_0 { sync async_Integ_func184[p]!; },
    started_Integ_func184_0 -> ending { },
    starting -> started { sync async_Integ[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Integ[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Integ[pid]!; };
}

process Integ_func184(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_loop_cond_0,
    created_mul_0,
    enter_else_0,
    started_put_0,
    ended,
    exit_loop_0,
    created_end_0,
    created_i2tor_0,
    started,
    exit_loop_cond_0,
    started_get_0,
    awaited_end_0,
    started_i2tor_0,
    awaited_i2tor_0,
    awaited_mul_0,
    created_put_0,
    exit_loop_body_0,
    started_end_0,
    enter_if_0,
    exit_if_0,
    created_get_0,
    awaited_get_0,
    started_mul_0,
    starting,
    ending,
    awaited_put_0,
    enter_loop_body_0;
init
    starting;
trans
    started -> created_put_0 { assign p = make_put(); },
    created_put_0 -> started_put_0 { sync sync_put[p]!; },
    started_put_0 -> awaited_put_0 { sync sync_put[p]?; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    awaited_end_0 -> enter_if_0 { },
    awaited_end_0 -> enter_else_0 { },
    exit_if_0 -> created_i2tor_0 { assign p = make_i2tor(); },
    created_i2tor_0 -> started_i2tor_0 { sync sync_i2tor[p]!; },
    started_i2tor_0 -> awaited_i2tor_0 { sync sync_i2tor[p]?; },
    awaited_i2tor_0 -> created_mul_0 { assign p = make_mul(); },
    created_mul_0 -> started_mul_0 { sync sync_mul[p]!; },
    started_mul_0 -> awaited_mul_0 { sync sync_mul[p]?; },
    awaited_mul_0 -> exit_loop_body_0 { },
    awaited_put_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_Integ_func184[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Integ_func184[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Integ_func184[pid]!; };
}

process Mon(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    awaited_mkPS_0,
    created_Mon_func180_0,
    starting,
    created_mkPS_0,
    started_mkPS_0,
    started_Mon_func180_0,
    ended;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Mon_func180_0 { assign p = make_Mon_func180(pid); },
    created_Mon_func180_0 -> started_Mon_func180_0 { sync async_Mon_func180[p]!; },
    started_Mon_func180_0 -> ending { },
    starting -> started { sync async_Mon[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Mon[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Mon[pid]!; };
}

process MonSubst(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ended,
    awaited_mkPS_0,
    created_MonSubst_func188_0,
    started_MonSubst_func188_0,
    starting,
    ending,
    created_mkPS_0,
    started_mkPS_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_MonSubst_func188_0 { assign p = make_MonSubst_func188(pid); },
    created_MonSubst_func188_0 -> started_MonSubst_func188_0 { sync async_MonSubst_func188[p]!; },
    started_MonSubst_func188_0 -> ending { },
    starting -> started { sync async_MonSubst[pid]?; assign is_sync = false; },
    starting -> started { sync sync_MonSubst[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_MonSubst[pid]!; };
}

process MonSubst_func188(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_loop_body_1,
    exit_loop_body_0,
    awaited_mul_1,
    created_end_0,
    started_mul_1,
    awaited_mul_0,
    created_mul_1,
    started_end_0,
    exit_if_0,
    enter_else_0,
    exit_loop_cond_0,
    ending,
    started_get_0,
    awaited_end_0,
    exit_loop_cond_1,
    started,
    created_get_0,
    started_mul_0,
    exit_loop_1,
    enter_loop_cond_0,
    exit_loop_body_1,
    ended,
    created_mul_0,
    enter_if_0,
    enter_loop_cond_1,
    starting,
    exit_loop_0,
    awaited_get_0,
    enter_loop_body_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_mul_0 { assign p = make_mul(); },
    created_mul_0 -> started_mul_0 { sync sync_mul[p]!; },
    started_mul_0 -> awaited_mul_0 { sync sync_mul[p]?; },
    awaited_mul_0 -> created_mul_1 { assign p = make_mul(); },
    created_mul_1 -> started_mul_1 { sync sync_mul[p]!; },
    started_mul_1 -> awaited_mul_1 { sync sync_mul[p]?; },
    awaited_mul_1 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    enter_if_0 -> exit_loop_0 { },
    enter_else_0 -> exit_if_0 { },
    awaited_end_0 -> enter_if_0 { },
    awaited_end_0 -> enter_else_0 { },
    enter_loop_cond_1 -> exit_loop_cond_1 { },
    enter_loop_body_1 -> exit_loop_body_1 { },
    exit_if_0 -> enter_loop_cond_1 { },
    exit_loop_cond_1 -> enter_loop_body_1 { },
    exit_loop_cond_1 -> exit_loop_1 { },
    exit_loop_body_1 -> enter_loop_cond_1 { },
    exit_loop_1 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_MonSubst_func188[pid]?; assign is_sync = false; },
    starting -> started { sync sync_MonSubst_func188[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_MonSubst_func188[pid]!; };
}

process Mon_func180(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_if_0,
    awaited_put_2,
    started_put_2,
    starting,
    started,
    enter_loop_body_0,
    exit_loop_body_0,
    awaited_put_0,
    created_put_2,
    enter_else_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    exit_loop_0,
    created_put_1,
    started_put_1,
    awaited_put_1,
    ending,
    ended,
    exit_if_0,
    created_put_0,
    started_put_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_put_0 { assign p = make_put(); },
    created_put_0 -> started_put_0 { sync sync_put[p]!; },
    started_put_0 -> awaited_put_0 { sync sync_put[p]?; },
    awaited_put_0 -> exit_loop_body_0 { },
    enter_if_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> created_put_1 { assign p = make_put(); },
    created_put_1 -> started_put_1 { sync sync_put[p]!; },
    started_put_1 -> awaited_put_1 { sync sync_put[p]?; },
    awaited_put_1 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    exit_if_0 -> created_put_2 { assign p = make_put(); },
    created_put_2 -> started_put_2 { sync sync_put[p]!; },
    started_put_2 -> awaited_put_2 { sync sync_put[p]?; },
    awaited_put_2 -> ending { },
    starting -> started { sync async_Mon_func180[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Mon_func180[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Mon_func180[pid]!; };
}

process Monmul(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    created_mkPS_0,
    started_mkPS_0,
    started_Monmul_func179_0,
    starting,
    ending,
    ended,
    awaited_mkPS_0,
    created_Monmul_func179_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Monmul_func179_0 { assign p = make_Monmul_func179(pid); },
    created_Monmul_func179_0 -> started_Monmul_func179_0 { sync async_Monmul_func179[p]!; },
    started_Monmul_func179_0 -> ending { },
    starting -> started { sync async_Monmul[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Monmul[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Monmul[pid]!; };
}

process Monmul_func179(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    ending,
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    created_put_0,
    started,
    exit_loop_body_0,
    exit_loop_0,
    started_put_0,
    awaited_put_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_put_0 { assign p = make_put(); },
    created_put_0 -> started_put_0 { sync sync_put[p]!; },
    started_put_0 -> awaited_put_0 { sync sync_put[p]?; },
    awaited_put_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_Monmul_func179[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Monmul_func179[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Monmul_func179[pid]!; };
}

process Mul(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started_mkPS_0,
    created_Mul_func182_0,
    ending,
    ended,
    created_mkPS_0,
    awaited_mkPS_0,
    started_Mul_func182_0,
    starting,
    started;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Mul_func182_0 { assign p = make_Mul_func182(pid); },
    created_Mul_func182_0 -> started_Mul_func182_0 { sync async_Mul_func182[p]!; },
    started_Mul_func182_0 -> ending { },
    starting -> started { sync async_Mul[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Mul[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Mul[pid]!; };
}

process Mul_func182(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    created_Add_0,
    awaited_get_0,
    awaited_Add_1,
    starting,
    ending,
    created_Split_0,
    started_Split_1,
    awaited_Split_1,
    started_get2_0,
    awaited_end_1,
    awaited_Cmul_0,
    awaited_Add_0,
    created_Add_1,
    created_Cmul_0,
    started_Cmul_1,
    started_Add_0,
    awaited_get2_0,
    created_end_0,
    started_end_0,
    created_end_1,
    started_Cmul_0,
    started_Add_1,
    created_get2_0,
    awaited_end_0,
    exit_if_0,
    created_mul_0,
    awaited_Cmul_1,
    created_Mul_0,
    started_Mul_0,
    awaited_Mul_0,
    started,
    ended,
    enter_else_0,
    awaited_mul_0,
    started_get_0,
    started_end_1,
    enter_if_0,
    awaited_Split_0,
    started_mul_0,
    started_Split_0,
    created_Split_1,
    created_Cmul_1,
    created_get_0;
init
    starting;
trans
    started -> created_get2_0 { assign p = make_get2(); },
    created_get2_0 -> started_get2_0 { sync sync_get2[p]!; },
    started_get2_0 -> awaited_get2_0 { sync sync_get2[p]?; },
    awaited_get2_0 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    awaited_end_0 -> created_end_1 { assign p = make_end(); },
    created_end_1 -> started_end_1 { sync sync_end[p]!; },
    started_end_1 -> awaited_end_1 { sync sync_end[p]?; },
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> created_mul_0 { assign p = make_mul(); },
    created_mul_0 -> started_mul_0 { sync sync_mul[p]!; },
    started_mul_0 -> awaited_mul_0 { sync sync_mul[p]?; },
    awaited_mul_0 -> created_Split_0 { assign p = make_Split(); },
    created_Split_0 -> started_Split_0 { sync sync_Split[p]!; },
    started_Split_0 -> awaited_Split_0 { sync sync_Split[p]?; },
    awaited_Split_0 -> created_Split_1 { assign p = make_Split(); },
    created_Split_1 -> started_Split_1 { sync sync_Split[p]!; },
    started_Split_1 -> awaited_Split_1 { sync sync_Split[p]?; },
    awaited_Split_1 -> created_Cmul_0 { assign p = make_Cmul(); },
    created_Cmul_0 -> started_Cmul_0 { sync sync_Cmul[p]!; },
    started_Cmul_0 -> awaited_Cmul_0 { sync sync_Cmul[p]?; },
    awaited_Cmul_0 -> created_Cmul_1 { assign p = make_Cmul(); },
    created_Cmul_1 -> started_Cmul_1 { sync sync_Cmul[p]!; },
    started_Cmul_1 -> awaited_Cmul_1 { sync sync_Cmul[p]?; },
    awaited_Cmul_1 -> created_Add_0 { assign p = make_Add(); },
    created_Add_0 -> started_Add_0 { sync sync_Add[p]!; },
    started_Add_0 -> awaited_Add_0 { sync sync_Add[p]?; },
    awaited_Add_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_Mul_0 { assign p = make_Mul(); },
    created_Mul_0 -> started_Mul_0 { sync sync_Mul[p]!; },
    started_Mul_0 -> awaited_Mul_0 { sync sync_Mul[p]?; },
    awaited_Mul_0 -> created_Add_1 { assign p = make_Add(); },
    created_Add_1 -> started_Add_1 { sync sync_Add[p]!; },
    started_Add_1 -> awaited_Add_1 { sync sync_Add[p]?; },
    awaited_Add_1 -> exit_if_0 { },
    awaited_end_1 -> enter_if_0 { },
    awaited_end_1 -> enter_else_0 { },
    exit_if_0 -> ending { },
    starting -> started { sync async_Mul_func182[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Mul_func182[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Mul_func182[pid]!; };
}

process Recip(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started_Recip_func186_0,
    starting,
    started,
    started_mkPS_0,
    created_Recip_func186_0,
    ending,
    ended,
    created_mkPS_0,
    awaited_mkPS_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Recip_func186_0 { assign p = make_Recip_func186(pid); },
    created_Recip_func186_0 -> started_Recip_func186_0 { sync async_Recip_func186[p]!; },
    started_Recip_func186_0 -> ending { },
    starting -> started { sync async_Recip[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Recip[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Recip[pid]!; };
}

process Recip_func186(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    created_mkPS2_0,
    created_inv_0,
    created_neg_0,
    started_Cmul_0,
    created_Shift_0,
    starting,
    started_get_0,
    started_Shift_0,
    created_Mul_0,
    started,
    started_mkPS2_0,
    awaited_get_0,
    created_Cmul_0,
    awaited_split_0,
    created_get_0,
    started_neg_0,
    started_split_0,
    created_split_0,
    awaited_Mul_0,
    ending,
    awaited_Cmul_0,
    awaited_Shift_0,
    ended,
    awaited_mkPS2_0,
    awaited_neg_0,
    started_inv_0,
    awaited_inv_0,
    started_Mul_0;
init
    starting;
trans
    started -> created_mkPS2_0 { assign p = make_mkPS2(); },
    created_mkPS2_0 -> started_mkPS2_0 { sync sync_mkPS2[p]!; },
    started_mkPS2_0 -> awaited_mkPS2_0 { sync sync_mkPS2[p]?; },
    awaited_mkPS2_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_inv_0 { assign p = make_inv(); },
    created_inv_0 -> started_inv_0 { sync sync_inv[p]!; },
    started_inv_0 -> awaited_inv_0 { sync sync_inv[p]?; },
    awaited_inv_0 -> created_neg_0 { assign p = make_neg(); },
    created_neg_0 -> started_neg_0 { sync sync_neg[p]!; },
    started_neg_0 -> awaited_neg_0 { sync sync_neg[p]?; },
    awaited_neg_0 -> created_Cmul_0 { assign p = make_Cmul(); },
    created_Cmul_0 -> started_Cmul_0 { sync sync_Cmul[p]!; },
    started_Cmul_0 -> awaited_Cmul_0 { sync sync_Cmul[p]?; },
    awaited_Cmul_0 -> created_Shift_0 { assign p = make_Shift(); },
    created_Shift_0 -> started_Shift_0 { sync sync_Shift[p]!; },
    started_Shift_0 -> awaited_Shift_0 { sync sync_Shift[p]?; },
    awaited_Shift_0 -> created_Mul_0 { assign p = make_Mul(); },
    created_Mul_0 -> started_Mul_0 { sync sync_Mul[p]!; },
    started_Mul_0 -> awaited_Mul_0 { sync sync_Mul[p]?; },
    awaited_Mul_0 -> created_split_0 { assign p = make_split(); },
    created_split_0 -> started_split_0 { sync sync_split[p]!; },
    started_split_0 -> awaited_split_0 { sync sync_split[p]?; },
    awaited_split_0 -> ending { },
    starting -> started { sync async_Recip_func186[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Recip_func186[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Recip_func186[pid]!; };
}

process Rep(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    created_repeat_0,
    created_mkPS_0,
    started_mkPS_0,
    awaited_mkPS_0,
    started_repeat_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_repeat_0 { assign p = make_repeat(); },
    created_repeat_0 -> started_repeat_0 { sync async_repeat[p]!; },
    started_repeat_0 -> ending { },
    starting -> started { sync async_Rep[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Rep[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Rep[pid]!; };
}

process Shift(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    awaited_mkPS_0,
    created_Shift_func181_0,
    ended,
    created_mkPS_0,
    started_mkPS_0,
    started_Shift_func181_0;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Shift_func181_0 { assign p = make_Shift_func181(pid); },
    created_Shift_func181_0 -> started_Shift_func181_0 { sync async_Shift_func181[p]!; },
    started_Shift_func181_0 -> ending { },
    starting -> started { sync async_Shift[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Shift[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Shift[pid]!; };
}

process Shift_func181(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    created_put_0,
    started_put_0,
    awaited_put_0;
init
    starting;
trans
    started -> created_put_0 { assign p = make_put(); },
    created_put_0 -> started_put_0 { sync sync_put[p]!; },
    started_put_0 -> awaited_put_0 { sync sync_put[p]?; },
    awaited_put_0 -> ending { },
    starting -> started { sync async_Shift_func181[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Shift_func181[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Shift_func181[pid]!; };
}

process Split(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    awaited_mkdch2_0,
    created_split_0,
    starting,
    started,
    created_mkdch2_0,
    started_mkdch2_0,
    started_split_0;
init
    starting;
trans
    started -> created_mkdch2_0 { assign p = make_mkdch2(); },
    created_mkdch2_0 -> started_mkdch2_0 { sync sync_mkdch2[p]!; },
    started_mkdch2_0 -> awaited_mkdch2_0 { sync sync_mkdch2[p]?; },
    awaited_mkdch2_0 -> created_split_0 { assign p = make_split(); },
    created_split_0 -> started_split_0 { sync async_split[p]!; },
    started_split_0 -> ending { },
    starting -> started { sync async_Split[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Split[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Split[pid]!; };
}

process Sub(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    awaited_neg_0,
    created_Cmul_0,
    awaited_Add_0,
    starting,
    started,
    ending,
    ended,
    created_neg_0,
    started_neg_0,
    started_Cmul_0,
    awaited_Cmul_0,
    created_Add_0,
    started_Add_0;
init
    starting;
trans
    started -> created_neg_0 { assign p = make_neg(); },
    created_neg_0 -> started_neg_0 { sync sync_neg[p]!; },
    started_neg_0 -> awaited_neg_0 { sync sync_neg[p]?; },
    awaited_neg_0 -> created_Cmul_0 { assign p = make_Cmul(); },
    created_Cmul_0 -> started_Cmul_0 { sync sync_Cmul[p]!; },
    started_Cmul_0 -> awaited_Cmul_0 { sync sync_Cmul[p]?; },
    awaited_Cmul_0 -> created_Add_0 { assign p = make_Add(); },
    created_Add_0 -> started_Add_0 { sync sync_Add[p]!; },
    started_Add_0 -> awaited_Add_0 { sync sync_Add[p]?; },
    awaited_Add_0 -> ending { },
    starting -> started { sync async_Sub[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Sub[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Sub[pid]!; };
}

process Subst(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    started_mkPS_0,
    awaited_mkPS_0,
    created_Subst_func187_0,
    starting,
    ending,
    created_mkPS_0,
    started_Subst_func187_0,
    started;
init
    starting;
trans
    started -> created_mkPS_0 { assign p = make_mkPS(); },
    created_mkPS_0 -> started_mkPS_0 { sync sync_mkPS[p]!; },
    started_mkPS_0 -> awaited_mkPS_0 { sync sync_mkPS[p]?; },
    awaited_mkPS_0 -> created_Subst_func187_0 { assign p = make_Subst_func187(pid); },
    created_Subst_func187_0 -> started_Subst_func187_0 { sync async_Subst_func187[p]!; },
    started_Subst_func187_0 -> ending { },
    starting -> started { sync async_Subst[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Subst[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Subst[pid]!; };
}

process Subst_func187(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    awaited_Split_0,
    created_get_1,
    started_Mul_0,
    enter_if_0,
    started_get_1,
    created_end_1,
    started_end_1,
    started_put_0,
    enter_else_0,
    awaited_Mul_0,
    starting,
    awaited_end_0,
    exit_if_0,
    created_Mul_0,
    awaited_get_1,
    awaited_Subst_0,
    started_Split_0,
    created_Subst_0,
    ending,
    started_get_0,
    exit_if_1,
    created_put_0,
    created_Split_0,
    created_get_0,
    awaited_get_0,
    created_end_0,
    awaited_end_1,
    awaited_put_0,
    started_Subst_0,
    ended,
    started_end_0,
    enter_if_1,
    enter_else_1;
init
    starting;
trans
    started -> created_Split_0 { assign p = make_Split(); },
    created_Split_0 -> started_Split_0 { sync sync_Split[p]!; },
    started_Split_0 -> awaited_Split_0 { sync sync_Split[p]?; },
    awaited_Split_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    enter_if_0 -> created_get_1 { assign p = make_get(); },
    created_get_1 -> started_get_1 { sync sync_get[p]!; },
    started_get_1 -> awaited_get_1 { sync sync_get[p]?; },
    awaited_get_1 -> created_end_1 { assign p = make_end(); },
    created_end_1 -> started_end_1 { sync sync_end[p]!; },
    started_end_1 -> awaited_end_1 { sync sync_end[p]?; },
    enter_if_1 -> created_put_0 { assign p = make_put(); },
    created_put_0 -> started_put_0 { sync sync_put[p]!; },
    started_put_0 -> awaited_put_0 { sync sync_put[p]?; },
    awaited_put_0 -> exit_if_1 { },
    enter_else_0 -> created_Subst_0 { assign p = make_Subst(); },
    created_Subst_0 -> started_Subst_0 { sync sync_Subst[p]!; },
    started_Subst_0 -> awaited_Subst_0 { sync sync_Subst[p]?; },
    awaited_Subst_0 -> created_Mul_0 { assign p = make_Mul(); },
    created_Mul_0 -> started_Mul_0 { sync sync_Mul[p]!; },
    started_Mul_0 -> awaited_Mul_0 { sync sync_Mul[p]?; },
    awaited_Mul_0 -> exit_if_1 { },
    awaited_end_1 -> enter_if_1 { },
    awaited_end_1 -> enter_else_0 { },
    exit_if_1 -> exit_if_0 { },
    enter_else_1 -> exit_if_0 { },
    awaited_end_0 -> enter_if_0 { },
    awaited_end_0 -> enter_else_1 { },
    exit_if_0 -> ending { },
    starting -> started { sync async_Subst_func187[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Subst_func187[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Subst_func187[pid]!; };
}

process Xmul(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    created_Monmul_0,
    started_Monmul_0,
    awaited_Monmul_0;
init
    starting;
trans
    started -> created_Monmul_0 { assign p = make_Monmul(); },
    created_Monmul_0 -> started_Monmul_0 { sync sync_Monmul[p]!; },
    started_Monmul_0 -> awaited_Monmul_0 { sync sync_Monmul[p]?; },
    awaited_Monmul_0 -> ending { },
    starting -> started { sync async_Xmul[pid]?; assign is_sync = false; },
    starting -> started { sync sync_Xmul[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Xmul[pid]!; };
}

process add(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    ending,
    started_gcd_0,
    created_i2tor_0,
    started_i2tor_0,
    started,
    ended,
    created_gcd_0,
    awaited_gcd_0,
    awaited_i2tor_0;
init
    starting;
trans
    started -> created_gcd_0 { assign p = make_gcd(); },
    created_gcd_0 -> started_gcd_0 { sync sync_gcd[p]!; },
    started_gcd_0 -> awaited_gcd_0 { sync sync_gcd[p]?; },
    awaited_gcd_0 -> created_i2tor_0 { assign p = make_i2tor(); },
    created_i2tor_0 -> started_i2tor_0 { sync sync_i2tor[p]!; },
    started_i2tor_0 -> awaited_i2tor_0 { sync sync_i2tor[p]?; },
    awaited_i2tor_0 -> ending { },
    starting -> started { sync async_add[pid]?; assign is_sync = false; },
    starting -> started { sync sync_add[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_add[pid]!; };
}

process check(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    started_get_0,
    enter_else_0,
    ending,
    enter_loop_body_0,
    exit_loop_body_0,
    created_get_0,
    awaited_get_0,
    starting,
    started,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_if_0,
    exit_if_0,
    exit_loop_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    awaited_get_0 -> enter_if_0 { },
    awaited_get_0 -> enter_else_0 { },
    exit_if_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_check[pid]?; assign is_sync = false; },
    starting -> started { sync sync_check[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_check[pid]!; };
}

process checka(int[0, 4] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    exit_loop_cond_0,
    exit_loop_0,
    created_check_0,
    awaited_check_0,
    starting,
    ended,
    enter_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    started_check_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_check_0 { assign p = make_check(); },
    created_check_0 -> started_check_0 { sync sync_check[p]!; },
    started_check_0 -> awaited_check_0 { sync sync_check[p]?; },
    awaited_check_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_checka[pid]?; assign is_sync = false; },
    starting -> started { sync sync_checka[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_checka[pid]!; };
}

process copy(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    ended,
    exit_loop_cond_0,
    exit_loop_body_0,
    created_get_0,
    started_get_0,
    awaited_get_0,
    started,
    ending,
    enter_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_copy[pid]?; assign is_sync = false; },
    starting -> started { sync sync_copy[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_copy[pid]!; };
}

process dosplit(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var284_wait = -1;
int cid_var329_release = -1;

void initialize() {
    cid_var284_wait = arg_cid_var284_wait[pid];
}



state
    select_case_1_enter_0,
    select_end_1,
    made_release_0,
    exit_if_0,
    sending_release_0,
    ended,
    select_end_0,
    started_dosplit_0,
    receiving_wait_0,
    enter_else_0,
    starting,
    ending,
    select_pass_1_0,
    select_pass_1_1,
    enter_if_0,
    received_wait_0,
    sent_release_0,
    started,
    select_pass_2_0,
    select_pass_2_1,
    select_case_1_trigger_0,
    created_dosplit_0;
commit
    select_pass_1_0,
    select_pass_1_1;
init
    starting;
trans
    select_case_1_enter_0 -> select_pass_1_0 { },
    select_pass_1_0 -> select_pass_2_1 { },
    select_end_1 -> select_end_0 { },
    started -> select_pass_1_1 { assign chan_counter[cid_var284_wait]--; },
    select_pass_1_1 -> select_case_1_trigger_0 { guard chan_buffer[cid_var284_wait] < 0 || chan_counter[cid_var284_wait] >= 0; sync receiver_trigger[cid_var284_wait]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var284_wait]?; },
    select_pass_1_1 -> select_pass_2_0 { guard !(chan_buffer[cid_var284_wait] < 0 || chan_counter[cid_var284_wait] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var284_wait]?; },
    select_end_0 -> made_release_0 { assign cid_var329_release = make_chan(0); },
    made_release_0 -> created_dosplit_0 { assign p = make_dosplit(), arg_cid_var284_wait[p] = cid_var329_release; },
    created_dosplit_0 -> started_dosplit_0 { sync async_dosplit[p]!; },
    enter_if_0 -> receiving_wait_0 { sync receiver_trigger[cid_var284_wait]!; assign chan_counter[cid_var284_wait]--; },
    receiving_wait_0 -> received_wait_0 { sync receiver_confirm[cid_var284_wait]?; },
    received_wait_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    started_dosplit_0 -> enter_if_0 { },
    started_dosplit_0 -> enter_else_0 { },
    exit_if_0 -> sending_release_0 { sync sender_trigger[cid_var329_release]!; assign chan_counter[cid_var329_release]++; },
    sending_release_0 -> sent_release_0 { sync sender_confirm[cid_var329_release]?; },
    sent_release_0 -> ending { },
    starting -> started { sync async_dosplit[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_dosplit[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_dosplit[pid]!; };
}

process end(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    enter_if_0,
    exit_if_0,
    enter_else_0;
init
    starting;
trans
    enter_if_0 -> ending { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    exit_if_0 -> ending { },
    starting -> started { sync async_end[pid]?; assign is_sync = false; },
    starting -> started { sync sync_end[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_end[pid]!; };
}

process eq(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    starting,
    started;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_eq[pid]?; assign is_sync = false; },
    starting -> started { sync sync_eq[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_eq[pid]!; };
}

process eval(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started_end_0,
    created_eval_0,
    started_eval_0,
    starting,
    enter_if_0,
    exit_if_0,
    created_get_0,
    started_get_0,
    awaited_add_0,
    ending,
    awaited_get_0,
    awaited_end_0,
    created_mul_0,
    created_add_0,
    started_add_0,
    started,
    ended,
    awaited_eval_0,
    started_mul_0,
    awaited_mul_0,
    enter_else_0,
    created_end_0,
    enter_if_1,
    exit_if_1,
    enter_else_1;
init
    starting;
trans
    enter_if_0 -> ending { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    exit_if_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    enter_if_1 -> ending { },
    enter_else_1 -> exit_if_1 { },
    awaited_end_0 -> enter_if_1 { },
    awaited_end_0 -> enter_else_1 { },
    exit_if_1 -> created_eval_0 { assign p = make_eval(); },
    created_eval_0 -> started_eval_0 { sync sync_eval[p]!; },
    started_eval_0 -> awaited_eval_0 { sync sync_eval[p]?; },
    awaited_eval_0 -> created_mul_0 { assign p = make_mul(); },
    created_mul_0 -> started_mul_0 { sync sync_mul[p]!; },
    started_mul_0 -> awaited_mul_0 { sync sync_mul[p]?; },
    awaited_mul_0 -> created_add_0 { assign p = make_add(); },
    created_add_0 -> started_add_0 { sync sync_add[p]!; },
    started_add_0 -> awaited_add_0 { sync sync_add[p]?; },
    awaited_add_0 -> ending { },
    starting -> started { sync async_eval[pid]?; assign is_sync = false; },
    starting -> started { sync sync_eval[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_eval[pid]!; };
}

process evaln(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started_get_0,
    enter_loop_body_0,
    created_get_0,
    enter_if_0,
    enter_else_0,
    started,
    ending,
    exit_loop_cond_0,
    exit_loop_body_0,
    awaited_get_0,
    created_end_0,
    started_end_0,
    awaited_end_0,
    ended,
    enter_loop_cond_0,
    exit_if_0,
    starting,
    exit_loop_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    enter_if_0 -> exit_loop_0 { },
    enter_else_0 -> exit_if_0 { },
    awaited_end_0 -> enter_if_0 { },
    awaited_end_0 -> enter_else_0 { },
    exit_if_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_evaln[pid]?; assign is_sync = false; },
    starting -> started { sync sync_evaln[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_evaln[pid]!; };
}

process gcd(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_else_0,
    exit_if_1,
    starting,
    enter_if_0,
    awaited_gcd_0,
    started,
    started_gcd_0,
    created_gcd_1,
    awaited_gcd_1,
    ending,
    enter_else_1,
    created_gcd_0,
    enter_if_1,
    started_gcd_1,
    ended,
    exit_if_0;
init
    starting;
trans
    enter_if_0 -> created_gcd_0 { assign p = make_gcd(); },
    created_gcd_0 -> started_gcd_0 { sync sync_gcd[p]!; },
    started_gcd_0 -> awaited_gcd_0 { sync sync_gcd[p]?; },
    awaited_gcd_0 -> ending { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    enter_if_1 -> ending { },
    enter_else_1 -> exit_if_1 { },
    exit_if_0 -> enter_if_1 { },
    exit_if_0 -> enter_else_1 { },
    exit_if_1 -> created_gcd_1 { assign p = make_gcd(); },
    created_gcd_1 -> started_gcd_1 { sync sync_gcd[p]!; },
    started_gcd_1 -> awaited_gcd_1 { sync sync_gcd[p]?; },
    awaited_gcd_1 -> ending { },
    starting -> started { sync async_gcd[pid]?; assign is_sync = false; },
    starting -> started { sync sync_gcd[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_gcd[pid]!; };
}

process get(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_get[pid]?; assign is_sync = false; },
    starting -> started { sync sync_get[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_get[pid]!; };
}

process get2(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    ended,
    created_getn_0,
    started_getn_0,
    awaited_getn_0,
    starting;
init
    starting;
trans
    started -> created_getn_0 { assign p = make_getn(); },
    created_getn_0 -> started_getn_0 { sync sync_getn[p]!; },
    started_getn_0 -> awaited_getn_0 { sync sync_getn[p]?; },
    awaited_getn_0 -> ending { },
    starting -> started { sync async_get2[pid]?; assign is_sync = false; },
    starting -> started { sync sync_get2[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_get2[pid]!; };
}

process getn(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var331 = -1;



state
    select_end_0,
    select_pass_2_0,
    exit_if_0,
    enter_else_0,
    enter_loop_cond_0,
    exit_loop_cond_1,
    exit_loop_1,
    starting,
    ended,
    exit_loop_cond_0,
    select_pass_1_0,
    ending,
    enter_if_0,
    enter_loop_body_0,
    exit_loop_0,
    enter_loop_cond_1,
    started,
    exit_loop_body_0,
    enter_loop_body_1,
    exit_loop_body_1;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    exit_if_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    enter_loop_cond_1 -> exit_loop_cond_1 { },
    enter_loop_body_1 -> select_pass_1_0 { },
    select_pass_1_0 -> select_pass_2_0 { },
    select_end_0 -> exit_loop_body_1 { },
    exit_loop_0 -> enter_loop_cond_1 { },
    exit_loop_cond_1 -> enter_loop_body_1 { },
    exit_loop_cond_1 -> exit_loop_1 { },
    exit_loop_body_1 -> enter_loop_cond_1 { },
    exit_loop_1 -> ending { },
    starting -> started { sync async_getn[pid]?; assign is_sync = false; },
    starting -> started { sync sync_getn[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_getn[pid]!; };
}

process i2tor(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    awaited_gcd_0,
    enter_else_0,
    starting,
    ended,
    created_gcd_0,
    started_gcd_0,
    enter_if_0,
    exit_if_0,
    started,
    ending;
init
    starting;
trans
    started -> created_gcd_0 { assign p = make_gcd(); },
    created_gcd_0 -> started_gcd_0 { sync sync_gcd[p]!; },
    started_gcd_0 -> awaited_gcd_0 { sync sync_gcd[p]?; },
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    awaited_gcd_0 -> enter_if_0 { },
    awaited_gcd_0 -> enter_else_0 { },
    exit_if_0 -> ending { },
    starting -> started { sync async_i2tor[pid]?; assign is_sync = false; },
    starting -> started { sync sync_i2tor[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_i2tor[pid]!; };
}

process inv(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    exit_if_0,
    enter_else_0,
    created_i2tor_0,
    starting,
    ended,
    enter_if_0,
    started_i2tor_0,
    awaited_i2tor_0;
init
    starting;
trans
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    exit_if_0 -> created_i2tor_0 { assign p = make_i2tor(); },
    created_i2tor_0 -> started_i2tor_0 { sync sync_i2tor[p]!; },
    started_i2tor_0 -> awaited_i2tor_0 { sync sync_i2tor[p]?; },
    awaited_i2tor_0 -> ending { },
    starting -> started { sync async_inv[pid]?; assign is_sync = false; },
    starting -> started { sync sync_inv[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_inv[pid]!; };
}

process itor(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    created_i2tor_0,
    started_i2tor_0,
    awaited_i2tor_0,
    starting,
    started;
init
    starting;
trans
    started -> created_i2tor_0 { assign p = make_i2tor(); },
    created_i2tor_0 -> started_i2tor_0 { sync sync_i2tor[p]!; },
    started_i2tor_0 -> awaited_i2tor_0 { sync sync_i2tor[p]?; },
    awaited_i2tor_0 -> ending { },
    starting -> started { sync async_itor[pid]?; assign is_sync = false; },
    starting -> started { sync sync_itor[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_itor[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var332 = -1;



state
    created_neg_0,
    started_itor_1,
    awaited_printn_5,
    awaited_Add_1,
    enter_loop_body_0,
    created_itor_2,
    started_itor_5,
    created_printn_5,
    awaited_Integ_0,
    enter_else_0,
    awaited_Integ_2,
    awaited_checka_1,
    awaited_checka_4,
    started,
    started_Mul_1,
    started_itor_6,
    started_i2tor_7,
    awaited_i2tor_7,
    enter_loop_body_3,
    created_checka_4,
    started_i2tor_5,
    created_i2tor_7,
    created_MonSubst_0,
    exit_loop_body_0,
    created_Cmul_1,
    started_Cmul_1,
    awaited_neg_4,
    awaited_MonSubst_2,
    awaited_printn_2,
    enter_loop_cond_0,
    created_Sub_0,
    awaited_Diff_1,
    exit_loop_body_1,
    created_printn_10,
    awaited_printn_3,
    created_Add_1,
    created_checka_1,
    created_Sub_1,
    awaited_itor_7,
    awaited_Add_2,
    created_neg_3,
    awaited_i2tor_5,
    awaited_printn_0,
    awaited_Add_0,
    started_printn_5,
    started_Mul_0,
    awaited_Cmul_1,
    started_MonSubst_2,
    started_printn_2,
    enter_loop_cond_3,
    created_neg_2,
    awaited_itor_6,
    created_itor_7,
    started_i2tor_9,
    created_itor_0,
    started_check_2,
    created_Mul_1,
    exit_loop_cond_2,
    awaited_Exp_1,
    started_checka_4,
    enter_if_1,
    awaited_check_2,
    awaited_check_3,
    created_Exp_0,
    started_check_1,
    exit_loop_cond_1,
    started_neg_3,
    enter_if_0,
    created_Integ_0,
    started_Exp_0,
    awaited_MonSubst_0,
    started_check_0,
    started_Add_0,
    awaited_printn_8,
    started_Sub_1,
    created_i2tor_8,
    awaited_neg_0,
    started_itor_0,
    created_Add_2,
    awaited_Exp_0,
    started_checka_0,
    started_Exp_1,
    exit_loop_body_3,
    created_printn_7,
    awaited_MonSubst_1,
    awaited_check_0,
    created_Exp_1,
    awaited_i2tor_3,
    created_checka_3,
    awaited_i2tor_9,
    started_printn_3,
    awaited_check_1,
    enter_else_1,
    awaited_itor_0,
    exit_loop_body_2,
    started_i2tor_0,
    exit_loop_2,
    started_i2tor_3,
    started_Add_1,
    created_check_4,
    started_checka_3,
    started_Sub_0,
    created_itor_6,
    started_Diff_0,
    awaited_printn_10,
    started_Integ_2,
    created_Integ_3,
    started_printn_1,
    awaited_printn_1,
    awaited_itor_3,
    created_i2tor_3,
    created_printn_1,
    awaited_Cmul_0,
    started_printn_7,
    started_Integ_1,
    created_Diff_1,
    awaited_checka_2,
    started_itor_7,
    awaited_i2tor_6,
    created_printn_0,
    created_Diff_0,
    started_neg_0,
    started_printn_10,
    awaited_Init_0,
    created_itor_3,
    created_itor_1,
    created_checka_0,
    awaited_check_4,
    started_i2tor_6,
    awaited_printn_4,
    created_check_2,
    awaited_Integ_3,
    started_Integ_3,
    created_Mul_0,
    awaited_Mul_0,
    awaited_itor_2,
    awaited_i2tor_0,
    awaited_Sub_1,
    awaited_itor_5,
    created_neg_4,
    created_Init_0,
    created_check_0,
    enter_loop_cond_1,
    created_i2tor_4,
    starting,
    started_printn_4,
    created_printn_6,
    created_neg_1,
    awaited_neg_1,
    created_MonSubst_1,
    started_MonSubst_1,
    created_check_1,
    awaited_Mul_1,
    ending,
    created_Cmul_0,
    created_i2tor_2,
    created_MonSubst_2,
    created_printn_3,
    started_neg_1,
    started_printn_9,
    awaited_printn_9,
    exit_loop_cond_0,
    created_i2tor_5,
    awaited_itor_4,
    started_MonSubst_0,
    started_neg_2,
    started_check_3,
    started_checka_2,
    created_printn_4,
    awaited_neg_2,
    awaited_i2tor_1,
    awaited_checka_0,
    started_printn_0,
    created_itor_4,
    started_Integ_0,
    created_check_3,
    started_itor_4,
    ended,
    awaited_printn_7,
    started_Diff_1,
    started_check_4,
    started_i2tor_8,
    awaited_checka_3,
    awaited_neg_3,
    created_itor_5,
    created_i2tor_1,
    exit_if_1,
    created_Add_0,
    exit_loop_0,
    enter_loop_cond_2,
    exit_loop_cond_3,
    created_i2tor_9,
    created_printn_2,
    started_i2tor_2,
    started_itor_2,
    awaited_i2tor_2,
    started_i2tor_4,
    started_Init_0,
    awaited_Diff_0,
    awaited_Sub_0,
    started_printn_6,
    started_Add_2,
    started_checka_1,
    started_i2tor_1,
    created_Integ_1,
    awaited_Integ_1,
    created_Integ_2,
    started_printn_8,
    awaited_itor_1,
    created_i2tor_0,
    created_printn_9,
    enter_loop_body_1,
    awaited_i2tor_8,
    created_printn_8,
    created_checka_2,
    exit_loop_3,
    exit_if_0,
    awaited_printn_6,
    exit_loop_1,
    started_itor_3,
    awaited_i2tor_4,
    started_neg_4,
    started_Cmul_0,
    enter_loop_body_2,
    created_i2tor_6;
init
    starting;
trans
    started -> created_Init_0 { assign p = make_Init(); },
    created_Init_0 -> started_Init_0 { sync sync_Init[p]!; },
    started_Init_0 -> awaited_Init_0 { sync sync_Init[p]?; },
    enter_if_0 -> created_printn_0 { assign p = make_printn(); },
    created_printn_0 -> started_printn_0 { sync sync_printn[p]!; },
    started_printn_0 -> awaited_printn_0 { sync sync_printn[p]?; },
    awaited_printn_0 -> created_printn_1 { assign p = make_printn(); },
    created_printn_1 -> started_printn_1 { sync sync_printn[p]!; },
    started_printn_1 -> awaited_printn_1 { sync sync_printn[p]?; },
    awaited_printn_1 -> created_Add_0 { assign p = make_Add(); },
    created_Add_0 -> started_Add_0 { sync sync_Add[p]!; },
    started_Add_0 -> awaited_Add_0 { sync sync_Add[p]?; },
    awaited_Add_0 -> created_printn_2 { assign p = make_printn(); },
    created_printn_2 -> started_printn_2 { sync sync_printn[p]!; },
    started_printn_2 -> awaited_printn_2 { sync sync_printn[p]?; },
    awaited_printn_2 -> created_Diff_0 { assign p = make_Diff(); },
    created_Diff_0 -> started_Diff_0 { sync sync_Diff[p]!; },
    started_Diff_0 -> awaited_Diff_0 { sync sync_Diff[p]?; },
    awaited_Diff_0 -> created_printn_3 { assign p = make_printn(); },
    created_printn_3 -> started_printn_3 { sync sync_printn[p]!; },
    started_printn_3 -> awaited_printn_3 { sync sync_printn[p]?; },
    awaited_printn_3 -> created_Integ_0 { assign p = make_Integ(); },
    created_Integ_0 -> started_Integ_0 { sync sync_Integ[p]!; },
    started_Integ_0 -> awaited_Integ_0 { sync sync_Integ[p]?; },
    awaited_Integ_0 -> created_printn_4 { assign p = make_printn(); },
    created_printn_4 -> started_printn_4 { sync sync_printn[p]!; },
    started_printn_4 -> awaited_printn_4 { sync sync_printn[p]?; },
    awaited_printn_4 -> created_neg_0 { assign p = make_neg(); },
    created_neg_0 -> started_neg_0 { sync sync_neg[p]!; },
    started_neg_0 -> awaited_neg_0 { sync sync_neg[p]?; },
    awaited_neg_0 -> created_Cmul_0 { assign p = make_Cmul(); },
    created_Cmul_0 -> started_Cmul_0 { sync sync_Cmul[p]!; },
    started_Cmul_0 -> awaited_Cmul_0 { sync sync_Cmul[p]?; },
    awaited_Cmul_0 -> created_printn_5 { assign p = make_printn(); },
    created_printn_5 -> started_printn_5 { sync sync_printn[p]!; },
    started_printn_5 -> awaited_printn_5 { sync sync_printn[p]?; },
    awaited_printn_5 -> created_Sub_0 { assign p = make_Sub(); },
    created_Sub_0 -> started_Sub_0 { sync sync_Sub[p]!; },
    started_Sub_0 -> awaited_Sub_0 { sync sync_Sub[p]?; },
    awaited_Sub_0 -> created_printn_6 { assign p = make_printn(); },
    created_printn_6 -> started_printn_6 { sync sync_printn[p]!; },
    started_printn_6 -> awaited_printn_6 { sync sync_printn[p]?; },
    awaited_printn_6 -> created_Mul_0 { assign p = make_Mul(); },
    created_Mul_0 -> started_Mul_0 { sync sync_Mul[p]!; },
    started_Mul_0 -> awaited_Mul_0 { sync sync_Mul[p]?; },
    awaited_Mul_0 -> created_printn_7 { assign p = make_printn(); },
    created_printn_7 -> started_printn_7 { sync sync_printn[p]!; },
    started_printn_7 -> awaited_printn_7 { sync sync_printn[p]?; },
    awaited_printn_7 -> created_Exp_0 { assign p = make_Exp(); },
    created_Exp_0 -> started_Exp_0 { sync sync_Exp[p]!; },
    started_Exp_0 -> awaited_Exp_0 { sync sync_Exp[p]?; },
    awaited_Exp_0 -> created_printn_8 { assign p = make_printn(); },
    created_printn_8 -> started_printn_8 { sync sync_printn[p]!; },
    started_printn_8 -> awaited_printn_8 { sync sync_printn[p]?; },
    awaited_printn_8 -> created_neg_1 { assign p = make_neg(); },
    created_neg_1 -> started_neg_1 { sync sync_neg[p]!; },
    started_neg_1 -> awaited_neg_1 { sync sync_neg[p]?; },
    awaited_neg_1 -> created_MonSubst_0 { assign p = make_MonSubst(); },
    created_MonSubst_0 -> started_MonSubst_0 { sync sync_MonSubst[p]!; },
    started_MonSubst_0 -> awaited_MonSubst_0 { sync sync_MonSubst[p]?; },
    awaited_MonSubst_0 -> created_printn_9 { assign p = make_printn(); },
    created_printn_9 -> started_printn_9 { sync sync_printn[p]!; },
    started_printn_9 -> awaited_printn_9 { sync sync_printn[p]?; },
    awaited_printn_9 -> created_neg_2 { assign p = make_neg(); },
    created_neg_2 -> started_neg_2 { sync sync_neg[p]!; },
    started_neg_2 -> awaited_neg_2 { sync sync_neg[p]?; },
    awaited_neg_2 -> created_MonSubst_1 { assign p = make_MonSubst(); },
    created_MonSubst_1 -> started_MonSubst_1 { sync sync_MonSubst[p]!; },
    started_MonSubst_1 -> awaited_MonSubst_1 { sync sync_MonSubst[p]?; },
    awaited_MonSubst_1 -> created_Integ_1 { assign p = make_Integ(); },
    created_Integ_1 -> started_Integ_1 { sync sync_Integ[p]!; },
    started_Integ_1 -> awaited_Integ_1 { sync sync_Integ[p]?; },
    awaited_Integ_1 -> created_printn_10 { assign p = make_printn(); },
    created_printn_10 -> started_printn_10 { sync sync_printn[p]!; },
    started_printn_10 -> awaited_printn_10 { sync sync_printn[p]?; },
    awaited_printn_10 -> exit_if_0 { },
    enter_else_0 -> created_check_0 { assign p = make_check(); },
    created_check_0 -> started_check_0 { sync sync_check[p]!; },
    started_check_0 -> awaited_check_0 { sync sync_check[p]?; },
    awaited_check_0 -> created_Add_1 { assign p = make_Add(); },
    created_Add_1 -> started_Add_1 { sync sync_Add[p]!; },
    started_Add_1 -> awaited_Add_1 { sync sync_Add[p]?; },
    awaited_Add_1 -> created_itor_0 { assign p = make_itor(); },
    created_itor_0 -> started_itor_0 { sync sync_itor[p]!; },
    started_itor_0 -> awaited_itor_0 { sync sync_itor[p]?; },
    awaited_itor_0 -> created_check_1 { assign p = make_check(); },
    created_check_1 -> started_check_1 { sync sync_check[p]!; },
    started_check_1 -> awaited_check_1 { sync sync_check[p]?; },
    awaited_check_1 -> created_Add_2 { assign p = make_Add(); },
    created_Add_2 -> started_Add_2 { sync sync_Add[p]!; },
    started_Add_2 -> awaited_Add_2 { sync sync_Add[p]?; },
    awaited_Add_2 -> created_itor_1 { assign p = make_itor(); },
    created_itor_1 -> started_itor_1 { sync sync_itor[p]!; },
    started_itor_1 -> awaited_itor_1 { sync sync_itor[p]?; },
    awaited_itor_1 -> created_check_2 { assign p = make_check(); },
    created_check_2 -> started_check_2 { sync sync_check[p]!; },
    started_check_2 -> awaited_check_2 { sync sync_check[p]?; },
    awaited_check_2 -> created_Diff_1 { assign p = make_Diff(); },
    created_Diff_1 -> started_Diff_1 { sync sync_Diff[p]!; },
    started_Diff_1 -> awaited_Diff_1 { sync sync_Diff[p]?; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_itor_2 { assign p = make_itor(); },
    created_itor_2 -> started_itor_2 { sync sync_itor[p]!; },
    started_itor_2 -> awaited_itor_2 { sync sync_itor[p]?; },
    awaited_itor_2 -> exit_loop_body_0 { },
    awaited_Diff_1 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> created_checka_0 { assign p = make_checka(); },
    created_checka_0 -> started_checka_0 { sync sync_checka[p]!; },
    started_checka_0 -> awaited_checka_0 { sync sync_checka[p]?; },
    awaited_checka_0 -> created_Integ_2 { assign p = make_Integ(); },
    created_Integ_2 -> started_Integ_2 { sync sync_Integ[p]!; },
    started_Integ_2 -> awaited_Integ_2 { sync sync_Integ[p]?; },
    enter_loop_cond_1 -> exit_loop_cond_1 { },
    enter_loop_body_1 -> created_i2tor_0 { assign p = make_i2tor(); },
    created_i2tor_0 -> started_i2tor_0 { sync sync_i2tor[p]!; },
    started_i2tor_0 -> awaited_i2tor_0 { sync sync_i2tor[p]?; },
    awaited_i2tor_0 -> exit_loop_body_1 { },
    awaited_Integ_2 -> enter_loop_cond_1 { },
    exit_loop_cond_1 -> enter_loop_body_1 { },
    exit_loop_cond_1 -> exit_loop_1 { },
    exit_loop_body_1 -> enter_loop_cond_1 { },
    exit_loop_1 -> created_checka_1 { assign p = make_checka(); },
    created_checka_1 -> started_checka_1 { sync sync_checka[p]!; },
    started_checka_1 -> awaited_checka_1 { sync sync_checka[p]?; },
    awaited_checka_1 -> created_neg_3 { assign p = make_neg(); },
    created_neg_3 -> started_neg_3 { sync sync_neg[p]!; },
    started_neg_3 -> awaited_neg_3 { sync sync_neg[p]?; },
    awaited_neg_3 -> created_Cmul_1 { assign p = make_Cmul(); },
    created_Cmul_1 -> started_Cmul_1 { sync sync_Cmul[p]!; },
    started_Cmul_1 -> awaited_Cmul_1 { sync sync_Cmul[p]?; },
    awaited_Cmul_1 -> created_itor_3 { assign p = make_itor(); },
    created_itor_3 -> started_itor_3 { sync sync_itor[p]!; },
    started_itor_3 -> awaited_itor_3 { sync sync_itor[p]?; },
    awaited_itor_3 -> created_check_3 { assign p = make_check(); },
    created_check_3 -> started_check_3 { sync sync_check[p]!; },
    started_check_3 -> awaited_check_3 { sync sync_check[p]?; },
    awaited_check_3 -> created_Sub_1 { assign p = make_Sub(); },
    created_Sub_1 -> started_Sub_1 { sync sync_Sub[p]!; },
    started_Sub_1 -> awaited_Sub_1 { sync sync_Sub[p]?; },
    awaited_Sub_1 -> created_itor_4 { assign p = make_itor(); },
    created_itor_4 -> started_itor_4 { sync sync_itor[p]!; },
    started_itor_4 -> awaited_itor_4 { sync sync_itor[p]?; },
    awaited_itor_4 -> created_check_4 { assign p = make_check(); },
    created_check_4 -> started_check_4 { sync sync_check[p]!; },
    started_check_4 -> awaited_check_4 { sync sync_check[p]?; },
    awaited_check_4 -> created_Mul_1 { assign p = make_Mul(); },
    created_Mul_1 -> started_Mul_1 { sync sync_Mul[p]!; },
    started_Mul_1 -> awaited_Mul_1 { sync sync_Mul[p]?; },
    enter_loop_cond_2 -> exit_loop_cond_2 { },
    enter_loop_body_2 -> created_itor_5 { assign p = make_itor(); },
    created_itor_5 -> started_itor_5 { sync sync_itor[p]!; },
    started_itor_5 -> awaited_itor_5 { sync sync_itor[p]?; },
    awaited_itor_5 -> exit_loop_body_2 { },
    awaited_Mul_1 -> enter_loop_cond_2 { },
    exit_loop_cond_2 -> enter_loop_body_2 { },
    exit_loop_cond_2 -> exit_loop_2 { },
    exit_loop_body_2 -> enter_loop_cond_2 { },
    exit_loop_2 -> created_checka_2 { assign p = make_checka(); },
    created_checka_2 -> started_checka_2 { sync sync_checka[p]!; },
    started_checka_2 -> awaited_checka_2 { sync sync_checka[p]?; },
    awaited_checka_2 -> created_Exp_1 { assign p = make_Exp(); },
    created_Exp_1 -> started_Exp_1 { sync sync_Exp[p]!; },
    started_Exp_1 -> awaited_Exp_1 { sync sync_Exp[p]?; },
    awaited_Exp_1 -> created_itor_6 { assign p = make_itor(); },
    created_itor_6 -> started_itor_6 { sync sync_itor[p]!; },
    started_itor_6 -> awaited_itor_6 { sync sync_itor[p]?; },
    awaited_itor_6 -> created_itor_7 { assign p = make_itor(); },
    created_itor_7 -> started_itor_7 { sync sync_itor[p]!; },
    started_itor_7 -> awaited_itor_7 { sync sync_itor[p]?; },
    awaited_itor_7 -> created_i2tor_1 { assign p = make_i2tor(); },
    created_i2tor_1 -> started_i2tor_1 { sync sync_i2tor[p]!; },
    started_i2tor_1 -> awaited_i2tor_1 { sync sync_i2tor[p]?; },
    awaited_i2tor_1 -> created_i2tor_2 { assign p = make_i2tor(); },
    created_i2tor_2 -> started_i2tor_2 { sync sync_i2tor[p]!; },
    started_i2tor_2 -> awaited_i2tor_2 { sync sync_i2tor[p]?; },
    awaited_i2tor_2 -> created_i2tor_3 { assign p = make_i2tor(); },
    created_i2tor_3 -> started_i2tor_3 { sync sync_i2tor[p]!; },
    started_i2tor_3 -> awaited_i2tor_3 { sync sync_i2tor[p]?; },
    awaited_i2tor_3 -> created_i2tor_4 { assign p = make_i2tor(); },
    created_i2tor_4 -> started_i2tor_4 { sync sync_i2tor[p]!; },
    started_i2tor_4 -> awaited_i2tor_4 { sync sync_i2tor[p]?; },
    awaited_i2tor_4 -> created_i2tor_5 { assign p = make_i2tor(); },
    created_i2tor_5 -> started_i2tor_5 { sync sync_i2tor[p]!; },
    started_i2tor_5 -> awaited_i2tor_5 { sync sync_i2tor[p]?; },
    awaited_i2tor_5 -> created_i2tor_6 { assign p = make_i2tor(); },
    created_i2tor_6 -> started_i2tor_6 { sync sync_i2tor[p]!; },
    started_i2tor_6 -> awaited_i2tor_6 { sync sync_i2tor[p]?; },
    awaited_i2tor_6 -> created_i2tor_7 { assign p = make_i2tor(); },
    created_i2tor_7 -> started_i2tor_7 { sync sync_i2tor[p]!; },
    started_i2tor_7 -> awaited_i2tor_7 { sync sync_i2tor[p]?; },
    awaited_i2tor_7 -> created_i2tor_8 { assign p = make_i2tor(); },
    created_i2tor_8 -> started_i2tor_8 { sync sync_i2tor[p]!; },
    started_i2tor_8 -> awaited_i2tor_8 { sync sync_i2tor[p]?; },
    awaited_i2tor_8 -> created_checka_3 { assign p = make_checka(); },
    created_checka_3 -> started_checka_3 { sync sync_checka[p]!; },
    started_checka_3 -> awaited_checka_3 { sync sync_checka[p]?; },
    awaited_checka_3 -> created_neg_4 { assign p = make_neg(); },
    created_neg_4 -> started_neg_4 { sync sync_neg[p]!; },
    started_neg_4 -> awaited_neg_4 { sync sync_neg[p]?; },
    awaited_neg_4 -> created_MonSubst_2 { assign p = make_MonSubst(); },
    created_MonSubst_2 -> started_MonSubst_2 { sync sync_MonSubst[p]!; },
    started_MonSubst_2 -> awaited_MonSubst_2 { sync sync_MonSubst[p]?; },
    awaited_MonSubst_2 -> created_Integ_3 { assign p = make_Integ(); },
    created_Integ_3 -> started_Integ_3 { sync sync_Integ[p]!; },
    started_Integ_3 -> awaited_Integ_3 { sync sync_Integ[p]?; },
    enter_loop_cond_3 -> exit_loop_cond_3 { },
    enter_if_1 -> exit_if_1 { },
    enter_else_1 -> created_i2tor_9 { assign p = make_i2tor(); },
    created_i2tor_9 -> started_i2tor_9 { sync sync_i2tor[p]!; },
    started_i2tor_9 -> awaited_i2tor_9 { sync sync_i2tor[p]?; },
    awaited_i2tor_9 -> exit_if_1 { },
    enter_loop_body_3 -> enter_if_1 { },
    enter_loop_body_3 -> enter_else_1 { },
    exit_if_1 -> exit_loop_body_3 { },
    awaited_Integ_3 -> enter_loop_cond_3 { },
    exit_loop_cond_3 -> enter_loop_body_3 { },
    exit_loop_cond_3 -> exit_loop_3 { },
    exit_loop_body_3 -> enter_loop_cond_3 { },
    exit_loop_3 -> created_checka_4 { assign p = make_checka(); },
    created_checka_4 -> started_checka_4 { sync sync_checka[p]!; },
    started_checka_4 -> awaited_checka_4 { sync sync_checka[p]?; },
    awaited_checka_4 -> exit_if_0 { },
    awaited_Init_0 -> enter_if_0 { },
    awaited_Init_0 -> enter_else_0 { },
    exit_if_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process mkPS(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    created_mkdch_0,
    started_mkdch_0,
    awaited_mkdch_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> created_mkdch_0 { assign p = make_mkdch(); },
    created_mkdch_0 -> started_mkdch_0 { sync sync_mkdch[p]!; },
    started_mkdch_0 -> awaited_mkdch_0 { sync sync_mkdch[p]?; },
    awaited_mkdch_0 -> ending { },
    starting -> started { sync async_mkPS[pid]?; assign is_sync = false; },
    starting -> started { sync sync_mkPS[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_mkPS[pid]!; };
}

process mkPS2(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended,
    created_mkdch2_0,
    started_mkdch2_0,
    awaited_mkdch2_0;
init
    starting;
trans
    started -> created_mkdch2_0 { assign p = make_mkdch2(); },
    created_mkdch2_0 -> started_mkdch2_0 { sync sync_mkdch2[p]!; },
    started_mkdch2_0 -> awaited_mkdch2_0 { sync sync_mkdch2[p]?; },
    awaited_mkdch2_0 -> ending { },
    starting -> started { sync async_mkPS2[pid]?; assign is_sync = false; },
    starting -> started { sync sync_mkPS2[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_mkPS2[pid]!; };
}

process mkdch(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var327 = -1;
int cid_var328 = -1;



state
    starting,
    started,
    ending,
    ended,
    made__0,
    made__1;
init
    starting;
trans
    started -> made__0 { assign cid_var327 = make_chan(0); },
    made__0 -> made__1 { assign cid_var328 = make_chan(0); },
    made__1 -> ending { },
    starting -> started { sync async_mkdch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_mkdch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_mkdch[pid]!; };
}

process mkdch2(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    started_mkdch_0,
    awaited_mkdch_0,
    started_mkdch_1,
    starting,
    ended,
    created_mkdch_0,
    created_mkdch_1,
    awaited_mkdch_1;
init
    starting;
trans
    started -> created_mkdch_0 { assign p = make_mkdch(); },
    created_mkdch_0 -> started_mkdch_0 { sync sync_mkdch[p]!; },
    started_mkdch_0 -> awaited_mkdch_0 { sync sync_mkdch[p]?; },
    awaited_mkdch_0 -> created_mkdch_1 { assign p = make_mkdch(); },
    created_mkdch_1 -> started_mkdch_1 { sync sync_mkdch[p]!; },
    started_mkdch_1 -> awaited_mkdch_1 { sync sync_mkdch[p]?; },
    awaited_mkdch_1 -> ending { },
    starting -> started { sync async_mkdch2[pid]?; assign is_sync = false; },
    starting -> started { sync sync_mkdch2[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_mkdch2[pid]!; };
}

process mul(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    created_gcd_1,
    ending,
    started_gcd_0,
    awaited_gcd_0,
    created_gcd_0,
    started_gcd_1,
    awaited_gcd_1,
    starting,
    started,
    ended;
init
    starting;
trans
    started -> created_gcd_0 { assign p = make_gcd(); },
    created_gcd_0 -> started_gcd_0 { sync sync_gcd[p]!; },
    started_gcd_0 -> awaited_gcd_0 { sync sync_gcd[p]?; },
    awaited_gcd_0 -> created_gcd_1 { assign p = make_gcd(); },
    created_gcd_1 -> started_gcd_1 { sync sync_gcd[p]!; },
    started_gcd_1 -> awaited_gcd_1 { sync sync_gcd[p]?; },
    awaited_gcd_1 -> ending { },
    starting -> started { sync async_mul[pid]?; assign is_sync = false; },
    starting -> started { sync sync_mul[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_mul[pid]!; };
}

process neg(int[0, 3] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ending,
    ended,
    created_i2tor_0,
    started_i2tor_0,
    awaited_i2tor_0,
    starting,
    started;
init
    starting;
trans
    started -> created_i2tor_0 { assign p = make_i2tor(); },
    created_i2tor_0 -> started_i2tor_0 { sync sync_i2tor[p]!; },
    started_i2tor_0 -> awaited_i2tor_0 { sync sync_i2tor[p]?; },
    awaited_i2tor_0 -> ending { },
    starting -> started { sync async_neg[pid]?; assign is_sync = false; },
    starting -> started { sync sync_neg[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_neg[pid]!; };
}

process pr(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_else_0,
    starting,
    started,
    ending,
    ended,
    enter_if_0,
    exit_if_0;
init
    starting;
trans
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    exit_if_0 -> ending { },
    starting -> started { sync async_pr[pid]?; assign is_sync = false; },
    starting -> started { sync sync_pr[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_pr[pid]!; };
}

process printn(int[0, 10] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    created_end_0,
    enter_else_0,
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    exit_loop_body_0,
    exit_loop_0,
    ending,
    created_get_0,
    started_get_0,
    exit_if_0,
    starting,
    started_end_0,
    awaited_end_0,
    enter_if_0,
    started,
    enter_loop_body_0,
    awaited_get_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_get_0 { assign p = make_get(); },
    created_get_0 -> started_get_0 { sync sync_get[p]!; },
    started_get_0 -> awaited_get_0 { sync sync_get[p]?; },
    awaited_get_0 -> created_end_0 { assign p = make_end(); },
    created_end_0 -> started_end_0 { sync sync_end[p]!; },
    started_end_0 -> awaited_end_0 { sync sync_end[p]?; },
    enter_if_0 -> exit_if_0 { },
    enter_else_0 -> exit_if_0 { },
    awaited_end_0 -> enter_if_0 { },
    awaited_end_0 -> enter_else_0 { },
    exit_if_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_printn[pid]?; assign is_sync = false; },
    starting -> started { sync sync_printn[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_printn[pid]!; };
}

process put(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    ended,
    starting;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_put[pid]?; assign is_sync = false; },
    starting -> started { sync sync_put[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_put[pid]!; };
}

process repeat(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    exit_loop_0,
    starting,
    started,
    ended,
    enter_loop_cond_0,
    created_put_0,
    started_put_0,
    awaited_put_0,
    ending,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_put_0 { assign p = make_put(); },
    created_put_0 -> started_put_0 { sync sync_put[p]!; },
    started_put_0 -> awaited_put_0 { sync sync_put[p]?; },
    awaited_put_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_repeat[pid]?; assign is_sync = false; },
    starting -> started { sync sync_repeat[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_repeat[pid]!; };
}

process split(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var330_release = -1;



state
    sending_release_0,
    sent_release_0,
    started,
    ended,
    made_release_0,
    created_dosplit_0,
    starting,
    ending,
    started_dosplit_0;
init
    starting;
trans
    started -> made_release_0 { assign cid_var330_release = make_chan(0); },
    made_release_0 -> created_dosplit_0 { assign p = make_dosplit(), arg_cid_var284_wait[p] = cid_var330_release; },
    created_dosplit_0 -> started_dosplit_0 { sync async_dosplit[p]!; },
    started_dosplit_0 -> sending_release_0 { sync sender_trigger[cid_var330_release]!; assign chan_counter[cid_var330_release]++; },
    sending_release_0 -> sent_release_0 { sync sender_confirm[cid_var330_release]?; },
    sent_release_0 -> ending { },
    starting -> started { sync async_split[pid]?; assign is_sync = false; },
    starting -> started { sync sync_split[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_split[pid]!; };
}

process sub(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    ended,
    created_neg_0,
    awaited_neg_0,
    awaited_add_0,
    started,
    ending,
    started_neg_0,
    created_add_0,
    started_add_0;
init
    starting;
trans
    started -> created_neg_0 { assign p = make_neg(); },
    created_neg_0 -> started_neg_0 { sync sync_neg[p]!; },
    started_neg_0 -> awaited_neg_0 { sync sync_neg[p]?; },
    awaited_neg_0 -> created_add_0 { assign p = make_add(); },
    created_add_0 -> started_add_0 { sync sync_add[p]!; },
    started_add_0 -> awaited_add_0 { sync sync_add[p]?; },
    awaited_add_0 -> ending { },
    starting -> started { sync async_sub[pid]?; assign is_sync = false; },
    starting -> started { sync sync_sub[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_sub[pid]!; };
}

Add_00 = Add(0);
Add_01 = Add(1);
Add_02 = Add(2);
Add_03 = Add(3);
Add_04 = Add(4);
Add_05 = Add(5);
Add_06 = Add(6);
Add_07 = Add(7);
Add_08 = Add(8);
Add_09 = Add(9);
Add_10 = Add(10);
Add_11 = Add(11);
Add_12 = Add(12);
Add_13 = Add(13);
Add_14 = Add(14);
Add_15 = Add(15);
Add_16 = Add(16);
Add_17 = Add(17);
Add_18 = Add(18);
Add_19 = Add(19);
Add_func177_00 = Add_func177(0);
Add_func177_01 = Add_func177(1);
Add_func177_02 = Add_func177(2);
Add_func177_03 = Add_func177(3);
Add_func177_04 = Add_func177(4);
Add_func177_05 = Add_func177(5);
Add_func177_06 = Add_func177(6);
Add_func177_07 = Add_func177(7);
Add_func177_08 = Add_func177(8);
Add_func177_09 = Add_func177(9);
Add_func177_10 = Add_func177(10);
Add_func177_11 = Add_func177(11);
Add_func177_12 = Add_func177(12);
Add_func177_13 = Add_func177(13);
Add_func177_14 = Add_func177(14);
Add_func177_15 = Add_func177(15);
Add_func177_16 = Add_func177(16);
Add_func177_17 = Add_func177(17);
Add_func177_18 = Add_func177(18);
Add_func177_19 = Add_func177(19);
Binom_0 = Binom(0);
Binom_func185_0 = Binom_func185(0);
Channel00 = Channel(0);
Channel01 = Channel(1);
Channel02 = Channel(2);
Channel03 = Channel(3);
Channel04 = Channel(4);
Channel05 = Channel(5);
Channel06 = Channel(6);
Channel07 = Channel(7);
Channel08 = Channel(8);
Channel09 = Channel(9);
Channel10 = Channel(10);
Channel11 = Channel(11);
Channel12 = Channel(12);
Channel13 = Channel(13);
Channel14 = Channel(14);
Channel15 = Channel(15);
Channel16 = Channel(16);
Channel17 = Channel(17);
Channel18 = Channel(18);
Channel19 = Channel(19);
Cmul_00 = Cmul(0);
Cmul_01 = Cmul(1);
Cmul_02 = Cmul(2);
Cmul_03 = Cmul(3);
Cmul_04 = Cmul(4);
Cmul_05 = Cmul(5);
Cmul_06 = Cmul(6);
Cmul_07 = Cmul(7);
Cmul_08 = Cmul(8);
Cmul_09 = Cmul(9);
Cmul_10 = Cmul(10);
Cmul_11 = Cmul(11);
Cmul_12 = Cmul(12);
Cmul_13 = Cmul(13);
Cmul_14 = Cmul(14);
Cmul_15 = Cmul(15);
Cmul_16 = Cmul(16);
Cmul_17 = Cmul(17);
Cmul_18 = Cmul(18);
Cmul_19 = Cmul(19);
Cmul_func178_00 = Cmul_func178(0);
Cmul_func178_01 = Cmul_func178(1);
Cmul_func178_02 = Cmul_func178(2);
Cmul_func178_03 = Cmul_func178(3);
Cmul_func178_04 = Cmul_func178(4);
Cmul_func178_05 = Cmul_func178(5);
Cmul_func178_06 = Cmul_func178(6);
Cmul_func178_07 = Cmul_func178(7);
Cmul_func178_08 = Cmul_func178(8);
Cmul_func178_09 = Cmul_func178(9);
Cmul_func178_10 = Cmul_func178(10);
Cmul_func178_11 = Cmul_func178(11);
Cmul_func178_12 = Cmul_func178(12);
Cmul_func178_13 = Cmul_func178(13);
Cmul_func178_14 = Cmul_func178(14);
Cmul_func178_15 = Cmul_func178(15);
Cmul_func178_16 = Cmul_func178(16);
Cmul_func178_17 = Cmul_func178(17);
Cmul_func178_18 = Cmul_func178(18);
Cmul_func178_19 = Cmul_func178(19);
Diff_0 = Diff(0);
Diff_1 = Diff(1);
Diff_func183_0 = Diff_func183(0);
Diff_func183_1 = Diff_func183(1);
Exp_0 = Exp(0);
Init_0 = Init(0);
Integ_0 = Integ(0);
Integ_1 = Integ(1);
Integ_2 = Integ(2);
Integ_func184_0 = Integ_func184(0);
Integ_func184_1 = Integ_func184(1);
Integ_func184_2 = Integ_func184(2);
MonSubst_0 = MonSubst(0);
MonSubst_1 = MonSubst(1);
MonSubst_func188_0 = MonSubst_func188(0);
MonSubst_func188_1 = MonSubst_func188(1);
Mon_0 = Mon(0);
Mon_func180_0 = Mon_func180(0);
Monmul_0 = Monmul(0);
Monmul_func179_0 = Monmul_func179(0);
Mul_00 = Mul(0);
Mul_01 = Mul(1);
Mul_02 = Mul(2);
Mul_03 = Mul(3);
Mul_04 = Mul(4);
Mul_05 = Mul(5);
Mul_06 = Mul(6);
Mul_07 = Mul(7);
Mul_08 = Mul(8);
Mul_09 = Mul(9);
Mul_10 = Mul(10);
Mul_11 = Mul(11);
Mul_12 = Mul(12);
Mul_13 = Mul(13);
Mul_14 = Mul(14);
Mul_15 = Mul(15);
Mul_16 = Mul(16);
Mul_17 = Mul(17);
Mul_18 = Mul(18);
Mul_19 = Mul(19);
Mul_func182_00 = Mul_func182(0);
Mul_func182_01 = Mul_func182(1);
Mul_func182_02 = Mul_func182(2);
Mul_func182_03 = Mul_func182(3);
Mul_func182_04 = Mul_func182(4);
Mul_func182_05 = Mul_func182(5);
Mul_func182_06 = Mul_func182(6);
Mul_func182_07 = Mul_func182(7);
Mul_func182_08 = Mul_func182(8);
Mul_func182_09 = Mul_func182(9);
Mul_func182_10 = Mul_func182(10);
Mul_func182_11 = Mul_func182(11);
Mul_func182_12 = Mul_func182(12);
Mul_func182_13 = Mul_func182(13);
Mul_func182_14 = Mul_func182(14);
Mul_func182_15 = Mul_func182(15);
Mul_func182_16 = Mul_func182(16);
Mul_func182_17 = Mul_func182(17);
Mul_func182_18 = Mul_func182(18);
Mul_func182_19 = Mul_func182(19);
Recip_0 = Recip(0);
Recip_func186_0 = Recip_func186(0);
Rep_0 = Rep(0);
Rep_1 = Rep(1);
Shift_0 = Shift(0);
Shift_func181_0 = Shift_func181(0);
Split_00 = Split(0);
Split_01 = Split(1);
Split_02 = Split(2);
Split_03 = Split(3);
Split_04 = Split(4);
Split_05 = Split(5);
Split_06 = Split(6);
Split_07 = Split(7);
Split_08 = Split(8);
Split_09 = Split(9);
Split_10 = Split(10);
Split_11 = Split(11);
Split_12 = Split(12);
Split_13 = Split(13);
Split_14 = Split(14);
Split_15 = Split(15);
Split_16 = Split(16);
Split_17 = Split(17);
Split_18 = Split(18);
Split_19 = Split(19);
Sub_0 = Sub(0);
Subst_00 = Subst(0);
Subst_01 = Subst(1);
Subst_02 = Subst(2);
Subst_03 = Subst(3);
Subst_04 = Subst(4);
Subst_05 = Subst(5);
Subst_06 = Subst(6);
Subst_07 = Subst(7);
Subst_08 = Subst(8);
Subst_09 = Subst(9);
Subst_10 = Subst(10);
Subst_11 = Subst(11);
Subst_12 = Subst(12);
Subst_13 = Subst(13);
Subst_14 = Subst(14);
Subst_15 = Subst(15);
Subst_16 = Subst(16);
Subst_17 = Subst(17);
Subst_18 = Subst(18);
Subst_19 = Subst(19);
Subst_func187_00 = Subst_func187(0);
Subst_func187_01 = Subst_func187(1);
Subst_func187_02 = Subst_func187(2);
Subst_func187_03 = Subst_func187(3);
Subst_func187_04 = Subst_func187(4);
Subst_func187_05 = Subst_func187(5);
Subst_func187_06 = Subst_func187(6);
Subst_func187_07 = Subst_func187(7);
Subst_func187_08 = Subst_func187(8);
Subst_func187_09 = Subst_func187(9);
Subst_func187_10 = Subst_func187(10);
Subst_func187_11 = Subst_func187(11);
Subst_func187_12 = Subst_func187(12);
Subst_func187_13 = Subst_func187(13);
Subst_func187_14 = Subst_func187(14);
Subst_func187_15 = Subst_func187(15);
Subst_func187_16 = Subst_func187(16);
Subst_func187_17 = Subst_func187(17);
Subst_func187_18 = Subst_func187(18);
Subst_func187_19 = Subst_func187(19);
Xmul_0 = Xmul(0);
add_00 = add(0);
add_01 = add(1);
add_02 = add(2);
add_03 = add(3);
add_04 = add(4);
add_05 = add(5);
add_06 = add(6);
add_07 = add(7);
add_08 = add(8);
add_09 = add(9);
add_10 = add(10);
add_11 = add(11);
add_12 = add(12);
add_13 = add(13);
add_14 = add(14);
add_15 = add(15);
add_16 = add(16);
add_17 = add(17);
add_18 = add(18);
add_19 = add(19);
check_00 = check(0);
check_01 = check(1);
check_02 = check(2);
check_03 = check(3);
check_04 = check(4);
check_05 = check(5);
check_06 = check(6);
check_07 = check(7);
check_08 = check(8);
check_09 = check(9);
check_10 = check(10);
check_11 = check(11);
check_12 = check(12);
check_13 = check(13);
check_14 = check(14);
check_15 = check(15);
check_16 = check(16);
check_17 = check(17);
check_18 = check(18);
check_19 = check(19);
checka_0 = checka(0);
checka_1 = checka(1);
checka_2 = checka(2);
checka_3 = checka(3);
checka_4 = checka(4);
copy_0 = copy(0);
dosplit_00 = dosplit(0);
dosplit_01 = dosplit(1);
dosplit_02 = dosplit(2);
dosplit_03 = dosplit(3);
dosplit_04 = dosplit(4);
dosplit_05 = dosplit(5);
dosplit_06 = dosplit(6);
dosplit_07 = dosplit(7);
dosplit_08 = dosplit(8);
dosplit_09 = dosplit(9);
dosplit_10 = dosplit(10);
dosplit_11 = dosplit(11);
dosplit_12 = dosplit(12);
dosplit_13 = dosplit(13);
dosplit_14 = dosplit(14);
dosplit_15 = dosplit(15);
dosplit_16 = dosplit(16);
dosplit_17 = dosplit(17);
dosplit_18 = dosplit(18);
dosplit_19 = dosplit(19);
end_00 = end(0);
end_01 = end(1);
end_02 = end(2);
end_03 = end(3);
end_04 = end(4);
end_05 = end(5);
end_06 = end(6);
end_07 = end(7);
end_08 = end(8);
end_09 = end(9);
end_10 = end(10);
end_11 = end(11);
end_12 = end(12);
end_13 = end(13);
end_14 = end(14);
end_15 = end(15);
end_16 = end(16);
end_17 = end(17);
end_18 = end(18);
end_19 = end(19);
eq_0 = eq(0);
eval_00 = eval(0);
eval_01 = eval(1);
eval_02 = eval(2);
eval_03 = eval(3);
eval_04 = eval(4);
eval_05 = eval(5);
eval_06 = eval(6);
eval_07 = eval(7);
eval_08 = eval(8);
eval_09 = eval(9);
eval_10 = eval(10);
eval_11 = eval(11);
eval_12 = eval(12);
eval_13 = eval(13);
eval_14 = eval(14);
eval_15 = eval(15);
eval_16 = eval(16);
eval_17 = eval(17);
eval_18 = eval(18);
eval_19 = eval(19);
evaln_0 = evaln(0);
gcd_00 = gcd(0);
gcd_01 = gcd(1);
gcd_02 = gcd(2);
gcd_03 = gcd(3);
gcd_04 = gcd(4);
gcd_05 = gcd(5);
gcd_06 = gcd(6);
gcd_07 = gcd(7);
gcd_08 = gcd(8);
gcd_09 = gcd(9);
gcd_10 = gcd(10);
gcd_11 = gcd(11);
gcd_12 = gcd(12);
gcd_13 = gcd(13);
gcd_14 = gcd(14);
gcd_15 = gcd(15);
gcd_16 = gcd(16);
gcd_17 = gcd(17);
gcd_18 = gcd(18);
gcd_19 = gcd(19);
get2_00 = get2(0);
get2_01 = get2(1);
get2_02 = get2(2);
get2_03 = get2(3);
get2_04 = get2(4);
get2_05 = get2(5);
get2_06 = get2(6);
get2_07 = get2(7);
get2_08 = get2(8);
get2_09 = get2(9);
get2_10 = get2(10);
get2_11 = get2(11);
get2_12 = get2(12);
get2_13 = get2(13);
get2_14 = get2(14);
get2_15 = get2(15);
get2_16 = get2(16);
get2_17 = get2(17);
get2_18 = get2(18);
get2_19 = get2(19);
get_00 = get(0);
get_01 = get(1);
get_02 = get(2);
get_03 = get(3);
get_04 = get(4);
get_05 = get(5);
get_06 = get(6);
get_07 = get(7);
get_08 = get(8);
get_09 = get(9);
get_10 = get(10);
get_11 = get(11);
get_12 = get(12);
get_13 = get(13);
get_14 = get(14);
get_15 = get(15);
get_16 = get(16);
get_17 = get(17);
get_18 = get(18);
get_19 = get(19);
getn_00 = getn(0);
getn_01 = getn(1);
getn_02 = getn(2);
getn_03 = getn(3);
getn_04 = getn(4);
getn_05 = getn(5);
getn_06 = getn(6);
getn_07 = getn(7);
getn_08 = getn(8);
getn_09 = getn(9);
getn_10 = getn(10);
getn_11 = getn(11);
getn_12 = getn(12);
getn_13 = getn(13);
getn_14 = getn(14);
getn_15 = getn(15);
getn_16 = getn(16);
getn_17 = getn(17);
getn_18 = getn(18);
getn_19 = getn(19);
i2tor_00 = i2tor(0);
i2tor_01 = i2tor(1);
i2tor_02 = i2tor(2);
i2tor_03 = i2tor(3);
i2tor_04 = i2tor(4);
i2tor_05 = i2tor(5);
i2tor_06 = i2tor(6);
i2tor_07 = i2tor(7);
i2tor_08 = i2tor(8);
i2tor_09 = i2tor(9);
i2tor_10 = i2tor(10);
i2tor_11 = i2tor(11);
i2tor_12 = i2tor(12);
i2tor_13 = i2tor(13);
i2tor_14 = i2tor(14);
i2tor_15 = i2tor(15);
i2tor_16 = i2tor(16);
i2tor_17 = i2tor(17);
i2tor_18 = i2tor(18);
i2tor_19 = i2tor(19);
inv_0 = inv(0);
itor_00 = itor(0);
itor_01 = itor(1);
itor_02 = itor(2);
itor_03 = itor(3);
itor_04 = itor(4);
itor_05 = itor(5);
itor_06 = itor(6);
itor_07 = itor(7);
itor_08 = itor(8);
itor_09 = itor(9);
itor_10 = itor(10);
itor_11 = itor(11);
itor_12 = itor(12);
itor_13 = itor(13);
itor_14 = itor(14);
itor_15 = itor(15);
itor_16 = itor(16);
itor_17 = itor(17);
itor_18 = itor(18);
itor_19 = itor(19);
mkPS2_0 = mkPS2(0);
mkPS_00 = mkPS(0);
mkPS_01 = mkPS(1);
mkPS_02 = mkPS(2);
mkPS_03 = mkPS(3);
mkPS_04 = mkPS(4);
mkPS_05 = mkPS(5);
mkPS_06 = mkPS(6);
mkPS_07 = mkPS(7);
mkPS_08 = mkPS(8);
mkPS_09 = mkPS(9);
mkPS_10 = mkPS(10);
mkPS_11 = mkPS(11);
mkPS_12 = mkPS(12);
mkPS_13 = mkPS(13);
mkPS_14 = mkPS(14);
mkPS_15 = mkPS(15);
mkPS_16 = mkPS(16);
mkPS_17 = mkPS(17);
mkPS_18 = mkPS(18);
mkPS_19 = mkPS(19);
mkdch2_00 = mkdch2(0);
mkdch2_01 = mkdch2(1);
mkdch2_02 = mkdch2(2);
mkdch2_03 = mkdch2(3);
mkdch2_04 = mkdch2(4);
mkdch2_05 = mkdch2(5);
mkdch2_06 = mkdch2(6);
mkdch2_07 = mkdch2(7);
mkdch2_08 = mkdch2(8);
mkdch2_09 = mkdch2(9);
mkdch2_10 = mkdch2(10);
mkdch2_11 = mkdch2(11);
mkdch2_12 = mkdch2(12);
mkdch2_13 = mkdch2(13);
mkdch2_14 = mkdch2(14);
mkdch2_15 = mkdch2(15);
mkdch2_16 = mkdch2(16);
mkdch2_17 = mkdch2(17);
mkdch2_18 = mkdch2(18);
mkdch2_19 = mkdch2(19);
mkdch_00 = mkdch(0);
mkdch_01 = mkdch(1);
mkdch_02 = mkdch(2);
mkdch_03 = mkdch(3);
mkdch_04 = mkdch(4);
mkdch_05 = mkdch(5);
mkdch_06 = mkdch(6);
mkdch_07 = mkdch(7);
mkdch_08 = mkdch(8);
mkdch_09 = mkdch(9);
mkdch_10 = mkdch(10);
mkdch_11 = mkdch(11);
mkdch_12 = mkdch(12);
mkdch_13 = mkdch(13);
mkdch_14 = mkdch(14);
mkdch_15 = mkdch(15);
mkdch_16 = mkdch(16);
mkdch_17 = mkdch(17);
mkdch_18 = mkdch(18);
mkdch_19 = mkdch(19);
mul_00 = mul(0);
mul_01 = mul(1);
mul_02 = mul(2);
mul_03 = mul(3);
mul_04 = mul(4);
mul_05 = mul(5);
mul_06 = mul(6);
mul_07 = mul(7);
mul_08 = mul(8);
mul_09 = mul(9);
mul_10 = mul(10);
mul_11 = mul(11);
mul_12 = mul(12);
mul_13 = mul(13);
mul_14 = mul(14);
mul_15 = mul(15);
mul_16 = mul(16);
mul_17 = mul(17);
mul_18 = mul(18);
mul_19 = mul(19);
neg_0 = neg(0);
neg_1 = neg(1);
neg_2 = neg(2);
neg_3 = neg(3);
pr_0 = pr(0);
printn_00 = printn(0);
printn_01 = printn(1);
printn_02 = printn(2);
printn_03 = printn(3);
printn_04 = printn(4);
printn_05 = printn(5);
printn_06 = printn(6);
printn_07 = printn(7);
printn_08 = printn(8);
printn_09 = printn(9);
printn_10 = printn(10);
put_00 = put(0);
put_01 = put(1);
put_02 = put(2);
put_03 = put(3);
put_04 = put(4);
put_05 = put(5);
put_06 = put(6);
put_07 = put(7);
put_08 = put(8);
put_09 = put(9);
put_10 = put(10);
put_11 = put(11);
put_12 = put(12);
put_13 = put(13);
put_14 = put(14);
put_15 = put(15);
put_16 = put(16);
put_17 = put(17);
put_18 = put(18);
put_19 = put(19);
repeat_0 = repeat(0);
repeat_1 = repeat(1);
split_00 = split(0);
split_01 = split(1);
split_02 = split(2);
split_03 = split(3);
split_04 = split(4);
split_05 = split(5);
split_06 = split(6);
split_07 = split(7);
split_08 = split(8);
split_09 = split(9);
split_10 = split(10);
split_11 = split(11);
split_12 = split(12);
split_13 = split(13);
split_14 = split(14);
split_15 = split(15);
split_16 = split(16);
split_17 = split(17);
split_18 = split(18);
split_19 = split(19);
sub_0 = sub(0);
system Add_00, Add_01, Add_02, Add_03, Add_04, Add_05, Add_06, Add_07, Add_08, Add_09, Add_10, Add_11, Add_12, Add_13, Add_14, Add_15, Add_16, Add_17, Add_18, Add_19, Add_func177_00, Add_func177_01, Add_func177_02, Add_func177_03, Add_func177_04, Add_func177_05, Add_func177_06, Add_func177_07, Add_func177_08, Add_func177_09, Add_func177_10, Add_func177_11, Add_func177_12, Add_func177_13, Add_func177_14, Add_func177_15, Add_func177_16, Add_func177_17, Add_func177_18, Add_func177_19, Binom_0, Binom_func185_0, Channel00, Channel01, Channel02, Channel03, Channel04, Channel05, Channel06, Channel07, Channel08, Channel09, Channel10, Channel11, Channel12, Channel13, Channel14, Channel15, Channel16, Channel17, Channel18, Channel19, Cmul_00, Cmul_01, Cmul_02, Cmul_03, Cmul_04, Cmul_05, Cmul_06, Cmul_07, Cmul_08, Cmul_09, Cmul_10, Cmul_11, Cmul_12, Cmul_13, Cmul_14, Cmul_15, Cmul_16, Cmul_17, Cmul_18, Cmul_19, Cmul_func178_00, Cmul_func178_01, Cmul_func178_02, Cmul_func178_03, Cmul_func178_04, Cmul_func178_05, Cmul_func178_06, Cmul_func178_07, Cmul_func178_08, Cmul_func178_09, Cmul_func178_10, Cmul_func178_11, Cmul_func178_12, Cmul_func178_13, Cmul_func178_14, Cmul_func178_15, Cmul_func178_16, Cmul_func178_17, Cmul_func178_18, Cmul_func178_19, Diff_0, Diff_1, Diff_func183_0, Diff_func183_1, Exp_0, Init_0, Integ_0, Integ_1, Integ_2, Integ_func184_0, Integ_func184_1, Integ_func184_2, MonSubst_0, MonSubst_1, MonSubst_func188_0, MonSubst_func188_1, Mon_0, Mon_func180_0, Monmul_0, Monmul_func179_0, Mul_00, Mul_01, Mul_02, Mul_03, Mul_04, Mul_05, Mul_06, Mul_07, Mul_08, Mul_09, Mul_10, Mul_11, Mul_12, Mul_13, Mul_14, Mul_15, Mul_16, Mul_17, Mul_18, Mul_19, Mul_func182_00, Mul_func182_01, Mul_func182_02, Mul_func182_03, Mul_func182_04, Mul_func182_05, Mul_func182_06, Mul_func182_07, Mul_func182_08, Mul_func182_09, Mul_func182_10, Mul_func182_11, Mul_func182_12, Mul_func182_13, Mul_func182_14, Mul_func182_15, Mul_func182_16, Mul_func182_17, Mul_func182_18, Mul_func182_19, Recip_0, Recip_func186_0, Rep_0, Rep_1, Shift_0, Shift_func181_0, Split_00, Split_01, Split_02, Split_03, Split_04, Split_05, Split_06, Split_07, Split_08, Split_09, Split_10, Split_11, Split_12, Split_13, Split_14, Split_15, Split_16, Split_17, Split_18, Split_19, Sub_0, Subst_00, Subst_01, Subst_02, Subst_03, Subst_04, Subst_05, Subst_06, Subst_07, Subst_08, Subst_09, Subst_10, Subst_11, Subst_12, Subst_13, Subst_14, Subst_15, Subst_16, Subst_17, Subst_18, Subst_19, Subst_func187_00, Subst_func187_01, Subst_func187_02, Subst_func187_03, Subst_func187_04, Subst_func187_05, Subst_func187_06, Subst_func187_07, Subst_func187_08, Subst_func187_09, Subst_func187_10, Subst_func187_11, Subst_func187_12, Subst_func187_13, Subst_func187_14, Subst_func187_15, Subst_func187_16, Subst_func187_17, Subst_func187_18, Subst_func187_19, Xmul_0, add_00, add_01, add_02, add_03, add_04, add_05, add_06, add_07, add_08, add_09, add_10, add_11, add_12, add_13, add_14, add_15, add_16, add_17, add_18, add_19, check_00, check_01, check_02, check_03, check_04, check_05, check_06, check_07, check_08, check_09, check_10, check_11, check_12, check_13, check_14, check_15, check_16, check_17, check_18, check_19, checka_0, checka_1, checka_2, checka_3, checka_4, copy_0, dosplit_00, dosplit_01, dosplit_02, dosplit_03, dosplit_04, dosplit_05, dosplit_06, dosplit_07, dosplit_08, dosplit_09, dosplit_10, dosplit_11, dosplit_12, dosplit_13, dosplit_14, dosplit_15, dosplit_16, dosplit_17, dosplit_18, dosplit_19, end_00, end_01, end_02, end_03, end_04, end_05, end_06, end_07, end_08, end_09, end_10, end_11, end_12, end_13, end_14, end_15, end_16, end_17, end_18, end_19, eq_0, eval_00, eval_01, eval_02, eval_03, eval_04, eval_05, eval_06, eval_07, eval_08, eval_09, eval_10, eval_11, eval_12, eval_13, eval_14, eval_15, eval_16, eval_17, eval_18, eval_19, evaln_0, gcd_00, gcd_01, gcd_02, gcd_03, gcd_04, gcd_05, gcd_06, gcd_07, gcd_08, gcd_09, gcd_10, gcd_11, gcd_12, gcd_13, gcd_14, gcd_15, gcd_16, gcd_17, gcd_18, gcd_19, get2_00, get2_01, get2_02, get2_03, get2_04, get2_05, get2_06, get2_07, get2_08, get2_09, get2_10, get2_11, get2_12, get2_13, get2_14, get2_15, get2_16, get2_17, get2_18, get2_19, get_00, get_01, get_02, get_03, get_04, get_05, get_06, get_07, get_08, get_09, get_10, get_11, get_12, get_13, get_14, get_15, get_16, get_17, get_18, get_19, getn_00, getn_01, getn_02, getn_03, getn_04, getn_05, getn_06, getn_07, getn_08, getn_09, getn_10, getn_11, getn_12, getn_13, getn_14, getn_15, getn_16, getn_17, getn_18, getn_19, i2tor_00, i2tor_01, i2tor_02, i2tor_03, i2tor_04, i2tor_05, i2tor_06, i2tor_07, i2tor_08, i2tor_09, i2tor_10, i2tor_11, i2tor_12, i2tor_13, i2tor_14, i2tor_15, i2tor_16, i2tor_17, i2tor_18, i2tor_19, inv_0, itor_00, itor_01, itor_02, itor_03, itor_04, itor_05, itor_06, itor_07, itor_08, itor_09, itor_10, itor_11, itor_12, itor_13, itor_14, itor_15, itor_16, itor_17, itor_18, itor_19, main, mkPS2_0, mkPS_00, mkPS_01, mkPS_02, mkPS_03, mkPS_04, mkPS_05, mkPS_06, mkPS_07, mkPS_08, mkPS_09, mkPS_10, mkPS_11, mkPS_12, mkPS_13, mkPS_14, mkPS_15, mkPS_16, mkPS_17, mkPS_18, mkPS_19, mkdch2_00, mkdch2_01, mkdch2_02, mkdch2_03, mkdch2_04, mkdch2_05, mkdch2_06, mkdch2_07, mkdch2_08, mkdch2_09, mkdch2_10, mkdch2_11, mkdch2_12, mkdch2_13, mkdch2_14, mkdch2_15, mkdch2_16, mkdch2_17, mkdch2_18, mkdch2_19, mkdch_00, mkdch_01, mkdch_02, mkdch_03, mkdch_04, mkdch_05, mkdch_06, mkdch_07, mkdch_08, mkdch_09, mkdch_10, mkdch_11, mkdch_12, mkdch_13, mkdch_14, mkdch_15, mkdch_16, mkdch_17, mkdch_18, mkdch_19, mul_00, mul_01, mul_02, mul_03, mul_04, mul_05, mul_06, mul_07, mul_08, mul_09, mul_10, mul_11, mul_12, mul_13, mul_14, mul_15, mul_16, mul_17, mul_18, mul_19, neg_0, neg_1, neg_2, neg_3, pr_0, printn_00, printn_01, printn_02, printn_03, printn_04, printn_05, printn_06, printn_07, printn_08, printn_09, printn_10, put_00, put_01, put_02, put_03, put_04, put_05, put_06, put_07, put_08, put_09, put_10, put_11, put_12, put_13, put_14, put_15, put_16, put_17, put_18, put_19, repeat_0, repeat_1, split_00, split_01, split_02, split_03, split_04, split_05, split_06, split_07, split_08, split_09, split_10, split_11, split_12, split_13, split_14, split_15, split_16, split_17, split_18, split_19, sub_0;

