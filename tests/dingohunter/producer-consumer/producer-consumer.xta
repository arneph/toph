// Place global declarations here.
int cid_var333_done = -1;
int cid_var334_msgs = -1;
int fid_var335_produce = 190;
int fid_var336_consume = 191;
int fid_var337_main = 189;
int produce_count = 0;
chan async_produce[1];
chan sync_produce[1];

int consume_count = 0;
chan async_consume[1];
chan sync_consume[1];

int chan_count = 0;
int chan_counter[2];
int chan_buffer[2];
chan sender_trigger[2];
chan sender_confirm[2];
chan receiver_trigger[2];
chan receiver_confirm[2];
chan close[2];

int make_produce() {
	int pid = produce_count;
	produce_count++;
	return pid;
}

int make_consume() {
	int pid = consume_count;
	consume_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 1] i) {
// Place local declarations here.


state
    new_sender,
    confirming_closed,
    bad,
    idle,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    closed;
commit
    new_sender,
    confirming_closed,
    confirming_a,
    new_receiver,
    confirming_b,
    closing;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process consume(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    enter_loop_cond_0,
    exit_loop_cond_0,
    exit_loop_0,
    receiving_msgs_0,
    received_msgs_0,
    starting,
    started,
    ending,
    ended,
    enter_loop_body_0,
    exit_loop_body_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_msgs_0 { sync receiver_trigger[cid_var334_msgs]!; assign chan_counter[cid_var334_msgs]--; },
    receiving_msgs_0 -> received_msgs_0 { sync receiver_confirm[cid_var334_msgs]?; },
    received_msgs_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_consume[pid]?; assign is_sync = false; },
    starting -> started { sync sync_consume[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_consume[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ended,
    created_produce_0,
    started_produce_0,
    receiving_done_0,
    received_done_0,
    starting,
    ending,
    made_done_0,
    made_msgs_0,
    created_consume_0,
    started_consume_0;
init
    starting;
trans
    started -> made_done_0 { assign cid_var333_done = make_chan(0); },
    made_done_0 -> made_msgs_0 { assign cid_var334_msgs = make_chan(0); },
    made_msgs_0 -> created_produce_0 { assign p = make_produce(); },
    created_produce_0 -> started_produce_0 { sync async_produce[p]!; },
    started_produce_0 -> created_consume_0 { assign p = make_consume(); },
    created_consume_0 -> started_consume_0 { sync async_consume[p]!; },
    started_consume_0 -> receiving_done_0 { sync receiver_trigger[cid_var333_done]!; assign chan_counter[cid_var333_done]--; },
    receiving_done_0 -> received_done_0 { sync receiver_confirm[cid_var333_done]?; },
    received_done_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process produce(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    exit_loop_body_0,
    exit_loop_0,
    sending_msgs_0,
    started,
    ending,
    sent_msgs_0,
    sending_done_0,
    sent_done_0,
    starting,
    enter_loop_body_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_msgs_0 { sync sender_trigger[cid_var334_msgs]!; assign chan_counter[cid_var334_msgs]++; },
    sending_msgs_0 -> sent_msgs_0 { sync sender_confirm[cid_var334_msgs]?; },
    sent_msgs_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> sending_done_0 { sync sender_trigger[cid_var333_done]!; assign chan_counter[cid_var333_done]++; },
    sending_done_0 -> sent_done_0 { sync sender_confirm[cid_var333_done]?; },
    sent_done_0 -> ending { },
    starting -> started { sync async_produce[pid]?; assign is_sync = false; },
    starting -> started { sync sync_produce[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_produce[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
consume_0 = consume(0);
produce_0 = produce(0);
system Channel0, Channel1, consume_0, main, produce_0;

