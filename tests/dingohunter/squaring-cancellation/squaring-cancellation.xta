// Place global declarations here.
int fid_var383_gen = 217;
int fid_var385_sq = 218;
int fid_var388_merge = 219;
int fid_var390_main = 216;
int gen_count = 0;
chan async_gen[1];
chan sync_gen[1];
int arg_cid_var384_done[1];
int res_gen_0_Chan[1];

int sq_count = 0;
chan async_sq[2];
chan sync_sq[2];
int arg_cid_var386_done[2];
int arg_cid_var387_in[2];
int res_sq_0_Chan[2];

int merge_count = 0;
chan async_merge[1];
chan sync_merge[1];
int arg_cid_var389_done[1];
int res_merge_0_Chan[1];

int gen_func220_count = 0;
chan async_gen_func220[1];
chan sync_gen_func220[1];
int par_pid_gen_func220[1];

int sq_func221_count = 0;
chan async_sq_func221[2];
chan sync_sq_func221[2];
int par_pid_sq_func221[2];

int merge_func222_count = 0;
chan async_merge_func222[1];
chan sync_merge_func222[1];
int par_pid_merge_func222[1];
int arg_cid_var395_c[1];

int merge_func223_count = 0;
chan async_merge_func223[1];
chan sync_merge_func223[1];
int par_pid_merge_func223[1];

int cid_var384_done[1];
int cid_var391_out[1];

int cid_var386_done[2];
int cid_var387_in[2];
int cid_var392_out[2];

int cid_var389_done[1];
int cid_var393_out[1];

int chan_count = 0;
int chan_counter[5];
int chan_buffer[5];
chan sender_trigger[5];
chan sender_confirm[5];
chan receiver_trigger[5];
chan receiver_confirm[5];
chan close[5];

int make_gen() {
	int pid = gen_count;
	gen_count++;
	return pid;
}

int make_sq() {
	int pid = sq_count;
	sq_count++;
	return pid;
}

int make_merge() {
	int pid = merge_count;
	merge_count++;
	return pid;
}

int make_gen_func220(int par_pid) {
	int pid = gen_func220_count;
	gen_func220_count++;
	par_pid_gen_func220[pid] = par_pid;
	return pid;
}

int make_sq_func221(int par_pid) {
	int pid = sq_func221_count;
	sq_func221_count++;
	par_pid_sq_func221[pid] = par_pid;
	return pid;
}

int make_merge_func222(int par_pid) {
	int pid = merge_func222_count;
	merge_func222_count++;
	par_pid_merge_func222[pid] = par_pid;
	return pid;
}

int make_merge_func223(int par_pid) {
	int pid = merge_func223_count;
	merge_func223_count++;
	par_pid_merge_func223[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 4] i) {
// Place local declarations here.


state
    closed,
    idle,
    new_sender,
    closing,
    confirming_closed,
    bad,
    confirming_a,
    new_receiver,
    confirming_b;
commit
    confirming_a,
    new_receiver,
    confirming_b,
    confirming_closed,
    new_sender,
    closing;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process gen(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var384_done[pid] = -1;
    cid_var391_out[pid] = -1;
    cid_var384_done[pid] = arg_cid_var384_done[pid];
}



state
    ended,
    made_out_0,
    created_gen_func220_0,
    started_gen_func220_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> made_out_0 { assign cid_var391_out[pid] = make_chan(0); },
    made_out_0 -> created_gen_func220_0 { assign p = make_gen_func220(pid); },
    created_gen_func220_0 -> started_gen_func220_0 { sync async_gen_func220[p]!; },
    started_gen_func220_0 -> ending { assign res_gen_0_Chan[pid] = cid_var391_out[pid]; },
    starting -> started { sync async_gen[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_gen[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_gen[pid]!; };
}

process gen_func220(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    ended,
    select_pass_2_0,
    select_case_2_trigger_0,
    select_case_2_enter_0,
    select_pass_1_0,
    starting,
    started,
    exit_loop_0,
    select_case_1_enter_0,
    select_end_0,
    ending,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    select_case_1_trigger_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var391_out[par_pid_gen_func220[pid]]]++, chan_counter[cid_var384_done[par_pid_gen_func220[pid]]]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var391_out[par_pid_gen_func220[pid]]] < 0 || chan_counter[cid_var391_out[par_pid_gen_func220[pid]]] <= chan_buffer[cid_var391_out[par_pid_gen_func220[pid]]]; sync sender_trigger[cid_var391_out[par_pid_gen_func220[pid]]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var391_out[par_pid_gen_func220[pid]]]?; assign chan_counter[cid_var384_done[par_pid_gen_func220[pid]]]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var384_done[par_pid_gen_func220[pid]]] < 0 || chan_counter[cid_var384_done[par_pid_gen_func220[pid]]] >= 0; sync receiver_trigger[cid_var384_done[par_pid_gen_func220[pid]]]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var384_done[par_pid_gen_func220[pid]]]?; assign chan_counter[cid_var391_out[par_pid_gen_func220[pid]]]--; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var391_out[par_pid_gen_func220[pid]]] < 0 || chan_counter[cid_var391_out[par_pid_gen_func220[pid]]] <= chan_buffer[cid_var391_out[par_pid_gen_func220[pid]]]) && !(chan_buffer[cid_var384_done[par_pid_gen_func220[pid]]] < 0 || chan_counter[cid_var384_done[par_pid_gen_func220[pid]]] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var391_out[par_pid_gen_func220[pid]]]?; assign chan_counter[cid_var384_done[par_pid_gen_func220[pid]]]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var384_done[par_pid_gen_func220[pid]]]?; assign chan_counter[cid_var391_out[par_pid_gen_func220[pid]]]--; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_gen_func220[pid]?; assign is_sync = false; },
    starting -> started { sync sync_gen_func220[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_gen_func220[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var397_done = -1;
int cid_var398_in = -1;
int cid_var399_c1 = -1;
int cid_var400_c2 = -1;
int cid_var401_out = -1;



state
    created_sq_1,
    started_merge_0,
    starting,
    ending,
    made_done_0,
    awaited_gen_0,
    started_sq_0,
    awaited_sq_1,
    created_merge_0,
    received_out_0,
    ended,
    started_gen_0,
    created_sq_0,
    started_sq_1,
    receiving_out_0,
    started,
    created_gen_0,
    awaited_sq_0,
    awaited_merge_0;
init
    starting;
trans
    started -> made_done_0 { assign cid_var397_done = make_chan(0); },
    made_done_0 -> created_gen_0 { assign p = make_gen(), arg_cid_var384_done[p] = cid_var397_done; },
    created_gen_0 -> started_gen_0 { sync sync_gen[p]!; },
    started_gen_0 -> awaited_gen_0 { sync sync_gen[p]?; assign cid_var398_in = res_gen_0_Chan[p]; },
    awaited_gen_0 -> created_sq_0 { assign p = make_sq(), arg_cid_var386_done[p] = cid_var397_done, arg_cid_var387_in[p] = cid_var398_in; },
    created_sq_0 -> started_sq_0 { sync sync_sq[p]!; },
    started_sq_0 -> awaited_sq_0 { sync sync_sq[p]?; assign cid_var399_c1 = res_sq_0_Chan[p]; },
    awaited_sq_0 -> created_sq_1 { assign p = make_sq(), arg_cid_var386_done[p] = cid_var397_done, arg_cid_var387_in[p] = cid_var398_in; },
    created_sq_1 -> started_sq_1 { sync sync_sq[p]!; },
    started_sq_1 -> awaited_sq_1 { sync sync_sq[p]?; assign cid_var400_c2 = res_sq_0_Chan[p]; },
    awaited_sq_1 -> created_merge_0 { assign p = make_merge(), arg_cid_var389_done[p] = cid_var397_done; },
    created_merge_0 -> started_merge_0 { sync sync_merge[p]!; },
    started_merge_0 -> awaited_merge_0 { sync sync_merge[p]?; assign cid_var401_out = res_merge_0_Chan[p]; },
    awaited_merge_0 -> receiving_out_0 { sync receiver_trigger[cid_var401_out]!; assign chan_counter[cid_var401_out]--; },
    receiving_out_0 -> received_out_0 { sync receiver_confirm[cid_var401_out]?; },
    received_out_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process merge(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int fid_var396 = 222;
int fid_var394_output = -1;

void initialize() {
    cid_var389_done[pid] = -1;
    cid_var393_out[pid] = -1;
    cid_var389_done[pid] = arg_cid_var389_done[pid];
}



state
    started,
    made_out_0,
    assigned_fid_var394_output_0,
    enter_loop_cond_0,
    exit_loop_body_0,
    started_merge_func223_0,
    starting,
    ending,
    ended,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0,
    created_merge_func223_0;
init
    starting;
trans
    started -> made_out_0 { assign cid_var393_out[pid] = make_chan(0); },
    made_out_0 -> assigned_fid_var394_output_0 { assign fid_var394_output = fid_var396; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    assigned_fid_var394_output_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> created_merge_func223_0 { assign p = make_merge_func223(pid); },
    created_merge_func223_0 -> started_merge_func223_0 { sync async_merge_func223[p]!; },
    started_merge_func223_0 -> ending { assign res_merge_0_Chan[pid] = cid_var393_out[pid]; },
    starting -> started { sync async_merge[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_merge[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_merge[pid]!; };
}

process merge_func222(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var395_c = -1;

void initialize() {
    cid_var395_c = arg_cid_var395_c[pid];
}



state
    range_receiving_cid_var395_c_0,
    range_received_cid_var395_c_0,
    enter_loop_body_0,
    select_pass_2_0,
    range_enter_0,
    exit_loop_0,
    select_case_1_enter_0,
    select_case_2_enter_0,
    select_case_1_trigger_0,
    select_case_2_trigger_0,
    started,
    ending,
    ended,
    exit_loop_body_0,
    select_end_0,
    select_pass_1_0,
    starting;
commit
    select_pass_1_0,
    range_received_cid_var395_c_0;
init
    starting;
trans
    range_enter_0 -> range_receiving_cid_var395_c_0 { sync receiver_trigger[cid_var395_c]!; assign chan_counter[cid_var395_c]--, ok = chan_counter[cid_var395_c] >= 0; },
    range_receiving_cid_var395_c_0 -> range_received_cid_var395_c_0 { sync receiver_confirm[cid_var395_c]?; },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var393_out[par_pid_merge_func222[pid]]]++, chan_counter[cid_var389_done[par_pid_merge_func222[pid]]]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var393_out[par_pid_merge_func222[pid]]] < 0 || chan_counter[cid_var393_out[par_pid_merge_func222[pid]]] <= chan_buffer[cid_var393_out[par_pid_merge_func222[pid]]]; sync sender_trigger[cid_var393_out[par_pid_merge_func222[pid]]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var393_out[par_pid_merge_func222[pid]]]?; assign chan_counter[cid_var389_done[par_pid_merge_func222[pid]]]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var389_done[par_pid_merge_func222[pid]]] < 0 || chan_counter[cid_var389_done[par_pid_merge_func222[pid]]] >= 0; sync receiver_trigger[cid_var389_done[par_pid_merge_func222[pid]]]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var389_done[par_pid_merge_func222[pid]]]?; assign chan_counter[cid_var393_out[par_pid_merge_func222[pid]]]--; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var393_out[par_pid_merge_func222[pid]]] < 0 || chan_counter[cid_var393_out[par_pid_merge_func222[pid]]] <= chan_buffer[cid_var393_out[par_pid_merge_func222[pid]]]) && !(chan_buffer[cid_var389_done[par_pid_merge_func222[pid]]] < 0 || chan_counter[cid_var389_done[par_pid_merge_func222[pid]]] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var393_out[par_pid_merge_func222[pid]]]?; assign chan_counter[cid_var389_done[par_pid_merge_func222[pid]]]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var389_done[par_pid_merge_func222[pid]]]?; assign chan_counter[cid_var393_out[par_pid_merge_func222[pid]]]--; },
    select_end_0 -> exit_loop_body_0 { },
    started -> range_enter_0 { },
    range_received_cid_var395_c_0 -> enter_loop_body_0 { guard chan_buffer[cid_var395_c] >= 0 || ok; },
    range_received_cid_var395_c_0 -> exit_loop_0 { guard chan_buffer[cid_var395_c] < 0 && !ok; },
    exit_loop_body_0 -> range_enter_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_merge_func222[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_merge_func222[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_merge_func222[pid]!; };
}

process merge_func223(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    started,
    ending,
    ended,
    closed_out_0,
    starting;
init
    starting;
trans
    started -> closed_out_0 { sync close[cid_var393_out[par_pid_merge_func223[pid]]]!; },
    closed_out_0 -> ending { },
    starting -> started { sync async_merge_func223[pid]?; assign is_sync = false; },
    starting -> started { sync sync_merge_func223[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_merge_func223[pid]!; };
}

process sq(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var386_done[pid] = -1;
    cid_var387_in[pid] = -1;
    cid_var392_out[pid] = -1;
    cid_var386_done[pid] = arg_cid_var386_done[pid];
    cid_var387_in[pid] = arg_cid_var387_in[pid];
}



state
    created_sq_func221_0,
    started_sq_func221_0,
    starting,
    started,
    ending,
    ended,
    made_out_0;
init
    starting;
trans
    started -> made_out_0 { assign cid_var392_out[pid] = make_chan(0); },
    made_out_0 -> created_sq_func221_0 { assign p = make_sq_func221(pid); },
    created_sq_func221_0 -> started_sq_func221_0 { sync async_sq_func221[p]!; },
    started_sq_func221_0 -> ending { assign res_sq_0_Chan[pid] = cid_var392_out[pid]; },
    starting -> started { sync async_sq[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_sq[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_sq[pid]!; };
}

process sq_func221(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    range_received_cid_var387_in_0,
    exit_loop_body_0,
    select_pass_1_0,
    ending,
    range_enter_0,
    ended,
    enter_loop_body_0,
    exit_loop_0,
    select_case_2_enter_0,
    starting,
    started,
    select_case_1_trigger_0,
    select_case_2_trigger_0,
    select_end_0,
    select_case_1_enter_0,
    range_receiving_cid_var387_in_0,
    select_pass_2_0;
commit
    select_pass_1_0,
    range_received_cid_var387_in_0;
init
    starting;
trans
    range_enter_0 -> range_receiving_cid_var387_in_0 { sync receiver_trigger[cid_var387_in[par_pid_sq_func221[pid]]]!; assign chan_counter[cid_var387_in[par_pid_sq_func221[pid]]]--, ok = chan_counter[cid_var387_in[par_pid_sq_func221[pid]]] >= 0; },
    range_receiving_cid_var387_in_0 -> range_received_cid_var387_in_0 { sync receiver_confirm[cid_var387_in[par_pid_sq_func221[pid]]]?; },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var392_out[par_pid_sq_func221[pid]]]++, chan_counter[cid_var386_done[par_pid_sq_func221[pid]]]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var392_out[par_pid_sq_func221[pid]]] < 0 || chan_counter[cid_var392_out[par_pid_sq_func221[pid]]] <= chan_buffer[cid_var392_out[par_pid_sq_func221[pid]]]; sync sender_trigger[cid_var392_out[par_pid_sq_func221[pid]]]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var392_out[par_pid_sq_func221[pid]]]?; assign chan_counter[cid_var386_done[par_pid_sq_func221[pid]]]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var386_done[par_pid_sq_func221[pid]]] < 0 || chan_counter[cid_var386_done[par_pid_sq_func221[pid]]] >= 0; sync receiver_trigger[cid_var386_done[par_pid_sq_func221[pid]]]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var386_done[par_pid_sq_func221[pid]]]?; assign chan_counter[cid_var392_out[par_pid_sq_func221[pid]]]--; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var392_out[par_pid_sq_func221[pid]]] < 0 || chan_counter[cid_var392_out[par_pid_sq_func221[pid]]] <= chan_buffer[cid_var392_out[par_pid_sq_func221[pid]]]) && !(chan_buffer[cid_var386_done[par_pid_sq_func221[pid]]] < 0 || chan_counter[cid_var386_done[par_pid_sq_func221[pid]]] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync sender_confirm[cid_var392_out[par_pid_sq_func221[pid]]]?; assign chan_counter[cid_var386_done[par_pid_sq_func221[pid]]]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var386_done[par_pid_sq_func221[pid]]]?; assign chan_counter[cid_var392_out[par_pid_sq_func221[pid]]]--; },
    select_end_0 -> exit_loop_body_0 { },
    started -> range_enter_0 { },
    range_received_cid_var387_in_0 -> enter_loop_body_0 { guard chan_buffer[cid_var387_in[par_pid_sq_func221[pid]]] >= 0 || ok; },
    range_received_cid_var387_in_0 -> exit_loop_0 { guard chan_buffer[cid_var387_in[par_pid_sq_func221[pid]]] < 0 && !ok; },
    exit_loop_body_0 -> range_enter_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_sq_func221[pid]?; assign is_sync = false; },
    starting -> started { sync sync_sq_func221[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_sq_func221[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
gen_0 = gen(0);
gen_func220_0 = gen_func220(0);
merge_0 = merge(0);
merge_func222_0 = merge_func222(0);
merge_func223_0 = merge_func223(0);
sq_0 = sq(0);
sq_1 = sq(1);
sq_func221_0 = sq_func221(0);
sq_func221_1 = sq_func221(1);
system Channel0, Channel1, Channel2, Channel3, Channel4, gen_0, gen_func220_0, main, merge_0, merge_func222_0, merge_func223_0, sq_0, sq_1, sq_func221_0, sq_func221_1;

