// Place global declarations here.
int fid_var365_Send = 208;
int fid_var367_Recv = 209;
int fid_var369_main = 207;
int Send_count = 0;
chan async_Send[1];
chan sync_Send[1];
int arg_cid_var366_ch[1];

int Recv_count = 0;
chan async_Recv[1];
chan sync_Recv[1];
int arg_cid_var368_ch[1];

int chan_count = 0;
int chan_counter[1];
int chan_buffer[1];
chan sender_trigger[1];
chan sender_confirm[1];
chan receiver_trigger[1];
chan receiver_confirm[1];
chan close[1];

int make_Send() {
	int pid = Send_count;
	Send_count++;
	return pid;
}

int make_Recv() {
	int pid = Recv_count;
	Recv_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 0] i) {
// Place local declarations here.


state
    closed,
    new_sender,
    confirming_a,
    confirming_b,
    closing,
    idle,
    new_receiver,
    confirming_closed,
    bad;
commit
    new_sender,
    confirming_a,
    confirming_b,
    closing,
    new_receiver,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process Recv(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var368_ch = -1;

void initialize() {
    cid_var368_ch = arg_cid_var368_ch[pid];
}



state
    ended,
    receiving_ch_0,
    received_ch_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> receiving_ch_0 { sync receiver_trigger[cid_var368_ch]!; assign chan_counter[cid_var368_ch]--; },
    receiving_ch_0 -> received_ch_0 { sync receiver_confirm[cid_var368_ch]?; },
    received_ch_0 -> ending { },
    starting -> started { sync async_Recv[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_Recv[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Recv[pid]!; };
}

process Send(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var366_ch = -1;

void initialize() {
    cid_var366_ch = arg_cid_var366_ch[pid];
}



state
    ended,
    sending_ch_0,
    sent_ch_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var366_ch]!; assign chan_counter[cid_var366_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var366_ch]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_Send[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_Send[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_Send[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var370_c = -1;



state
    starting,
    started,
    ending,
    ended,
    made_c_0;
init
    starting;
trans
    started -> made_c_0 { assign cid_var370_c = make_chan(0); },
    made_c_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel0 = Channel(0);
Recv_0 = Recv(0);
Send_0 = Send(0);
system Channel0, Recv_0, Send_0, main;

