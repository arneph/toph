// Place global declarations here.
int fid_var269_fib = 123;
int fid_var270_fibParallel = 124;
int fid_var272_main = 122;
int fib_count = 0;
chan async_fib[20];
chan sync_fib[20];

int fibParallel_count = 0;
chan async_fibParallel[2];
chan sync_fibParallel[2];
int arg_cid_var271_ch[2];

int chan_count = 0;
int chan_counter[2];
int chan_buffer[2];
chan sender_trigger[2];
chan sender_confirm[2];
chan receiver_trigger[2];
chan receiver_confirm[2];
chan close[2];

int make_fib() {
	int pid = fib_count;
	fib_count++;
	return pid;
}

int make_fibParallel() {
	int pid = fibParallel_count;
	fibParallel_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 1] i) {
// Place local declarations here.


state
    idle,
    new_sender,
    confirming_a,
    closed,
    bad,
    new_receiver,
    confirming_b,
    closing,
    confirming_closed;
commit
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process fib(int[0, 19] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    ended,
    created_fib_0,
    awaited_fib_0,
    created_fib_1,
    started,
    ending,
    enter_if_0,
    exit_if_0,
    enter_else_0,
    started_fib_0,
    started_fib_1,
    awaited_fib_1;
init
    starting;
trans
    enter_if_0 -> ending { },
    enter_else_0 -> exit_if_0 { },
    started -> enter_if_0 { },
    started -> enter_else_0 { },
    exit_if_0 -> created_fib_0 { assign p = make_fib(); },
    created_fib_0 -> started_fib_0 { sync sync_fib[p]!; },
    started_fib_0 -> awaited_fib_0 { sync sync_fib[p]?; },
    awaited_fib_0 -> created_fib_1 { assign p = make_fib(); },
    created_fib_1 -> started_fib_1 { sync sync_fib[p]!; },
    started_fib_1 -> awaited_fib_1 { sync sync_fib[p]?; },
    awaited_fib_1 -> ending { },
    starting -> started { sync async_fib[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fib[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fib[pid]!; };
}

process fibParallel(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var271_ch = -1;

void initialize() {
    cid_var271_ch = arg_cid_var271_ch[pid];
}



state
    starting,
    ending,
    created_fib_0,
    sending_ch_0,
    started,
    ended,
    started_fib_0,
    awaited_fib_0,
    sent_ch_0;
init
    starting;
trans
    started -> created_fib_0 { assign p = make_fib(); },
    created_fib_0 -> started_fib_0 { sync sync_fib[p]!; },
    started_fib_0 -> awaited_fib_0 { sync sync_fib[p]?; },
    awaited_fib_0 -> sending_ch_0 { sync sender_trigger[cid_var271_ch]!; assign chan_counter[cid_var271_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var271_ch]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_fibParallel[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fibParallel[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fibParallel[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var273_ch1 = -1;
int cid_var274_ch2 = -1;



state
    received_ch2_0,
    starting,
    made_ch1_0,
    made_ch2_0,
    receiving_ch1_0,
    received_ch1_0,
    ended,
    receiving_ch2_0,
    started_fibParallel_1,
    started,
    ending,
    created_fibParallel_0,
    started_fibParallel_0,
    created_fibParallel_1;
init
    starting;
trans
    started -> made_ch1_0 { assign cid_var273_ch1 = make_chan(0); },
    made_ch1_0 -> made_ch2_0 { assign cid_var274_ch2 = make_chan(0); },
    made_ch2_0 -> created_fibParallel_0 { assign p = make_fibParallel(), arg_cid_var271_ch[p] = cid_var273_ch1; },
    created_fibParallel_0 -> started_fibParallel_0 { sync async_fibParallel[p]!; },
    started_fibParallel_0 -> created_fibParallel_1 { assign p = make_fibParallel(), arg_cid_var271_ch[p] = cid_var274_ch2; },
    created_fibParallel_1 -> started_fibParallel_1 { sync async_fibParallel[p]!; },
    started_fibParallel_1 -> receiving_ch1_0 { sync receiver_trigger[cid_var273_ch1]!; assign chan_counter[cid_var273_ch1]--; },
    receiving_ch1_0 -> received_ch1_0 { sync receiver_confirm[cid_var273_ch1]?; },
    received_ch1_0 -> receiving_ch2_0 { sync receiver_trigger[cid_var274_ch2]!; assign chan_counter[cid_var274_ch2]--; },
    receiving_ch2_0 -> received_ch2_0 { sync receiver_confirm[cid_var274_ch2]?; },
    received_ch2_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
fibParallel_0 = fibParallel(0);
fibParallel_1 = fibParallel(1);
fib_00 = fib(0);
fib_01 = fib(1);
fib_02 = fib(2);
fib_03 = fib(3);
fib_04 = fib(4);
fib_05 = fib(5);
fib_06 = fib(6);
fib_07 = fib(7);
fib_08 = fib(8);
fib_09 = fib(9);
fib_10 = fib(10);
fib_11 = fib(11);
fib_12 = fib(12);
fib_13 = fib(13);
fib_14 = fib(14);
fib_15 = fib(15);
fib_16 = fib(16);
fib_17 = fib(17);
fib_18 = fib(18);
fib_19 = fib(19);
system Channel0, Channel1, fibParallel_0, fibParallel_1, fib_00, fib_01, fib_02, fib_03, fib_04, fib_05, fib_06, fib_07, fib_08, fib_09, fib_10, fib_11, fib_12, fib_13, fib_14, fib_15, fib_16, fib_17, fib_18, fib_19, main;

