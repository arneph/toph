// Place global declarations here.
int fid_var198_worker = 89;
int fid_var201_morejob = 90;
int fid_var202_producer = 91;
int fid_var205_main = 88;
int worker_count = 0;
chan async_worker[2];
chan sync_worker[2];
int arg_cid_var199_jobQueue[2];
int arg_cid_var200_done[2];

int morejob_count = 0;
chan async_morejob[11];
chan sync_morejob[11];

int producer_count = 0;
chan async_producer[1];
chan sync_producer[1];
int arg_cid_var204_done[1];
int arg_cid_var203_q[1];

int chan_count = 0;
int chan_counter[2];
int chan_buffer[2];
chan sender_trigger[2];
chan sender_confirm[2];
chan receiver_trigger[2];
chan receiver_confirm[2];
chan close[2];

int make_worker() {
	int pid = worker_count;
	worker_count++;
	return pid;
}

int make_morejob() {
	int pid = morejob_count;
	morejob_count++;
	return pid;
}

int make_producer() {
	int pid = producer_count;
	producer_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 1] i) {
// Place local declarations here.


state
    confirming_b,
    closing,
    closed,
    bad,
    idle,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_closed;
commit
    new_sender,
    confirming_a,
    new_receiver,
    confirming_closed,
    closing,
    confirming_b;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var206_jobQueue = -1;
int cid_var207_done = -1;



state
    started,
    ending,
    ended,
    made_done_0,
    created_worker_0,
    created_producer_0,
    awaited_producer_0,
    starting,
    made_jobQueue_0,
    started_worker_0,
    created_worker_1,
    started_worker_1,
    started_producer_0;
init
    starting;
trans
    started -> made_jobQueue_0 { assign cid_var206_jobQueue = make_chan(0); },
    made_jobQueue_0 -> made_done_0 { assign cid_var207_done = make_chan(0); },
    made_done_0 -> created_worker_0 { assign p = make_worker(), arg_cid_var199_jobQueue[p] = cid_var206_jobQueue, arg_cid_var200_done[p] = cid_var207_done; },
    created_worker_0 -> started_worker_0 { sync async_worker[p]!; },
    started_worker_0 -> created_worker_1 { assign p = make_worker(), arg_cid_var199_jobQueue[p] = cid_var206_jobQueue, arg_cid_var200_done[p] = cid_var207_done; },
    created_worker_1 -> started_worker_1 { sync async_worker[p]!; },
    started_worker_1 -> created_producer_0 { assign p = make_producer(), arg_cid_var203_q[p] = cid_var206_jobQueue, arg_cid_var204_done[p] = cid_var207_done; },
    created_producer_0 -> started_producer_0 { sync sync_producer[p]!; },
    started_producer_0 -> awaited_producer_0 { sync sync_producer[p]?; },
    awaited_producer_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process morejob(int[0, 10] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_morejob[pid]?; assign is_sync = false; },
    starting -> started { sync sync_morejob[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_morejob[pid]!; };
}

process producer(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var203_q = -1;
int cid_var204_done = -1;

int i0 = 0;
void initialize() {
    cid_var203_q = arg_cid_var203_q[pid];
    cid_var204_done = arg_cid_var204_done[pid];
}



state
    starting,
    ending,
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    exit_loop_body_0,
    sending_q_0,
    awaited_morejob_0,
    exit_loop_0,
    sent_q_0,
    closed_done_0,
    started,
    created_morejob_0,
    started_morejob_0,
    enter_loop_body_0;
init
    starting;
trans
    enter_loop_cond_0 -> created_morejob_0 { assign p = make_morejob(); },
    created_morejob_0 -> started_morejob_0 { sync sync_morejob[p]!; },
    started_morejob_0 -> awaited_morejob_0 { sync sync_morejob[p]?; },
    awaited_morejob_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_q_0 { sync sender_trigger[cid_var203_q]!; assign chan_counter[cid_var203_q]++; },
    sending_q_0 -> sent_q_0 { sync sender_confirm[cid_var203_q]?; },
    sent_q_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 10; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 10; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> closed_done_0 { sync close[cid_var204_done]!; },
    closed_done_0 -> ending { },
    starting -> started { sync async_producer[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_producer[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_producer[pid]!; };
}

process worker(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var199_jobQueue = -1;
int cid_var200_done = -1;

void initialize() {
    cid_var200_done = arg_cid_var200_done[pid];
    cid_var199_jobQueue = arg_cid_var199_jobQueue[pid];
}



state
    select_end_0,
    select_pass_1_0,
    select_case_1_trigger_0,
    starting,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    select_pass_2_0,
    ending,
    ended,
    exit_loop_0,
    started,
    select_case_1_enter_0,
    select_case_2_enter_0,
    select_case_2_trigger_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var199_jobQueue]--, chan_counter[cid_var200_done]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var199_jobQueue] < 0 || chan_counter[cid_var199_jobQueue] >= 0; sync receiver_trigger[cid_var199_jobQueue]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var199_jobQueue]?; assign chan_counter[cid_var200_done]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var200_done] < 0 || chan_counter[cid_var200_done] >= 0; sync receiver_trigger[cid_var200_done]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var200_done]?; assign chan_counter[cid_var199_jobQueue]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var199_jobQueue] < 0 || chan_counter[cid_var199_jobQueue] >= 0) && !(chan_buffer[cid_var200_done] < 0 || chan_counter[cid_var200_done] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var199_jobQueue]?; assign chan_counter[cid_var200_done]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var200_done]?; assign chan_counter[cid_var199_jobQueue]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_worker[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_worker[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_worker[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
morejob_00 = morejob(0);
morejob_01 = morejob(1);
morejob_02 = morejob(2);
morejob_03 = morejob(3);
morejob_04 = morejob(4);
morejob_05 = morejob(5);
morejob_06 = morejob(6);
morejob_07 = morejob(7);
morejob_08 = morejob(8);
morejob_09 = morejob(9);
morejob_10 = morejob(10);
producer_0 = producer(0);
worker_0 = worker(0);
worker_1 = worker(1);
system Channel0, Channel1, main, morejob_00, morejob_01, morejob_02, morejob_03, morejob_04, morejob_05, morejob_06, morejob_07, morejob_08, morejob_09, morejob_10, producer_0, worker_0, worker_1;

