// Place global declarations here.
int fid_var232_main = 101;
int chan_count = 0;
int chan_counter[5];
int chan_buffer[5];
chan sender_trigger[5];
chan sender_confirm[5];
chan receiver_trigger[5];
chan receiver_confirm[5];
chan close[5];

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 4] i) {
// Place local declarations here.


state
    idle,
    new_receiver,
    closed,
    bad,
    new_sender,
    confirming_a,
    confirming_b,
    closing,
    confirming_closed;
commit
    new_sender,
    confirming_a,
    confirming_b,
    closing,
    confirming_closed,
    new_receiver;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var233 = -1;

int cid_var234 = -1;

int i0 = 0;


state
    ending,
    exit_loop_body_1,
    exit_loop_body_2,
    exit_loop_body_0,
    exit_loop_0,
    made__0,
    exit_loop_cond_1,
    enter_loop_body_1,
    exit_loop_1,
    enter_loop_body_2,
    starting,
    started,
    ended,
    enter_loop_cond_0,
    enter_loop_cond_2,
    exit_loop_cond_2,
    exit_loop_cond_0,
    enter_loop_body_0,
    enter_loop_cond_1,
    exit_loop_2;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> made__0 { assign cid_var234 = make_chan(1); },
    made__0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 5; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 5; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    enter_loop_cond_1 -> exit_loop_cond_1 { },
    enter_loop_body_1 -> exit_loop_body_1 { },
    exit_loop_0 -> enter_loop_cond_1 { assign i0 = 0; },
    exit_loop_cond_1 -> enter_loop_body_1 { guard i0 < 5; },
    exit_loop_cond_1 -> exit_loop_1 { guard i0 >= 5; },
    exit_loop_body_1 -> enter_loop_cond_1 { assign i0++; },
    enter_loop_cond_2 -> exit_loop_cond_2 { },
    enter_loop_body_2 -> exit_loop_body_2 { },
    exit_loop_1 -> enter_loop_cond_2 { assign i0 = 0; },
    exit_loop_cond_2 -> enter_loop_body_2 { guard i0 < 5; },
    exit_loop_cond_2 -> exit_loop_2 { guard i0 >= 5; },
    exit_loop_body_2 -> enter_loop_cond_2 { assign i0++; },
    exit_loop_2 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
system Channel0, Channel1, Channel2, Channel3, Channel4, main;

