// Place global declarations here.
int fid_var142_sel1 = 68;
int fid_var146_sel2 = 69;
int fid_var150_main = 67;
int sel1_count = 0;
chan async_sel1[1];
chan sync_sel1[1];
int arg_cid_var143_ch1[1];
int arg_cid_var144_ch2[1];
int arg_cid_var145_done[1];

int sel2_count = 0;
chan async_sel2[1];
chan sync_sel2[1];
int arg_cid_var147_ch1[1];
int arg_cid_var148_ch2[1];
int arg_cid_var149_done[1];

int chan_count = 0;
int chan_counter[3];
int chan_buffer[3];
chan sender_trigger[3];
chan sender_confirm[3];
chan receiver_trigger[3];
chan receiver_confirm[3];
chan close[3];

int make_sel1() {
	int pid = sel1_count;
	sel1_count++;
	return pid;
}

int make_sel2() {
	int pid = sel2_count;
	sel2_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 2] i) {
// Place local declarations here.


state
    idle,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    closed,
    confirming_closed,
    bad;
commit
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var151_done = -1;
int cid_var152_a = -1;
int cid_var153_b = -1;



state
    starting,
    ending,
    created_sel2_0,
    received_done_1,
    started,
    made_done_0,
    started_sel2_0,
    ended,
    made_b_0,
    created_sel1_0,
    started_sel1_0,
    made_a_0,
    receiving_done_0,
    received_done_0,
    receiving_done_1;
init
    starting;
trans
    started -> made_done_0 { assign cid_var151_done = make_chan(0); },
    made_done_0 -> made_a_0 { assign cid_var152_a = make_chan(0); },
    made_a_0 -> made_b_0 { assign cid_var153_b = make_chan(0); },
    made_b_0 -> created_sel1_0 { assign p = make_sel1(), arg_cid_var143_ch1[p] = cid_var152_a, arg_cid_var144_ch2[p] = cid_var153_b, arg_cid_var145_done[p] = cid_var151_done; },
    created_sel1_0 -> started_sel1_0 { sync async_sel1[p]!; },
    started_sel1_0 -> created_sel2_0 { assign p = make_sel2(), arg_cid_var147_ch1[p] = cid_var152_a, arg_cid_var148_ch2[p] = cid_var153_b, arg_cid_var149_done[p] = cid_var151_done; },
    created_sel2_0 -> started_sel2_0 { sync async_sel2[p]!; },
    started_sel2_0 -> receiving_done_0 { sync receiver_trigger[cid_var151_done]!; assign chan_counter[cid_var151_done]--; },
    receiving_done_0 -> received_done_0 { sync receiver_confirm[cid_var151_done]?; },
    received_done_0 -> receiving_done_1 { sync receiver_trigger[cid_var151_done]!; assign chan_counter[cid_var151_done]--; },
    receiving_done_1 -> received_done_1 { sync receiver_confirm[cid_var151_done]?; },
    received_done_1 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process sel1(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var143_ch1 = -1;
int cid_var144_ch2 = -1;
int cid_var145_done = -1;

void initialize() {
    cid_var143_ch1 = arg_cid_var143_ch1[pid];
    cid_var144_ch2 = arg_cid_var144_ch2[pid];
    cid_var145_done = arg_cid_var145_done[pid];
}



state
    ended,
    enter_loop_cond_0,
    starting,
    exit_loop_cond_0,
    select_pass_2_0,
    sent_done_0,
    select_case_1_trigger_0,
    started,
    ending,
    exit_loop_0,
    select_end_0,
    select_case_1_enter_0,
    enter_loop_body_0,
    exit_loop_body_0,
    sending_done_0,
    select_case_2_enter_0,
    select_pass_1_0,
    select_case_2_trigger_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> sending_done_0 { sync sender_trigger[cid_var145_done]!; assign chan_counter[cid_var145_done]++; },
    sending_done_0 -> sent_done_0 { sync sender_confirm[cid_var145_done]?; },
    sent_done_0 -> ending { },
    select_case_2_enter_0 -> select_end_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var143_ch1]--, chan_counter[cid_var144_ch2]++; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var143_ch1] < 0 || chan_counter[cid_var143_ch1] >= 0; sync receiver_trigger[cid_var143_ch1]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var143_ch1]?; assign chan_counter[cid_var144_ch2]--; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var144_ch2] < 0 || chan_counter[cid_var144_ch2] <= chan_buffer[cid_var144_ch2]; sync sender_trigger[cid_var144_ch2]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync sender_confirm[cid_var144_ch2]?; assign chan_counter[cid_var143_ch1]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var143_ch1] < 0 || chan_counter[cid_var143_ch1] >= 0) && !(chan_buffer[cid_var144_ch2] < 0 || chan_counter[cid_var144_ch2] <= chan_buffer[cid_var144_ch2]); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var143_ch1]?; assign chan_counter[cid_var144_ch2]--; },
    select_pass_2_0 -> select_case_2_enter_0 { sync sender_confirm[cid_var144_ch2]?; assign chan_counter[cid_var143_ch1]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_sel1[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_sel1[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_sel1[pid]!; };
}

process sel2(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var147_ch1 = -1;
int cid_var148_ch2 = -1;
int cid_var149_done = -1;

void initialize() {
    cid_var147_ch1 = arg_cid_var147_ch1[pid];
    cid_var148_ch2 = arg_cid_var148_ch2[pid];
    cid_var149_done = arg_cid_var149_done[pid];
}



state
    select_case_1_trigger_0,
    started,
    exit_loop_cond_0,
    select_end_0,
    sent_done_0,
    ended,
    select_case_2_enter_0,
    select_pass_1_0,
    starting,
    enter_loop_cond_0,
    exit_loop_0,
    select_pass_2_0,
    sending_done_0,
    select_case_2_trigger_0,
    ending,
    enter_loop_body_0,
    exit_loop_body_0,
    select_case_1_enter_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> sending_done_0 { sync sender_trigger[cid_var149_done]!; assign chan_counter[cid_var149_done]++; },
    sending_done_0 -> sent_done_0 { sync sender_confirm[cid_var149_done]?; },
    sent_done_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var148_ch2]--, chan_counter[cid_var147_ch1]++; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var148_ch2] < 0 || chan_counter[cid_var148_ch2] >= 0; sync receiver_trigger[cid_var148_ch2]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var148_ch2]?; assign chan_counter[cid_var147_ch1]--; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var147_ch1] < 0 || chan_counter[cid_var147_ch1] <= chan_buffer[cid_var147_ch1]; sync sender_trigger[cid_var147_ch1]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync sender_confirm[cid_var147_ch1]?; assign chan_counter[cid_var148_ch2]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var148_ch2] < 0 || chan_counter[cid_var148_ch2] >= 0) && !(chan_buffer[cid_var147_ch1] < 0 || chan_counter[cid_var147_ch1] <= chan_buffer[cid_var147_ch1]); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var148_ch2]?; assign chan_counter[cid_var147_ch1]--; },
    select_pass_2_0 -> select_case_2_enter_0 { sync sender_confirm[cid_var147_ch1]?; assign chan_counter[cid_var148_ch2]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_sel2[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_sel2[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_sel2[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
sel1_0 = sel1(0);
sel2_0 = sel2(0);
system Channel0, Channel1, Channel2, main, sel1_0, sel2_0;

