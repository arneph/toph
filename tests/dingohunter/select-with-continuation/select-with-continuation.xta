// Place global declarations here.
int fid_var353_main = 200;
int chan_count = 0;
int chan_counter[3];
int chan_buffer[3];
chan sender_trigger[3];
chan sender_confirm[3];
chan receiver_trigger[3];
chan receiver_confirm[3];
chan close[3];

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 2] i) {
// Place local declarations here.


state
    idle,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    closed,
    confirming_closed,
    bad;
commit
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closing,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var354_ch1 = -1;
int cid_var355_ch2 = -1;
int cid_var356_ch3 = -1;



state
    select_case_1_enter_0,
    select_case_2_trigger_0,
    select_case_3_trigger_0,
    starting,
    made_ch3_0,
    select_end_0,
    select_default_enter_0,
    select_case_2_enter_0,
    select_case_3_enter_0,
    sent_ch1_0,
    started,
    ended,
    made_ch1_0,
    made_ch2_0,
    select_pass_1_0,
    ending,
    select_case_1_trigger_0,
    sending_ch1_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_ch1_0 { assign cid_var354_ch1 = make_chan(0); },
    made_ch1_0 -> made_ch2_0 { assign cid_var355_ch2 = make_chan(0); },
    made_ch2_0 -> made_ch3_0 { assign cid_var356_ch3 = make_chan(0); },
    select_default_enter_0 -> select_end_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> select_end_0 { },
    select_case_3_enter_0 -> select_end_0 { },
    made_ch3_0 -> select_pass_1_0 { assign chan_counter[cid_var354_ch1]--, chan_counter[cid_var355_ch2]++, chan_counter[cid_var356_ch3]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var354_ch1] < 0 || chan_counter[cid_var354_ch1] >= 0; sync receiver_trigger[cid_var354_ch1]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var354_ch1]?; assign chan_counter[cid_var355_ch2]--, chan_counter[cid_var356_ch3]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var355_ch2] < 0 || chan_counter[cid_var355_ch2] <= chan_buffer[cid_var355_ch2]; sync sender_trigger[cid_var355_ch2]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync sender_confirm[cid_var355_ch2]?; assign chan_counter[cid_var354_ch1]++, chan_counter[cid_var356_ch3]++; },
    select_pass_1_0 -> select_case_3_trigger_0 { guard chan_buffer[cid_var356_ch3] < 0 || chan_counter[cid_var356_ch3] >= 0; sync receiver_trigger[cid_var356_ch3]!; },
    select_case_3_trigger_0 -> select_case_3_enter_0 { sync receiver_confirm[cid_var356_ch3]?; assign chan_counter[cid_var354_ch1]++, chan_counter[cid_var355_ch2]--; },
    select_pass_1_0 -> select_default_enter_0 { guard !(chan_buffer[cid_var354_ch1] < 0 || chan_counter[cid_var354_ch1] >= 0) && !(chan_buffer[cid_var355_ch2] < 0 || chan_counter[cid_var355_ch2] <= chan_buffer[cid_var355_ch2]) && !(chan_buffer[cid_var356_ch3] < 0 || chan_counter[cid_var356_ch3] >= 0); assign chan_counter[cid_var354_ch1]++, chan_counter[cid_var355_ch2]--, chan_counter[cid_var356_ch3]++; },
    select_end_0 -> sending_ch1_0 { sync sender_trigger[cid_var354_ch1]!; assign chan_counter[cid_var354_ch1]++; },
    sending_ch1_0 -> sent_ch1_0 { sync sender_confirm[cid_var354_ch1]?; },
    sent_ch1_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
system Channel0, Channel1, Channel2, main;

