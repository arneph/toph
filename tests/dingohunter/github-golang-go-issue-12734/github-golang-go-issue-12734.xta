// Place global declarations here.
int fid_var172_useless = 76;
int fid_var173_test_a = 77;
int fid_var175_test = 78;
int fid_var176_main = 75;
int useless_count = 0;
chan async_useless[1];
chan sync_useless[1];

int test_a_count = 0;
chan async_test_a[3];
chan sync_test_a[3];
int arg_cid_var174_test_channel[3];

int test_count = 0;
chan async_test[1];
chan sync_test[1];

int chan_count = 0;
int chan_counter[1];
int chan_buffer[1];
chan sender_trigger[1];
chan sender_confirm[1];
chan receiver_trigger[1];
chan receiver_confirm[1];
chan close[1];

int make_useless() {
	int pid = useless_count;
	useless_count++;
	return pid;
}

int make_test_a() {
	int pid = test_a_count;
	test_a_count++;
	return pid;
}

int make_test() {
	int pid = test_count;
	test_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 0] i) {
// Place local declarations here.


state
    closing,
    bad,
    idle,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    closed,
    confirming_closed;
commit
    closing,
    new_sender,
    confirming_a,
    new_receiver,
    confirming_b,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;



state
    awaited_test_0,
    starting,
    started,
    ending,
    ended,
    created_test_0,
    started_test_0;
init
    starting;
trans
    started -> created_test_0 { assign p = make_test(); },
    created_test_0 -> started_test_0 { sync sync_test[p]!; },
    started_test_0 -> awaited_test_0 { sync sync_test[p]?; },
    awaited_test_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process test(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var177_test_channel = -1;

int i0 = 0;


state
    exit_loop_body_1,
    starting,
    enter_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0,
    started_test_a_0,
    enter_loop_cond_1,
    exit_loop_cond_1,
    enter_loop_body_1,
    ending,
    exit_loop_cond_0,
    exit_loop_body_0,
    received_test_channel_0,
    receiving_test_channel_0,
    started,
    made_test_channel_0,
    created_test_a_0,
    ended,
    exit_loop_1;
init
    starting;
trans
    started -> made_test_channel_0 { assign cid_var177_test_channel = make_chan(0); },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> created_test_a_0 { assign p = make_test_a(), arg_cid_var174_test_channel[p] = cid_var177_test_channel; },
    created_test_a_0 -> started_test_a_0 { sync async_test_a[p]!; },
    started_test_a_0 -> exit_loop_body_0 { },
    made_test_channel_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    enter_loop_cond_1 -> exit_loop_cond_1 { },
    enter_loop_body_1 -> receiving_test_channel_0 { sync receiver_trigger[cid_var177_test_channel]!; assign chan_counter[cid_var177_test_channel]--; },
    receiving_test_channel_0 -> received_test_channel_0 { sync receiver_confirm[cid_var177_test_channel]?; },
    received_test_channel_0 -> exit_loop_body_1 { },
    exit_loop_0 -> enter_loop_cond_1 { },
    exit_loop_cond_1 -> enter_loop_body_1 { },
    exit_loop_body_1 -> enter_loop_cond_1 { },
    exit_loop_1 -> ending { },
    starting -> started { sync async_test[pid]?; assign is_sync = false; },
    starting -> started { sync sync_test[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_test[pid]!; };
}

process test_a(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var174_test_channel = -1;

void initialize() {
    cid_var174_test_channel = arg_cid_var174_test_channel[pid];
}



state
    ended,
    sending_test_channel_0,
    sent_test_channel_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> sending_test_channel_0 { sync sender_trigger[cid_var174_test_channel]!; assign chan_counter[cid_var174_test_channel]++; },
    sending_test_channel_0 -> sent_test_channel_0 { sync sender_confirm[cid_var174_test_channel]?; },
    sent_test_channel_0 -> ending { },
    starting -> started { sync async_test_a[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_test_a[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_test_a[pid]!; };
}

process useless(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_useless[pid]?; assign is_sync = false; },
    starting -> started { sync sync_useless[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_useless[pid]!; };
}

Channel0 = Channel(0);
test_0 = test(0);
test_a_0 = test_a(0);
test_a_1 = test_a(1);
test_a_2 = test_a(2);
useless_0 = useless(0);
system Channel0, main, test_0, test_a_0, test_a_1, test_a_2, useless_0;

