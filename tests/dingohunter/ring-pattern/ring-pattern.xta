// Place global declarations here.
int fid_var338_numprocs = 193;
int fid_var339_adder = 194;
int fid_var342_main = 192;
int numprocs_count = 0;
chan async_numprocs[4];
chan sync_numprocs[4];

int adder_count = 0;
chan async_adder[3];
chan sync_adder[3];
int arg_cid_var340_in[3];
int arg_cid_var341_out[3];

int chan_count = 0;
int chan_counter[4];
int chan_buffer[4];
chan sender_trigger[4];
chan sender_confirm[4];
chan receiver_trigger[4];
chan receiver_confirm[4];
chan close[4];

int make_numprocs() {
	int pid = numprocs_count;
	numprocs_count++;
	return pid;
}

int make_adder() {
	int pid = adder_count;
	adder_count++;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 3] i) {
// Place local declarations here.


state
    closed,
    new_sender,
    confirming_b,
    new_receiver,
    closing,
    confirming_closed,
    bad,
    idle,
    confirming_a;
commit
    confirming_b,
    new_sender,
    confirming_a,
    new_receiver,
    closing,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process adder(int[0, 2] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var340_in = -1;
int cid_var341_out = -1;

void initialize() {
    cid_var340_in = arg_cid_var340_in[pid];
    cid_var341_out = arg_cid_var341_out[pid];
}



state
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0,
    receiving_in_0,
    sent_out_0,
    starting,
    ending,
    exit_loop_body_0,
    received_in_0,
    sending_out_0,
    started,
    ended;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_in_0 { sync receiver_trigger[cid_var340_in]!; assign chan_counter[cid_var340_in]--; },
    receiving_in_0 -> received_in_0 { sync receiver_confirm[cid_var340_in]?; },
    received_in_0 -> sending_out_0 { sync sender_trigger[cid_var341_out]!; assign chan_counter[cid_var341_out]++; },
    sending_out_0 -> sent_out_0 { sync sender_confirm[cid_var341_out]?; },
    sent_out_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_adder[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_adder[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_adder[pid]!; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var343_chOne = -1;
int cid_var344_chOut = -1;
int cid_var345_chIn = -1;

int i0 = 0;


state
    created_numprocs_0,
    created_adder_0,
    received_chOut_0,
    ended,
    made_chOne_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    sent_chOne_0,
    receiving_chOut_0,
    assigned_cid_var345_chIn_0,
    enter_loop_body_0,
    started_adder_0,
    assigned_cid_var345_chIn_1,
    awaited_numprocs_0,
    exit_loop_body_0,
    exit_loop_0,
    starting,
    started,
    assigned_cid_var344_chOut_0,
    started_numprocs_0,
    ending,
    made_chOut_0,
    sending_chOne_0;
init
    starting;
trans
    started -> made_chOne_0 { assign cid_var343_chOne = make_chan(0); },
    made_chOne_0 -> assigned_cid_var344_chOut_0 { assign cid_var344_chOut = cid_var343_chOne; },
    assigned_cid_var344_chOut_0 -> assigned_cid_var345_chIn_0 { assign cid_var345_chIn = cid_var343_chOne; },
    enter_loop_cond_0 -> created_numprocs_0 { assign p = make_numprocs(); },
    created_numprocs_0 -> started_numprocs_0 { sync sync_numprocs[p]!; },
    started_numprocs_0 -> awaited_numprocs_0 { sync sync_numprocs[p]?; },
    awaited_numprocs_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> made_chOut_0 { assign cid_var344_chOut = make_chan(0); },
    made_chOut_0 -> created_adder_0 { assign p = make_adder(), arg_cid_var340_in[p] = cid_var345_chIn, arg_cid_var341_out[p] = cid_var344_chOut; },
    created_adder_0 -> started_adder_0 { sync async_adder[p]!; },
    started_adder_0 -> assigned_cid_var345_chIn_1 { assign cid_var345_chIn = cid_var344_chOut; },
    assigned_cid_var345_chIn_1 -> exit_loop_body_0 { },
    assigned_cid_var345_chIn_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 3; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 3; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> sending_chOne_0 { sync sender_trigger[cid_var343_chOne]!; assign chan_counter[cid_var343_chOne]++; },
    sending_chOne_0 -> sent_chOne_0 { sync sender_confirm[cid_var343_chOne]?; },
    sent_chOne_0 -> receiving_chOut_0 { sync receiver_trigger[cid_var344_chOut]!; assign chan_counter[cid_var344_chOut]--; },
    receiving_chOut_0 -> received_chOut_0 { sync receiver_confirm[cid_var344_chOut]?; },
    received_chOut_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process numprocs(int[0, 3] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_numprocs[pid]?; assign is_sync = false; },
    starting -> started { sync sync_numprocs[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_numprocs[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
adder_0 = adder(0);
adder_1 = adder(1);
adder_2 = adder(2);
numprocs_0 = numprocs(0);
numprocs_1 = numprocs(1);
numprocs_2 = numprocs(2);
numprocs_3 = numprocs(3);
system Channel0, Channel1, Channel2, Channel3, adder_0, adder_1, adder_2, main, numprocs_0, numprocs_1, numprocs_2, numprocs_3;

