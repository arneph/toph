// Place global declarations here.
int fid_var444_main = 247;
int main_func248_count = 0;
chan async_main_func248[1];
chan sync_main_func248[1];
int par_pid_main_func248[1];
int arg_cid_var447_ch[1];
int arg_cid_var448_done[1];

int time_after_count = 0;
chan async_time_after[2];
chan sync_time_after[2];
int res_time_after_0_Chan[2];

int time_after_func250_count = 0;
chan async_time_after_func250[2];
chan sync_time_after_func250[2];
int par_pid_time_after_func250[2];

int cid_var449_ch[2];

int chan_count = 0;
int chan_counter[4];
int chan_buffer[4];
chan sender_trigger[4];
chan sender_confirm[4];
chan receiver_trigger[4];
chan receiver_confirm[4];
chan close[4];

int make_main_func248(int par_pid) {
	int pid = main_func248_count;
	main_func248_count++;
	par_pid_main_func248[pid] = par_pid;
	return pid;
}

int make_time_after() {
	int pid = time_after_count;
	time_after_count++;
	return pid;
}

int make_time_after_func250(int par_pid) {
	int pid = time_after_func250_count;
	time_after_func250_count++;
	par_pid_time_after_func250[pid] = par_pid;
	return pid;
}

int make_chan(int buffer) {
	int cid = chan_count;
	chan_count++;
	chan_counter[cid] = 0;
	chan_buffer[cid] = buffer;
	return cid;
}



process Channel(int[0, 3] i) {
// Place local declarations here.


state
    bad,
    new_sender,
    closing,
    confirming_closed,
    confirming_b,
    closed,
    idle,
    confirming_a,
    new_receiver;
commit
    confirming_a,
    new_receiver,
    confirming_b,
    new_sender,
    closing,
    confirming_closed;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
int pid = 0;
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var445_done = -1;
int cid_var446_ch = -1;
int cid_var450 = -1;
int cid_var451 = -1;



state
    starting,
    select_end_0,
    select_case_2_enter_0,
    received_ch_1,
    select_case_2_trigger_0,
    made_ch_0,
    created_time_after_0,
    select_case_3_enter_0,
    select_case_3_trigger_0,
    receiving_done_0,
    awaited_time_after_1,
    select_pass_2_0,
    awaited_time_after_0,
    receiving_ch_0,
    ending,
    created_time_after_1,
    select_case_1_trigger_0,
    ended,
    select_pass_1_0,
    started,
    started_time_after_0,
    select_case_1_enter_0,
    received_ch_0,
    receiving_ch_1,
    made_done_0,
    created_main_func248_0,
    started_main_func248_0,
    started_time_after_1,
    received_done_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_done_0 { assign cid_var445_done = make_chan(0); },
    made_done_0 -> made_ch_0 { assign cid_var446_ch = make_chan(0); },
    made_ch_0 -> created_main_func248_0 { assign p = make_main_func248(pid), arg_cid_var447_ch[p] = cid_var446_ch, arg_cid_var448_done[p] = cid_var445_done; },
    created_main_func248_0 -> started_main_func248_0 { sync async_main_func248[p]!; },
    started_main_func248_0 -> created_time_after_0 { assign p = make_time_after(); },
    created_time_after_0 -> started_time_after_0 { sync sync_time_after[p]!; },
    started_time_after_0 -> awaited_time_after_0 { sync sync_time_after[p]?; assign cid_var450 = res_time_after_0_Chan[p]; },
    awaited_time_after_0 -> created_time_after_1 { assign p = make_time_after(); },
    created_time_after_1 -> started_time_after_1 { sync sync_time_after[p]!; },
    started_time_after_1 -> awaited_time_after_1 { sync sync_time_after[p]?; assign cid_var451 = res_time_after_0_Chan[p]; },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> receiving_ch_0 { sync receiver_trigger[cid_var446_ch]!; assign chan_counter[cid_var446_ch]--; },
    receiving_ch_0 -> received_ch_0 { sync receiver_confirm[cid_var446_ch]?; },
    received_ch_0 -> select_end_0 { },
    select_case_3_enter_0 -> receiving_ch_1 { sync receiver_trigger[cid_var446_ch]!; assign chan_counter[cid_var446_ch]--; },
    receiving_ch_1 -> received_ch_1 { sync receiver_confirm[cid_var446_ch]?; },
    received_ch_1 -> select_end_0 { },
    awaited_time_after_1 -> select_pass_1_0 { assign chan_counter[cid_var446_ch]--, chan_counter[cid_var450]--, chan_counter[cid_var451]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var446_ch] < 0 || chan_counter[cid_var446_ch] >= 0; sync receiver_trigger[cid_var446_ch]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var446_ch]?; assign chan_counter[cid_var450]++, chan_counter[cid_var451]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var450] < 0 || chan_counter[cid_var450] >= 0; sync receiver_trigger[cid_var450]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var450]?; assign chan_counter[cid_var446_ch]++, chan_counter[cid_var451]++; },
    select_pass_1_0 -> select_case_3_trigger_0 { guard chan_buffer[cid_var451] < 0 || chan_counter[cid_var451] >= 0; sync receiver_trigger[cid_var451]!; },
    select_case_3_trigger_0 -> select_case_3_enter_0 { sync receiver_confirm[cid_var451]?; assign chan_counter[cid_var446_ch]++, chan_counter[cid_var450]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var446_ch] < 0 || chan_counter[cid_var446_ch] >= 0) && !(chan_buffer[cid_var450] < 0 || chan_counter[cid_var450] >= 0) && !(chan_buffer[cid_var451] < 0 || chan_counter[cid_var451] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var446_ch]?; assign chan_counter[cid_var450]++, chan_counter[cid_var451]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var450]?; assign chan_counter[cid_var446_ch]++, chan_counter[cid_var451]++; },
    select_pass_2_0 -> select_case_3_enter_0 { sync receiver_confirm[cid_var451]?; assign chan_counter[cid_var446_ch]++, chan_counter[cid_var450]++; },
    select_end_0 -> receiving_done_0 { sync receiver_trigger[cid_var445_done]!; assign chan_counter[cid_var445_done]--; },
    receiving_done_0 -> received_done_0 { sync receiver_confirm[cid_var445_done]?; },
    received_done_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process main_func248(int[0, 0] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

int cid_var447_ch = -1;
int cid_var448_done = -1;

void initialize() {
    cid_var447_ch = arg_cid_var447_ch[pid];
    cid_var448_done = arg_cid_var448_done[pid];
}



state
    ended,
    sending_ch_0,
    sent_ch_0,
    sending_done_0,
    sent_done_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var447_ch]!; assign chan_counter[cid_var447_ch]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var447_ch]?; },
    sent_ch_0 -> sending_done_0 { sync sender_trigger[cid_var448_done]!; assign chan_counter[cid_var448_done]++; },
    sending_done_0 -> sent_done_0 { sync sender_confirm[cid_var448_done]?; },
    sent_done_0 -> ending { },
    starting -> started { sync async_main_func248[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_main_func248[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_main_func248[pid]!; };
}

process time_after(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;

void initialize() {
    cid_var449_ch[pid] = -1;
}



state
    starting,
    started,
    ending,
    ended,
    made_ch_0,
    created_time_after_func250_0,
    started_time_after_func250_0;
init
    starting;
trans
    started -> made_ch_0 { assign cid_var449_ch[pid] = make_chan(1); },
    made_ch_0 -> created_time_after_func250_0 { assign p = make_time_after_func250(pid); },
    created_time_after_func250_0 -> started_time_after_func250_0 { sync async_time_after_func250[p]!; },
    started_time_after_func250_0 -> ending { assign res_time_after_0_Chan[pid] = cid_var449_ch[pid]; },
    starting -> started { sync async_time_after[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_time_after[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after[pid]!; };
}

process time_after_func250(int[0, 1] pid) {
// Place local declarations here.
bool is_sync = false;
int p = -1;
bool ok = false;



state
    sent_ch_0,
    starting,
    started,
    ending,
    ended,
    sending_ch_0;
init
    starting;
trans
    started -> sending_ch_0 { sync sender_trigger[cid_var449_ch[par_pid_time_after_func250[pid]]]!; assign chan_counter[cid_var449_ch[par_pid_time_after_func250[pid]]]++; },
    sending_ch_0 -> sent_ch_0 { sync sender_confirm[cid_var449_ch[par_pid_time_after_func250[pid]]]?; },
    sent_ch_0 -> ending { },
    starting -> started { sync async_time_after_func250[pid]?; assign is_sync = false; },
    starting -> started { sync sync_time_after_func250[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_time_after_func250[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
main_func248_0 = main_func248(0);
time_after_0 = time_after(0);
time_after_1 = time_after(1);
time_after_func250_0 = time_after_func250(0);
time_after_func250_1 = time_after_func250(1);
system Channel0, Channel1, Channel2, Channel3, main, main_func248_0, time_after_0, time_after_1, time_after_func250_0, time_after_func250_1;

