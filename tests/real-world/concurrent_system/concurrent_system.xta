// Place global declarations here.
int fid_var55_fakeSearch = 30;
int fid_var56_SequentialSearch = 31;
int fid_var57_ConcurrentSearch = 32;
int fid_var58_ConcurrentSearchWithCutOff = 33;
int fid_var59_First = 34;
int fid_var60_ReplicaSearch = 35;
int fid_var61_main = 36;

int fakeSearch_count = 0;
chan async_fakeSearch[1];
chan sync_fakeSearch[1];
int make_fakeSearch() {
    int pid = fakeSearch_count;
    fakeSearch_count++;
    return pid;
}

int SequentialSearch_count = 0;
chan async_SequentialSearch[1];
chan sync_SequentialSearch[1];
int make_SequentialSearch() {
    int pid = SequentialSearch_count;
    SequentialSearch_count++;
    return pid;
}

int ConcurrentSearch_count = 0;
chan async_ConcurrentSearch[1];
chan sync_ConcurrentSearch[1];
int make_ConcurrentSearch() {
    int pid = ConcurrentSearch_count;
    ConcurrentSearch_count++;
    return pid;
}

int ConcurrentSearchWithCutOff_count = 0;
chan async_ConcurrentSearchWithCutOff[1];
chan sync_ConcurrentSearchWithCutOff[1];
int make_ConcurrentSearchWithCutOff() {
    int pid = ConcurrentSearchWithCutOff_count;
    ConcurrentSearchWithCutOff_count++;
    return pid;
}

int First_count = 0;
chan async_First[1];
chan sync_First[1];
int make_First() {
    int pid = First_count;
    First_count++;
    return pid;
}

int ReplicaSearch_count = 0;
chan async_ReplicaSearch[1];
chan sync_ReplicaSearch[1];
int make_ReplicaSearch() {
    int pid = ReplicaSearch_count;
    ReplicaSearch_count++;
    return pid;
}

int fakeSearch_func37_count = 0;
chan async_fakeSearch_func37[1];
chan sync_fakeSearch_func37[1];
int make_fakeSearch_func37() {
    int pid = fakeSearch_func37_count;
    fakeSearch_func37_count++;
    return pid;
}

int ConcurrentSearch_func38_count = 0;
int cap_cid_var92_c[1];
chan async_ConcurrentSearch_func38[1];
chan sync_ConcurrentSearch_func38[1];
int make_ConcurrentSearch_func38() {
    int pid = ConcurrentSearch_func38_count;
    ConcurrentSearch_func38_count++;
    return pid;
}

int ConcurrentSearch_func39_count = 0;
int cap_cid_var93_c[1];
chan async_ConcurrentSearch_func39[1];
chan sync_ConcurrentSearch_func39[1];
int make_ConcurrentSearch_func39() {
    int pid = ConcurrentSearch_func39_count;
    ConcurrentSearch_func39_count++;
    return pid;
}

int ConcurrentSearch_func40_count = 0;
int cap_cid_var94_c[1];
chan async_ConcurrentSearch_func40[1];
chan sync_ConcurrentSearch_func40[1];
int make_ConcurrentSearch_func40() {
    int pid = ConcurrentSearch_func40_count;
    ConcurrentSearch_func40_count++;
    return pid;
}

int ConcurrentSearchWithCutOff_func41_count = 0;
int cap_cid_var95_c[1];
chan async_ConcurrentSearchWithCutOff_func41[1];
chan sync_ConcurrentSearchWithCutOff_func41[1];
int make_ConcurrentSearchWithCutOff_func41() {
    int pid = ConcurrentSearchWithCutOff_func41_count;
    ConcurrentSearchWithCutOff_func41_count++;
    return pid;
}

int ConcurrentSearchWithCutOff_func42_count = 0;
int cap_cid_var96_c[1];
chan async_ConcurrentSearchWithCutOff_func42[1];
chan sync_ConcurrentSearchWithCutOff_func42[1];
int make_ConcurrentSearchWithCutOff_func42() {
    int pid = ConcurrentSearchWithCutOff_func42_count;
    ConcurrentSearchWithCutOff_func42_count++;
    return pid;
}

int ConcurrentSearchWithCutOff_func43_count = 0;
int cap_cid_var97_c[1];
chan async_ConcurrentSearchWithCutOff_func43[1];
chan sync_ConcurrentSearchWithCutOff_func43[1];
int make_ConcurrentSearchWithCutOff_func43() {
    int pid = ConcurrentSearchWithCutOff_func43_count;
    ConcurrentSearchWithCutOff_func43_count++;
    return pid;
}

int First_func44_count = 0;
int cap_cid_var98_c[1];
chan async_First_func44[1];
chan sync_First_func44[1];
int make_First_func44() {
    int pid = First_func44_count;
    First_func44_count++;
    return pid;
}

int ReplicaSearch_func45_count = 0;
int cap_cid_var99_c[1];
chan async_ReplicaSearch_func45[1];
chan sync_ReplicaSearch_func45[1];
int make_ReplicaSearch_func45() {
    int pid = ReplicaSearch_func45_count;
    ReplicaSearch_func45_count++;
    return pid;
}

int ReplicaSearch_func46_count = 0;
int cap_cid_var103_c[1];
chan async_ReplicaSearch_func46[1];
chan sync_ReplicaSearch_func46[1];
int make_ReplicaSearch_func46() {
    int pid = ReplicaSearch_func46_count;
    ReplicaSearch_func46_count++;
    return pid;
}

int ReplicaSearch_func47_count = 0;
int cap_cid_var107_c[1];
chan async_ReplicaSearch_func47[1];
chan sync_ReplicaSearch_func47[1];
int make_ReplicaSearch_func47() {
    int pid = ReplicaSearch_func47_count;
    ReplicaSearch_func47_count++;
    return pid;
}

int chan_count = 0;
int chan_counter[10];
int chan_buffer[10];
chan sender_trigger[10];
chan sender_confirm[10];
chan receiver_trigger[10];
chan receiver_confirm[10];
chan close[10];

int make_chan(int buffer) {
    int cid = chan_count;
    chan_count++;
    chan_counter[cid] = 0;
    chan_buffer[cid] = buffer;
    return cid;
}


process Channel(int[0, 9] i) {
// Place local declarations here.

state
    new_sender,
    confirming_a,
    confirming_b,
    closing,
    confirming_closed,
    idle,
    new_receiver,
    closed,
    bad;
commit
    closing,
    confirming_closed,
    new_sender,
    confirming_a,
    confirming_b,
    new_receiver;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; assign chan_counter[i] = 1; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process ConcurrentSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var82_c = -1;

state
    made_cid_var82_c_0,
    enter_loop_cond_0,
    exit_loop_0,
    exit_loop_body_0,
    starting,
    ending,
    ended,
    started_ConcurrentSearch_func40_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    received_cid_var82_c_0,
    started,
    started_ConcurrentSearch_func38_0,
    started_ConcurrentSearch_func39_0,
    receiving_cid_var82_c_0,
    created_ConcurrentSearch_func38_0,
    created_ConcurrentSearch_func39_0,
    created_ConcurrentSearch_func40_0;
init
    starting;
trans
    started -> made_cid_var82_c_0 { assign cid_var82_c = make_chan(0); },
    made_cid_var82_c_0 -> created_ConcurrentSearch_func38_0 { assign p = make_ConcurrentSearch_func38(), cap_cid_var92_c[p] = cid_var82_c; },
    created_ConcurrentSearch_func38_0 -> started_ConcurrentSearch_func38_0 { sync async_ConcurrentSearch_func38[p]!; },
    started_ConcurrentSearch_func38_0 -> created_ConcurrentSearch_func39_0 { assign p = make_ConcurrentSearch_func39(), cap_cid_var93_c[p] = cid_var82_c; },
    created_ConcurrentSearch_func39_0 -> started_ConcurrentSearch_func39_0 { sync async_ConcurrentSearch_func39[p]!; },
    started_ConcurrentSearch_func39_0 -> created_ConcurrentSearch_func40_0 { assign p = make_ConcurrentSearch_func40(), cap_cid_var94_c[p] = cid_var82_c; },
    created_ConcurrentSearch_func40_0 -> started_ConcurrentSearch_func40_0 { sync async_ConcurrentSearch_func40[p]!; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_cid_var82_c_0 { sync receiver_trigger[cid_var82_c]!; assign chan_counter[cid_var82_c]--; },
    receiving_cid_var82_c_0 -> received_cid_var82_c_0 { sync receiver_confirm[cid_var82_c]?; },
    received_cid_var82_c_0 -> exit_loop_body_0 { },
    started_ConcurrentSearch_func40_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch[pid]!; };
}

process ConcurrentSearchWithCutOff(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var83_c = -1;
int cid_var84_timeout = -1;

state
    exit_loop_cond_0,
    select_case_2_enter_0,
    select_pass_1_0,
    select_case_1_trigger_0,
    made_cid_var83_c_0,
    created_ConcurrentSearchWithCutOff_func43_0,
    started_ConcurrentSearchWithCutOff_func43_0,
    enter_loop_body_0,
    starting,
    started,
    ending,
    ended,
    exit_loop_body_0,
    exit_loop_0,
    enter_loop_cond_0,
    select_end_0,
    select_case_1_enter_0,
    select_case_2_trigger_0,
    select_pass_2_0,
    created_ConcurrentSearchWithCutOff_func41_0,
    started_ConcurrentSearchWithCutOff_func41_0,
    created_ConcurrentSearchWithCutOff_func42_0,
    started_ConcurrentSearchWithCutOff_func42_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_cid_var83_c_0 { assign cid_var83_c = make_chan(0); },
    made_cid_var83_c_0 -> created_ConcurrentSearchWithCutOff_func41_0 { assign p = make_ConcurrentSearchWithCutOff_func41(), cap_cid_var95_c[p] = cid_var83_c; },
    created_ConcurrentSearchWithCutOff_func41_0 -> started_ConcurrentSearchWithCutOff_func41_0 { sync async_ConcurrentSearchWithCutOff_func41[p]!; },
    started_ConcurrentSearchWithCutOff_func41_0 -> created_ConcurrentSearchWithCutOff_func42_0 { assign p = make_ConcurrentSearchWithCutOff_func42(), cap_cid_var96_c[p] = cid_var83_c; },
    created_ConcurrentSearchWithCutOff_func42_0 -> started_ConcurrentSearchWithCutOff_func42_0 { sync async_ConcurrentSearchWithCutOff_func42[p]!; },
    started_ConcurrentSearchWithCutOff_func42_0 -> created_ConcurrentSearchWithCutOff_func43_0 { assign p = make_ConcurrentSearchWithCutOff_func43(), cap_cid_var97_c[p] = cid_var83_c; },
    created_ConcurrentSearchWithCutOff_func43_0 -> started_ConcurrentSearchWithCutOff_func43_0 { sync async_ConcurrentSearchWithCutOff_func43[p]!; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var83_c]--, chan_counter[cid_var84_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var83_c] < 0 || chan_counter[cid_var83_c] >= 0; sync receiver_trigger[cid_var83_c]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var83_c]?; assign chan_counter[cid_var84_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var84_timeout] < 0 || chan_counter[cid_var84_timeout] >= 0; sync receiver_trigger[cid_var84_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var84_timeout]?; assign chan_counter[cid_var83_c]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var83_c] < 0 || chan_counter[cid_var83_c] >= 0) && !(chan_buffer[cid_var84_timeout] < 0 || chan_counter[cid_var84_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var83_c]?; assign chan_counter[cid_var84_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var84_timeout]?; assign chan_counter[cid_var83_c]++; },
    select_end_0 -> exit_loop_body_0 { },
    started_ConcurrentSearchWithCutOff_func43_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearchWithCutOff[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff[pid]!; };
}

process ConcurrentSearchWithCutOff_func41(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var95_c = -1;
void initialize() {
    cid_var95_c = cap_cid_var95_c[pid];
}

state
    starting,
    started,
    ending,
    ended,
    sending_cid_var95_c_0,
    sent_cid_var95_c_0;
init
    starting;
trans
    started -> sending_cid_var95_c_0 { sync sender_trigger[cid_var95_c]!; assign chan_counter[cid_var95_c]++; },
    sending_cid_var95_c_0 -> sent_cid_var95_c_0 { sync sender_confirm[cid_var95_c]?; },
    sent_cid_var95_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func41[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func41[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func41[pid]!; };
}

process ConcurrentSearchWithCutOff_func42(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var96_c = -1;
void initialize() {
    cid_var96_c = cap_cid_var96_c[pid];
}

state
    sent_cid_var96_c_0,
    starting,
    started,
    ending,
    ended,
    sending_cid_var96_c_0;
init
    starting;
trans
    started -> sending_cid_var96_c_0 { sync sender_trigger[cid_var96_c]!; assign chan_counter[cid_var96_c]++; },
    sending_cid_var96_c_0 -> sent_cid_var96_c_0 { sync sender_confirm[cid_var96_c]?; },
    sent_cid_var96_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func42[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func42[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func42[pid]!; };
}

process ConcurrentSearchWithCutOff_func43(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var97_c = -1;
void initialize() {
    cid_var97_c = cap_cid_var97_c[pid];
}

state
    sent_cid_var97_c_0,
    starting,
    started,
    ending,
    ended,
    sending_cid_var97_c_0;
init
    starting;
trans
    started -> sending_cid_var97_c_0 { sync sender_trigger[cid_var97_c]!; assign chan_counter[cid_var97_c]++; },
    sending_cid_var97_c_0 -> sent_cid_var97_c_0 { sync sender_confirm[cid_var97_c]?; },
    sent_cid_var97_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff_func43[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearchWithCutOff_func43[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff_func43[pid]!; };
}

process ConcurrentSearch_func38(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var92_c = -1;
void initialize() {
    cid_var92_c = cap_cid_var92_c[pid];
}

state
    ending,
    ended,
    sending_cid_var92_c_0,
    sent_cid_var92_c_0,
    starting,
    started;
init
    starting;
trans
    started -> sending_cid_var92_c_0 { sync sender_trigger[cid_var92_c]!; assign chan_counter[cid_var92_c]++; },
    sending_cid_var92_c_0 -> sent_cid_var92_c_0 { sync sender_confirm[cid_var92_c]?; },
    sent_cid_var92_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func38[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearch_func38[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func38[pid]!; };
}

process ConcurrentSearch_func39(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var93_c = -1;
void initialize() {
    cid_var93_c = cap_cid_var93_c[pid];
}

state
    ended,
    sending_cid_var93_c_0,
    sent_cid_var93_c_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> sending_cid_var93_c_0 { sync sender_trigger[cid_var93_c]!; assign chan_counter[cid_var93_c]++; },
    sending_cid_var93_c_0 -> sent_cid_var93_c_0 { sync sender_confirm[cid_var93_c]?; },
    sent_cid_var93_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func39[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearch_func39[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func39[pid]!; };
}

process ConcurrentSearch_func40(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var94_c = -1;
void initialize() {
    cid_var94_c = cap_cid_var94_c[pid];
}

state
    sending_cid_var94_c_0,
    sent_cid_var94_c_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> sending_cid_var94_c_0 { sync sender_trigger[cid_var94_c]!; assign chan_counter[cid_var94_c]++; },
    sending_cid_var94_c_0 -> sent_cid_var94_c_0 { sync sender_confirm[cid_var94_c]?; },
    sent_cid_var94_c_0 -> ending { },
    starting -> started { sync async_ConcurrentSearch_func40[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ConcurrentSearch_func40[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch_func40[pid]!; };
}

process First(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var85_c = -1;
int fid_var86 = 44;
int fid_var87_searchReplica = -1;

state
    enter_loop_cond_0,
    enter_loop_body_0,
    exit_loop_body_0,
    receiving_cid_var85_c_0,
    started,
    made_cid_var85_c_0,
    ended,
    assigned_fid_var87_searchReplica_0,
    exit_loop_cond_0,
    exit_loop_0,
    received_cid_var85_c_0,
    starting,
    ending;
init
    starting;
trans
    started -> made_cid_var85_c_0 { assign cid_var85_c = make_chan(0); },
    made_cid_var85_c_0 -> assigned_fid_var87_searchReplica_0 { assign fid_var87_searchReplica = fid_var86; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    assigned_fid_var87_searchReplica_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> receiving_cid_var85_c_0 { sync receiver_trigger[cid_var85_c]!; assign chan_counter[cid_var85_c]--; },
    receiving_cid_var85_c_0 -> received_cid_var85_c_0 { sync receiver_confirm[cid_var85_c]?; },
    received_cid_var85_c_0 -> ending { },
    starting -> started { sync async_First[pid]?; assign is_sync = false; },
    starting -> started { sync sync_First[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_First[pid]!; };
}

process First_func44(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var98_c = -1;
void initialize() {
    cid_var98_c = cap_cid_var98_c[pid];
}

state
    starting,
    started,
    ending,
    ended,
    sending_cid_var98_c_0,
    sent_cid_var98_c_0;
init
    starting;
trans
    started -> sending_cid_var98_c_0 { sync sender_trigger[cid_var98_c]!; assign chan_counter[cid_var98_c]++; },
    sending_cid_var98_c_0 -> sent_cid_var98_c_0 { sync sender_confirm[cid_var98_c]?; },
    sent_cid_var98_c_0 -> ending { },
    starting -> started { sync async_First_func44[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_First_func44[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_First_func44[pid]!; };
}

process ReplicaSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var88_c = -1;
int cid_var89_timeout = -1;

state
    created_ReplicaSearch_func45_0,
    enter_loop_cond_0,
    exit_loop_body_0,
    exit_loop_0,
    select_pass_2_0,
    select_case_2_trigger_0,
    ending,
    started_ReplicaSearch_func45_0,
    enter_loop_body_0,
    select_case_1_enter_0,
    select_pass_1_0,
    started,
    ended,
    made_cid_var88_c_0,
    started_ReplicaSearch_func46_0,
    created_ReplicaSearch_func47_0,
    select_end_0,
    select_case_2_enter_0,
    starting,
    created_ReplicaSearch_func46_0,
    started_ReplicaSearch_func47_0,
    exit_loop_cond_0,
    select_case_1_trigger_0;
commit
    select_pass_1_0;
init
    starting;
trans
    started -> made_cid_var88_c_0 { assign cid_var88_c = make_chan(0); },
    made_cid_var88_c_0 -> created_ReplicaSearch_func45_0 { assign p = make_ReplicaSearch_func45(), cap_cid_var99_c[p] = cid_var88_c; },
    created_ReplicaSearch_func45_0 -> started_ReplicaSearch_func45_0 { sync async_ReplicaSearch_func45[p]!; },
    started_ReplicaSearch_func45_0 -> created_ReplicaSearch_func46_0 { assign p = make_ReplicaSearch_func46(), cap_cid_var103_c[p] = cid_var88_c; },
    created_ReplicaSearch_func46_0 -> started_ReplicaSearch_func46_0 { sync async_ReplicaSearch_func46[p]!; },
    started_ReplicaSearch_func46_0 -> created_ReplicaSearch_func47_0 { assign p = make_ReplicaSearch_func47(), cap_cid_var107_c[p] = cid_var88_c; },
    created_ReplicaSearch_func47_0 -> started_ReplicaSearch_func47_0 { sync async_ReplicaSearch_func47[p]!; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> ending { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var88_c]--, chan_counter[cid_var89_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var88_c] < 0 || chan_counter[cid_var88_c] >= 0; sync receiver_trigger[cid_var88_c]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var88_c]?; assign chan_counter[cid_var89_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var89_timeout] < 0 || chan_counter[cid_var89_timeout] >= 0; sync receiver_trigger[cid_var89_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var89_timeout]?; assign chan_counter[cid_var88_c]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var88_c] < 0 || chan_counter[cid_var88_c] >= 0) && !(chan_buffer[cid_var89_timeout] < 0 || chan_counter[cid_var89_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var88_c]?; assign chan_counter[cid_var89_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var89_timeout]?; assign chan_counter[cid_var88_c]++; },
    select_end_0 -> exit_loop_body_0 { },
    started_ReplicaSearch_func47_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_ReplicaSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ReplicaSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch[pid]!; };
}

process ReplicaSearch_func45(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var99_c = -1;
int cid_var100_c = -1;
int fid_var101 = 44;
int fid_var102_searchReplica = -1;
void initialize() {
    cid_var99_c = cap_cid_var99_c[pid];
}

state
    enter_inlined_First_0,
    made_cid_var100_c_0,
    assigned_fid_var102_searchReplica_0,
    exit_loop_body_0,
    sent_cid_var99_c_0,
    exit_inlined_First_0,
    enter_loop_cond_0,
    sending_cid_var99_c_0,
    started,
    ended,
    exit_loop_cond_0,
    starting,
    ending,
    enter_loop_body_0,
    exit_loop_0,
    receiving_cid_var100_c_0,
    received_cid_var100_c_0;
init
    starting;
trans
    enter_inlined_First_0 -> made_cid_var100_c_0 { assign cid_var100_c = make_chan(0); },
    made_cid_var100_c_0 -> assigned_fid_var102_searchReplica_0 { assign fid_var102_searchReplica = fid_var101; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    assigned_fid_var102_searchReplica_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> receiving_cid_var100_c_0 { sync receiver_trigger[cid_var100_c]!; assign chan_counter[cid_var100_c]--; },
    receiving_cid_var100_c_0 -> received_cid_var100_c_0 { sync receiver_confirm[cid_var100_c]?; },
    received_cid_var100_c_0 -> exit_inlined_First_0 { },
    started -> enter_inlined_First_0 { },
    exit_inlined_First_0 -> sending_cid_var99_c_0 { sync sender_trigger[cid_var99_c]!; assign chan_counter[cid_var99_c]++; },
    sending_cid_var99_c_0 -> sent_cid_var99_c_0 { sync sender_confirm[cid_var99_c]?; },
    sent_cid_var99_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func45[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ReplicaSearch_func45[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func45[pid]!; };
}

process ReplicaSearch_func46(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var103_c = -1;
int cid_var104_c = -1;
int fid_var105 = 44;
int fid_var106_searchReplica = -1;
void initialize() {
    cid_var103_c = cap_cid_var103_c[pid];
}

state
    ended,
    exit_inlined_First_0,
    enter_loop_body_0,
    starting,
    ending,
    exit_loop_0,
    received_cid_var104_c_0,
    sent_cid_var103_c_0,
    assigned_fid_var106_searchReplica_0,
    exit_loop_cond_0,
    exit_loop_body_0,
    enter_loop_cond_0,
    receiving_cid_var104_c_0,
    sending_cid_var103_c_0,
    started,
    enter_inlined_First_0,
    made_cid_var104_c_0;
init
    starting;
trans
    enter_inlined_First_0 -> made_cid_var104_c_0 { assign cid_var104_c = make_chan(0); },
    made_cid_var104_c_0 -> assigned_fid_var106_searchReplica_0 { assign fid_var106_searchReplica = fid_var105; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    assigned_fid_var106_searchReplica_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> receiving_cid_var104_c_0 { sync receiver_trigger[cid_var104_c]!; assign chan_counter[cid_var104_c]--; },
    receiving_cid_var104_c_0 -> received_cid_var104_c_0 { sync receiver_confirm[cid_var104_c]?; },
    received_cid_var104_c_0 -> exit_inlined_First_0 { },
    started -> enter_inlined_First_0 { },
    exit_inlined_First_0 -> sending_cid_var103_c_0 { sync sender_trigger[cid_var103_c]!; assign chan_counter[cid_var103_c]++; },
    sending_cid_var103_c_0 -> sent_cid_var103_c_0 { sync sender_confirm[cid_var103_c]?; },
    sent_cid_var103_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func46[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ReplicaSearch_func46[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func46[pid]!; };
}

process ReplicaSearch_func47(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var107_c = -1;
int cid_var108_c = -1;
int fid_var109 = 44;
int fid_var110_searchReplica = -1;
void initialize() {
    cid_var107_c = cap_cid_var107_c[pid];
}

state
    assigned_fid_var110_searchReplica_0,
    exit_loop_cond_0,
    started,
    enter_inlined_First_0,
    made_cid_var108_c_0,
    received_cid_var108_c_0,
    sending_cid_var107_c_0,
    ending,
    ended,
    exit_loop_body_0,
    exit_loop_0,
    sent_cid_var107_c_0,
    starting,
    exit_inlined_First_0,
    receiving_cid_var108_c_0,
    enter_loop_cond_0,
    enter_loop_body_0;
init
    starting;
trans
    enter_inlined_First_0 -> made_cid_var108_c_0 { assign cid_var108_c = make_chan(0); },
    made_cid_var108_c_0 -> assigned_fid_var110_searchReplica_0 { assign fid_var110_searchReplica = fid_var109; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> exit_loop_body_0 { },
    assigned_fid_var110_searchReplica_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> receiving_cid_var108_c_0 { sync receiver_trigger[cid_var108_c]!; assign chan_counter[cid_var108_c]--; },
    receiving_cid_var108_c_0 -> received_cid_var108_c_0 { sync receiver_confirm[cid_var108_c]?; },
    received_cid_var108_c_0 -> exit_inlined_First_0 { },
    started -> enter_inlined_First_0 { },
    exit_inlined_First_0 -> sending_cid_var107_c_0 { sync sender_trigger[cid_var107_c]!; assign chan_counter[cid_var107_c]++; },
    sending_cid_var107_c_0 -> sent_cid_var107_c_0 { sync sender_confirm[cid_var107_c]?; },
    sent_cid_var107_c_0 -> ending { },
    starting -> started { sync async_ReplicaSearch_func47[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_ReplicaSearch_func47[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch_func47[pid]!; };
}

process SequentialSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;

state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_SequentialSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_SequentialSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_SequentialSearch[pid]!; };
}

process fakeSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int fid_var81 = 37;

state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_fakeSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fakeSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fakeSearch[pid]!; };
}

process fakeSearch_func37(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;

state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_fakeSearch_func37[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fakeSearch_func37[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fakeSearch_func37[pid]!; };
}

process main() {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var90_c = -1;
int cid_var91_timeout = -1;

state
    created_ReplicaSearch_func45_0,
    started_ReplicaSearch_func45_0,
    created_ReplicaSearch_func47_0,
    started_ReplicaSearch_func47_0,
    select_case_2_enter_0,
    starting,
    started,
    exit_inlined_ReplicaSearch_0,
    select_pass_1_0,
    select_case_2_trigger_0,
    exit_loop_body_0,
    select_end_0,
    select_case_1_enter_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    started_ReplicaSearch_func46_0,
    select_pass_2_0,
    select_case_1_trigger_0,
    ended,
    made_cid_var90_c_0,
    created_ReplicaSearch_func46_0,
    ending,
    enter_inlined_ReplicaSearch_0,
    exit_loop_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_inlined_ReplicaSearch_0 -> made_cid_var90_c_0 { assign cid_var90_c = make_chan(0); },
    made_cid_var90_c_0 -> created_ReplicaSearch_func45_0 { assign p = make_ReplicaSearch_func45(), cap_cid_var99_c[p] = cid_var90_c; },
    created_ReplicaSearch_func45_0 -> started_ReplicaSearch_func45_0 { sync async_ReplicaSearch_func45[p]!; },
    started_ReplicaSearch_func45_0 -> created_ReplicaSearch_func46_0 { assign p = make_ReplicaSearch_func46(), cap_cid_var103_c[p] = cid_var90_c; },
    created_ReplicaSearch_func46_0 -> started_ReplicaSearch_func46_0 { sync async_ReplicaSearch_func46[p]!; },
    started_ReplicaSearch_func46_0 -> created_ReplicaSearch_func47_0 { assign p = make_ReplicaSearch_func47(), cap_cid_var107_c[p] = cid_var90_c; },
    created_ReplicaSearch_func47_0 -> started_ReplicaSearch_func47_0 { sync async_ReplicaSearch_func47[p]!; },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> exit_inlined_ReplicaSearch_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var90_c]--, chan_counter[cid_var91_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var90_c] < 0 || chan_counter[cid_var90_c] >= 0; sync receiver_trigger[cid_var90_c]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var90_c]?; assign chan_counter[cid_var91_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var91_timeout] < 0 || chan_counter[cid_var91_timeout] >= 0; sync receiver_trigger[cid_var91_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var91_timeout]?; assign chan_counter[cid_var90_c]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var90_c] < 0 || chan_counter[cid_var90_c] >= 0) && !(chan_buffer[cid_var91_timeout] < 0 || chan_counter[cid_var91_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var90_c]?; assign chan_counter[cid_var91_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var91_timeout]?; assign chan_counter[cid_var90_c]++; },
    select_end_0 -> exit_loop_body_0 { },
    started_ReplicaSearch_func47_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_cond_0 -> exit_loop_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> exit_inlined_ReplicaSearch_0 { },
    started -> enter_inlined_ReplicaSearch_0 { },
    exit_inlined_ReplicaSearch_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
Channel5 = Channel(5);
Channel6 = Channel(6);
Channel7 = Channel(7);
Channel8 = Channel(8);
Channel9 = Channel(9);
ConcurrentSearch0 = ConcurrentSearch(0);
ConcurrentSearchWithCutOff0 = ConcurrentSearchWithCutOff(0);
ConcurrentSearchWithCutOff_func410 = ConcurrentSearchWithCutOff_func41(0);
ConcurrentSearchWithCutOff_func420 = ConcurrentSearchWithCutOff_func42(0);
ConcurrentSearchWithCutOff_func430 = ConcurrentSearchWithCutOff_func43(0);
ConcurrentSearch_func380 = ConcurrentSearch_func38(0);
ConcurrentSearch_func390 = ConcurrentSearch_func39(0);
ConcurrentSearch_func400 = ConcurrentSearch_func40(0);
First0 = First(0);
First_func440 = First_func44(0);
ReplicaSearch0 = ReplicaSearch(0);
ReplicaSearch_func450 = ReplicaSearch_func45(0);
ReplicaSearch_func460 = ReplicaSearch_func46(0);
ReplicaSearch_func470 = ReplicaSearch_func47(0);
SequentialSearch0 = SequentialSearch(0);
fakeSearch0 = fakeSearch(0);
fakeSearch_func370 = fakeSearch_func37(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, Channel5, Channel6, Channel7, Channel8, Channel9, ConcurrentSearch0, ConcurrentSearchWithCutOff0, ConcurrentSearchWithCutOff_func410, ConcurrentSearchWithCutOff_func420, ConcurrentSearchWithCutOff_func430, ConcurrentSearch_func380, ConcurrentSearch_func390, ConcurrentSearch_func400, First0, First_func440, ReplicaSearch0, ReplicaSearch_func450, ReplicaSearch_func460, ReplicaSearch_func470, SequentialSearch0, fakeSearch0, fakeSearch_func370, main;

