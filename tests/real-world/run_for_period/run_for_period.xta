// Place global declarations here.
int fid_var218_continuous_process = 114;
int fid_var219_main = 115;

int continuous_process_count = 0;
int res_continuous_process_0_Chan[1];
chan async_continuous_process[1];
chan sync_continuous_process[1];
int make_continuous_process() {
    int pid = continuous_process_count;
    continuous_process_count++;
    return pid;
}

int continuous_process_func116_count = 0;
int cap_cid_var228_c[1];
chan async_continuous_process_func116[1];
chan sync_continuous_process_func116[1];
int make_continuous_process_func116() {
    int pid = continuous_process_func116_count;
    continuous_process_func116_count++;
    return pid;
}

int chan_count = 0;
int chan_counter[10];
int chan_buffer[10];
chan sender_trigger[10];
chan sender_confirm[10];
chan receiver_trigger[10];
chan receiver_confirm[10];
chan close[10];

int make_chan(int buffer) {
    int cid = chan_count;
    chan_count++;
    chan_counter[cid] = 0;
    chan_buffer[cid] = buffer;
    return cid;
}


process Channel(int[0, 9] i) {
// Place local declarations here.

state
    confirming_b,
    closing,
    confirming_closed,
    bad,
    idle,
    confirming_a,
    new_receiver,
    closed,
    new_sender;
commit
    confirming_b,
    closing,
    confirming_closed,
    new_sender,
    confirming_a,
    new_receiver;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; assign chan_counter[i] = 1; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process continuous_process(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var224_c = -1;

state
    made_cid_var224_c_0,
    created_continuous_process_func116_0,
    started_continuous_process_func116_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> made_cid_var224_c_0 { assign cid_var224_c = make_chan(0); },
    made_cid_var224_c_0 -> created_continuous_process_func116_0 { assign p = make_continuous_process_func116(), cap_cid_var228_c[p] = cid_var224_c; },
    created_continuous_process_func116_0 -> started_continuous_process_func116_0 { sync async_continuous_process_func116[p]!; },
    started_continuous_process_func116_0 -> ending { assign res_continuous_process_0_Chan[pid] = cid_var224_c; },
    starting -> started { sync async_continuous_process[pid]?; assign is_sync = false; },
    starting -> started { sync sync_continuous_process[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_continuous_process[pid]!; };
}

process continuous_process_func116(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var228_c = -1;
void initialize() {
    cid_var228_c = cap_cid_var228_c[pid];
}

state
    enter_loop_cond_0,
    exit_loop_body_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0,
    sending_cid_var228_c_0,
    starting,
    started,
    ending,
    ended,
    sent_cid_var228_c_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_cid_var228_c_0 { sync sender_trigger[cid_var228_c]!; assign chan_counter[cid_var228_c]++; },
    sending_cid_var228_c_0 -> sent_cid_var228_c_0 { sync sender_confirm[cid_var228_c]?; },
    sent_cid_var228_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_continuous_process_func116[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_continuous_process_func116[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_continuous_process_func116[pid]!; };
}

process main() {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var225_c = -1;
int cid_var226_timeout = -1;
int cid_var227_c = -1;

state
    select_case_2_enter_0,
    select_pass_1_0,
    started,
    ended,
    created_continuous_process_func116_0,
    enter_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0,
    select_case_1_enter_0,
    starting,
    ending,
    enter_inlined_continuous_process_0,
    exit_inlined_continuous_process_0,
    made_cid_var227_c_0,
    exit_loop_body_0,
    select_end_0,
    select_case_1_trigger_0,
    started_continuous_process_func116_0,
    assigned_cid_var225_c_0,
    exit_loop_cond_0,
    select_pass_2_0,
    select_case_2_trigger_0;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_inlined_continuous_process_0 -> made_cid_var227_c_0 { assign cid_var227_c = make_chan(0); },
    made_cid_var227_c_0 -> created_continuous_process_func116_0 { assign p = make_continuous_process_func116(), cap_cid_var228_c[p] = cid_var227_c; },
    created_continuous_process_func116_0 -> started_continuous_process_func116_0 { sync async_continuous_process_func116[p]!; },
    started_continuous_process_func116_0 -> assigned_cid_var225_c_0 { assign cid_var225_c = cid_var227_c; },
    assigned_cid_var225_c_0 -> exit_inlined_continuous_process_0 { },
    started -> enter_inlined_continuous_process_0 { },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> select_end_0 { },
    select_case_2_enter_0 -> select_end_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var225_c]--, chan_counter[cid_var226_timeout]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var225_c] < 0 || chan_counter[cid_var225_c] >= 0; sync receiver_trigger[cid_var225_c]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var225_c]?; assign chan_counter[cid_var226_timeout]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var226_timeout] < 0 || chan_counter[cid_var226_timeout] >= 0; sync receiver_trigger[cid_var226_timeout]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var226_timeout]?; assign chan_counter[cid_var225_c]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var225_c] < 0 || chan_counter[cid_var225_c] >= 0) && !(chan_buffer[cid_var226_timeout] < 0 || chan_counter[cid_var226_timeout] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var225_c]?; assign chan_counter[cid_var226_timeout]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var226_timeout]?; assign chan_counter[cid_var225_c]++; },
    select_end_0 -> exit_loop_body_0 { },
    exit_inlined_continuous_process_0 -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
Channel5 = Channel(5);
Channel6 = Channel(6);
Channel7 = Channel(7);
Channel8 = Channel(8);
Channel9 = Channel(9);
continuous_process0 = continuous_process(0);
continuous_process_func1160 = continuous_process_func116(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, Channel5, Channel6, Channel7, Channel8, Channel9, continuous_process0, continuous_process_func1160, main;

