// Place global declarations here.
int fid_var147_fanin1 = 82;
int fid_var148_fanin2 = 83;
int fid_var149_fanin3 = 84;
int fid_var150_process_A = 85;
int fid_var151_process_B = 86;
int fid_var152_process_Aprime = 87;
int fid_var153_process_Bprime = 88;
int fid_var154_main = 89;

int fanin1_count = 0;
int arg_cid_var185_input1[1];
int arg_cid_var186_input2[1];
int res_fanin1_0_Chan[1];
chan async_fanin1[1];
chan sync_fanin1[1];
int make_fanin1() {
    int pid = fanin1_count;
    fanin1_count++;
    return pid;
}

int fanin2_count = 0;
int arg_cid_var188_input1[1];
int arg_cid_var189_input2[1];
int res_fanin2_0_Chan[1];
chan async_fanin2[1];
chan sync_fanin2[1];
int make_fanin2() {
    int pid = fanin2_count;
    fanin2_count++;
    return pid;
}

int fanin3_count = 0;
int arg_cid_var192_input2[1];
int arg_cid_var191_input1[1];
int res_fanin3_0_Chan[1];
chan async_fanin3[1];
chan sync_fanin3[1];
int make_fanin3() {
    int pid = fanin3_count;
    fanin3_count++;
    return pid;
}

int process_A_count = 0;
int res_process_A_0_Chan[1];
chan async_process_A[1];
chan sync_process_A[1];
int make_process_A() {
    int pid = process_A_count;
    process_A_count++;
    return pid;
}

int process_B_count = 0;
int res_process_B_0_Chan[1];
chan async_process_B[1];
chan sync_process_B[1];
int make_process_B() {
    int pid = process_B_count;
    process_B_count++;
    return pid;
}

int process_Aprime_count = 0;
int res_process_Aprime_0_Chan[1];
chan async_process_Aprime[1];
chan sync_process_Aprime[1];
int make_process_Aprime() {
    int pid = process_Aprime_count;
    process_Aprime_count++;
    return pid;
}

int process_Bprime_count = 0;
int res_process_Bprime_0_Chan[1];
chan async_process_Bprime[1];
chan sync_process_Bprime[1];
int make_process_Bprime() {
    int pid = process_Bprime_count;
    process_Bprime_count++;
    return pid;
}

int fanin1_func90_count = 0;
int cap_cid_var204_input1[1];
int cap_cid_var205_c[1];
chan async_fanin1_func90[1];
chan sync_fanin1_func90[1];
int make_fanin1_func90() {
    int pid = fanin1_func90_count;
    fanin1_func90_count++;
    return pid;
}

int fanin1_func91_count = 0;
int cap_cid_var206_input2[1];
int cap_cid_var207_c[1];
chan async_fanin1_func91[1];
chan sync_fanin1_func91[1];
int make_fanin1_func91() {
    int pid = fanin1_func91_count;
    fanin1_func91_count++;
    return pid;
}

int fanin2_func92_count = 0;
int cap_cid_var208_input1[1];
int cap_cid_var209_c[1];
int cap_cid_var210_input2[1];
chan async_fanin2_func92[1];
chan sync_fanin2_func92[1];
int make_fanin2_func92() {
    int pid = fanin2_func92_count;
    fanin2_func92_count++;
    return pid;
}

int fanin3_func93_count = 0;
int cap_cid_var212_c[1];
int cap_cid_var213_input2[1];
int cap_cid_var211_input1[1];
chan async_fanin3_func93[1];
chan sync_fanin3_func93[1];
int make_fanin3_func93() {
    int pid = fanin3_func93_count;
    fanin3_func93_count++;
    return pid;
}

int process_A_func94_count = 0;
int cap_cid_var214_c[1];
chan async_process_A_func94[1];
chan sync_process_A_func94[1];
int make_process_A_func94() {
    int pid = process_A_func94_count;
    process_A_func94_count++;
    return pid;
}

int process_B_func95_count = 0;
int cap_cid_var215_c[1];
chan async_process_B_func95[1];
chan sync_process_B_func95[1];
int make_process_B_func95() {
    int pid = process_B_func95_count;
    process_B_func95_count++;
    return pid;
}

int process_Aprime_func96_count = 0;
int cap_cid_var216_c[1];
chan async_process_Aprime_func96[1];
chan sync_process_Aprime_func96[1];
int make_process_Aprime_func96() {
    int pid = process_Aprime_func96_count;
    process_Aprime_func96_count++;
    return pid;
}

int process_Bprime_func97_count = 0;
int cap_cid_var217_c[1];
chan async_process_Bprime_func97[1];
chan sync_process_Bprime_func97[1];
int make_process_Bprime_func97() {
    int pid = process_Bprime_func97_count;
    process_Bprime_func97_count++;
    return pid;
}

int chan_count = 0;
int chan_counter[10];
int chan_buffer[10];
chan sender_trigger[10];
chan sender_confirm[10];
chan receiver_trigger[10];
chan receiver_confirm[10];
chan close[10];

int make_chan(int buffer) {
    int cid = chan_count;
    chan_count++;
    chan_counter[cid] = 0;
    chan_buffer[cid] = buffer;
    return cid;
}


process Channel(int[0, 9] i) {
// Place local declarations here.

state
    confirming_a,
    new_receiver,
    closed,
    confirming_closed,
    new_sender,
    confirming_b,
    closing,
    bad,
    idle;
commit
    closing,
    confirming_b,
    new_receiver,
    confirming_closed,
    new_sender,
    confirming_a;
init
    idle;
trans
    idle -> new_sender { sync sender_trigger[i]?; },
    new_sender -> idle { guard chan_counter[i] > 
chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= 
chan_buffer[i]; sync sender_confirm[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_confirm[i]!; },
    idle -> new_receiver { sync receiver_trigger[i]?; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_confirm[i]!; },
    confirming_b -> idle { guard chan_counter[i] < 
chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= 
chan_buffer[i]; sync sender_confirm[i]!; },
    idle -> closing { guard chan_counter[i] <= chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closing -> closing { guard chan_counter[i] < 0; sync receiver_confirm[i]!; assign chan_counter[i]++; },
    closing -> closed { guard chan_counter[i] >= 0; assign chan_counter[i] = 1; },
    idle -> bad { guard chan_counter[i] > 
chan_buffer[i]; sync close[i]?; assign chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_trigger[i]?; },
    confirming_closed -> closed { sync receiver_confirm[i]!; },
    closed -> bad { sync sender_trigger[i]?; },
    closed -> bad { sync close[i]?; };
}

process fanin1(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var185_input1 = -1;
int cid_var186_input2 = -1;
int cid_var187_c = -1;
void initialize() {
    cid_var185_input1 = arg_cid_var185_input1[pid];
    cid_var186_input2 = arg_cid_var186_input2[pid];
}

state
    started_fanin1_func91_0,
    starting,
    ending,
    started_fanin1_func90_0,
    created_fanin1_func90_0,
    created_fanin1_func91_0,
    started,
    ended,
    made_cid_var187_c_0;
init
    starting;
trans
    started -> made_cid_var187_c_0 { assign cid_var187_c = make_chan(0); },
    made_cid_var187_c_0 -> created_fanin1_func90_0 { assign p = make_fanin1_func90(), cap_cid_var204_input1[p] = cid_var185_input1, cap_cid_var205_c[p] = cid_var187_c; },
    created_fanin1_func90_0 -> started_fanin1_func90_0 { sync async_fanin1_func90[p]!; },
    started_fanin1_func90_0 -> created_fanin1_func91_0 { assign p = make_fanin1_func91(), cap_cid_var206_input2[p] = cid_var186_input2, cap_cid_var207_c[p] = cid_var187_c; },
    created_fanin1_func91_0 -> started_fanin1_func91_0 { sync async_fanin1_func91[p]!; },
    started_fanin1_func91_0 -> ending { assign res_fanin1_0_Chan[pid] = cid_var187_c; },
    starting -> started { sync async_fanin1[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin1[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin1[pid]!; };
}

process fanin1_func90(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var204_input1 = -1;
int cid_var205_c = -1;
void initialize() {
    cid_var204_input1 = cap_cid_var204_input1[pid];
    cid_var205_c = cap_cid_var205_c[pid];
}

state
    starting,
    started,
    enter_loop_body_0,
    exit_loop_body_0,
    receiving_cid_var204_input1_0,
    received_cid_var204_input1_0,
    ending,
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    exit_loop_0,
    sending_cid_var205_c_0,
    sent_cid_var205_c_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_cid_var204_input1_0 { sync receiver_trigger[cid_var204_input1]!; assign chan_counter[cid_var204_input1]--; },
    receiving_cid_var204_input1_0 -> received_cid_var204_input1_0 { sync receiver_confirm[cid_var204_input1]?; },
    received_cid_var204_input1_0 -> sending_cid_var205_c_0 { sync sender_trigger[cid_var205_c]!; assign chan_counter[cid_var205_c]++; },
    sending_cid_var205_c_0 -> sent_cid_var205_c_0 { sync sender_confirm[cid_var205_c]?; },
    sent_cid_var205_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_fanin1_func90[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin1_func90[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin1_func90[pid]!; };
}

process fanin1_func91(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var206_input2 = -1;
int cid_var207_c = -1;
void initialize() {
    cid_var206_input2 = cap_cid_var206_input2[pid];
    cid_var207_c = cap_cid_var207_c[pid];
}

state
    sending_cid_var207_c_0,
    started,
    exit_loop_body_0,
    receiving_cid_var206_input2_0,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    exit_loop_0,
    received_cid_var206_input2_0,
    starting,
    ending,
    ended,
    sent_cid_var207_c_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_cid_var206_input2_0 { sync receiver_trigger[cid_var206_input2]!; assign chan_counter[cid_var206_input2]--; },
    receiving_cid_var206_input2_0 -> received_cid_var206_input2_0 { sync receiver_confirm[cid_var206_input2]?; },
    received_cid_var206_input2_0 -> sending_cid_var207_c_0 { sync sender_trigger[cid_var207_c]!; assign chan_counter[cid_var207_c]++; },
    sending_cid_var207_c_0 -> sent_cid_var207_c_0 { sync sender_confirm[cid_var207_c]?; },
    sent_cid_var207_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_fanin1_func91[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin1_func91[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin1_func91[pid]!; };
}

process fanin2(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var188_input1 = -1;
int cid_var189_input2 = -1;
int cid_var190_c = -1;
void initialize() {
    cid_var189_input2 = arg_cid_var189_input2[pid];
    cid_var188_input1 = arg_cid_var188_input1[pid];
}

state
    starting,
    started,
    ending,
    ended,
    made_cid_var190_c_0,
    created_fanin2_func92_0,
    started_fanin2_func92_0;
init
    starting;
trans
    started -> made_cid_var190_c_0 { assign cid_var190_c = make_chan(0); },
    made_cid_var190_c_0 -> created_fanin2_func92_0 { assign p = make_fanin2_func92(), cap_cid_var208_input1[p] = cid_var188_input1, cap_cid_var209_c[p] = cid_var190_c, cap_cid_var210_input2[p] = cid_var189_input2; },
    created_fanin2_func92_0 -> started_fanin2_func92_0 { sync async_fanin2_func92[p]!; },
    started_fanin2_func92_0 -> ending { assign res_fanin2_0_Chan[pid] = cid_var190_c; },
    starting -> started { sync async_fanin2[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin2[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin2[pid]!; };
}

process fanin2_func92(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var208_input1 = -1;
int cid_var209_c = -1;
int cid_var210_input2 = -1;
void initialize() {
    cid_var210_input2 = cap_cid_var210_input2[pid];
    cid_var208_input1 = cap_cid_var208_input1[pid];
    cid_var209_c = cap_cid_var209_c[pid];
}

state
    select_end_0,
    select_pass_2_0,
    select_case_2_enter_0,
    sent_cid_var209_c_1,
    select_pass_1_0,
    select_case_1_trigger_0,
    exit_loop_cond_0,
    enter_loop_cond_0,
    sending_cid_var209_c_0,
    starting,
    enter_loop_body_0,
    exit_loop_body_0,
    exit_loop_0,
    select_case_1_enter_0,
    sent_cid_var209_c_0,
    sending_cid_var209_c_1,
    ending,
    ended,
    select_case_2_trigger_0,
    started;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> sending_cid_var209_c_0 { sync sender_trigger[cid_var209_c]!; assign chan_counter[cid_var209_c]++; },
    sending_cid_var209_c_0 -> sent_cid_var209_c_0 { sync sender_confirm[cid_var209_c]?; },
    sent_cid_var209_c_0 -> select_end_0 { },
    select_case_2_enter_0 -> sending_cid_var209_c_1 { sync sender_trigger[cid_var209_c]!; assign chan_counter[cid_var209_c]++; },
    sending_cid_var209_c_1 -> sent_cid_var209_c_1 { sync sender_confirm[cid_var209_c]?; },
    sent_cid_var209_c_1 -> select_end_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var208_input1]--, chan_counter[cid_var210_input2]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var208_input1] < 0 || chan_counter[cid_var208_input1] >= 0; sync receiver_trigger[cid_var208_input1]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var208_input1]?; assign chan_counter[cid_var210_input2]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var210_input2] < 0 || chan_counter[cid_var210_input2] >= 0; sync receiver_trigger[cid_var210_input2]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var210_input2]?; assign chan_counter[cid_var208_input1]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var208_input1] < 0 || chan_counter[cid_var208_input1] >= 0) && !(chan_buffer[cid_var210_input2] < 0 || chan_counter[cid_var210_input2] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var208_input1]?; assign chan_counter[cid_var210_input2]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var210_input2]?; assign chan_counter[cid_var208_input1]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_fanin2_func92[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin2_func92[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin2_func92[pid]!; };
}

process fanin3(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var191_input1 = -1;
int cid_var192_input2 = -1;
int cid_var193_c = -1;
void initialize() {
    cid_var191_input1 = arg_cid_var191_input1[pid];
    cid_var192_input2 = arg_cid_var192_input2[pid];
}

state
    made_cid_var193_c_0,
    created_fanin3_func93_0,
    started_fanin3_func93_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> made_cid_var193_c_0 { assign cid_var193_c = make_chan(0); },
    made_cid_var193_c_0 -> created_fanin3_func93_0 { assign p = make_fanin3_func93(), cap_cid_var211_input1[p] = cid_var191_input1, cap_cid_var212_c[p] = cid_var193_c, cap_cid_var213_input2[p] = cid_var192_input2; },
    created_fanin3_func93_0 -> started_fanin3_func93_0 { sync async_fanin3_func93[p]!; },
    started_fanin3_func93_0 -> ending { assign res_fanin3_0_Chan[pid] = cid_var193_c; },
    starting -> started { sync async_fanin3[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin3[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin3[pid]!; };
}

process fanin3_func93(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var211_input1 = -1;
int cid_var212_c = -1;
int cid_var213_input2 = -1;
void initialize() {
    cid_var211_input1 = cap_cid_var211_input1[pid];
    cid_var212_c = cap_cid_var212_c[pid];
    cid_var213_input2 = cap_cid_var213_input2[pid];
}

state
    sending_cid_var212_c_1,
    starting,
    ending,
    ended,
    enter_loop_cond_0,
    exit_loop_body_0,
    select_case_1_enter_0,
    select_case_2_enter_0,
    select_case_1_trigger_0,
    select_case_2_trigger_0,
    started,
    exit_loop_cond_0,
    enter_loop_body_0,
    select_end_0,
    select_pass_2_0,
    sent_cid_var212_c_0,
    select_pass_1_0,
    sending_cid_var212_c_0,
    exit_loop_0,
    sent_cid_var212_c_1;
commit
    select_pass_1_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    select_case_1_enter_0 -> sending_cid_var212_c_0 { sync sender_trigger[cid_var212_c]!; assign chan_counter[cid_var212_c]++; },
    sending_cid_var212_c_0 -> sent_cid_var212_c_0 { sync sender_confirm[cid_var212_c]?; },
    sent_cid_var212_c_0 -> select_end_0 { },
    select_case_2_enter_0 -> sending_cid_var212_c_1 { sync sender_trigger[cid_var212_c]!; assign chan_counter[cid_var212_c]++; },
    sending_cid_var212_c_1 -> sent_cid_var212_c_1 { sync sender_confirm[cid_var212_c]?; },
    sent_cid_var212_c_1 -> select_end_0 { },
    enter_loop_body_0 -> select_pass_1_0 { assign chan_counter[cid_var211_input1]--, chan_counter[cid_var213_input2]--; },
    select_pass_1_0 -> select_case_1_trigger_0 { guard chan_buffer[cid_var211_input1] < 0 || chan_counter[cid_var211_input1] >= 0; sync receiver_trigger[cid_var211_input1]!; },
    select_case_1_trigger_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var211_input1]?; assign chan_counter[cid_var213_input2]++; },
    select_pass_1_0 -> select_case_2_trigger_0 { guard chan_buffer[cid_var213_input2] < 0 || chan_counter[cid_var213_input2] >= 0; sync receiver_trigger[cid_var213_input2]!; },
    select_case_2_trigger_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var213_input2]?; assign chan_counter[cid_var211_input1]++; },
    select_pass_1_0 -> select_pass_2_0 { guard !(chan_buffer[cid_var211_input1] < 0 || chan_counter[cid_var211_input1] >= 0) && !(chan_buffer[cid_var213_input2] < 0 || chan_counter[cid_var213_input2] >= 0); },
    select_pass_2_0 -> select_case_1_enter_0 { sync receiver_confirm[cid_var211_input1]?; assign chan_counter[cid_var213_input2]++; },
    select_pass_2_0 -> select_case_2_enter_0 { sync receiver_confirm[cid_var213_input2]?; assign chan_counter[cid_var211_input1]++; },
    select_end_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_fanin3_func93[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_fanin3_func93[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fanin3_func93[pid]!; };
}

process main() {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var198 = -1;
int cid_var199 = -1;
int cid_var200_c = -1;
int cid_var201_c = -1;
int cid_var202_c = -1;
int cid_var203_c = -1;
int i0 = 0;

state
    starting,
    enter_inlined_fanin3_0,
    made_cid_var203_c_0,
    exit_loop_body_0,
    exit_loop_0,
    enter_inlined_process_Aprime_0,
    created_process_Bprime_func97_0,
    assigned_cid_var199_0,
    receiving_cid_var200_c_0,
    created_process_Aprime_func96_0,
    assigned_cid_var198_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    started_process_Bprime_func97_0,
    exit_inlined_fanin3_0,
    started_process_Aprime_func96_0,
    started_fanin3_func93_0,
    received_cid_var200_c_0,
    ending,
    ended,
    made_cid_var202_c_0,
    made_cid_var201_c_0,
    enter_inlined_process_Bprime_0,
    created_fanin3_func93_0,
    assigned_cid_var200_c_0,
    exit_inlined_process_Bprime_0,
    enter_loop_cond_0,
    started,
    exit_inlined_process_Aprime_0;
init
    starting;
trans
    enter_inlined_process_Aprime_0 -> made_cid_var201_c_0 { assign cid_var201_c = make_chan(0); },
    made_cid_var201_c_0 -> created_process_Aprime_func96_0 { assign p = make_process_Aprime_func96(), cap_cid_var216_c[p] = cid_var201_c; },
    created_process_Aprime_func96_0 -> started_process_Aprime_func96_0 { sync async_process_Aprime_func96[p]!; },
    started_process_Aprime_func96_0 -> assigned_cid_var198_0 { assign cid_var198 = cid_var201_c; },
    assigned_cid_var198_0 -> exit_inlined_process_Aprime_0 { },
    started -> enter_inlined_process_Aprime_0 { },
    enter_inlined_process_Bprime_0 -> made_cid_var202_c_0 { assign cid_var202_c = make_chan(0); },
    made_cid_var202_c_0 -> created_process_Bprime_func97_0 { assign p = make_process_Bprime_func97(), cap_cid_var217_c[p] = cid_var202_c; },
    created_process_Bprime_func97_0 -> started_process_Bprime_func97_0 { sync async_process_Bprime_func97[p]!; },
    started_process_Bprime_func97_0 -> assigned_cid_var199_0 { assign cid_var199 = cid_var202_c; },
    assigned_cid_var199_0 -> exit_inlined_process_Bprime_0 { },
    exit_inlined_process_Aprime_0 -> enter_inlined_process_Bprime_0 { },
    enter_inlined_fanin3_0 -> made_cid_var203_c_0 { assign cid_var203_c = make_chan(0); },
    made_cid_var203_c_0 -> created_fanin3_func93_0 { assign p = make_fanin3_func93(), cap_cid_var211_input1[p] = cid_var198, cap_cid_var212_c[p] = cid_var203_c, cap_cid_var213_input2[p] = cid_var199; },
    created_fanin3_func93_0 -> started_fanin3_func93_0 { sync async_fanin3_func93[p]!; },
    started_fanin3_func93_0 -> assigned_cid_var200_c_0 { assign cid_var200_c = cid_var203_c; },
    assigned_cid_var200_c_0 -> exit_inlined_fanin3_0 { },
    exit_inlined_process_Bprime_0 -> enter_inlined_fanin3_0 { },
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> receiving_cid_var200_c_0 { sync receiver_trigger[cid_var200_c]!; assign chan_counter[cid_var200_c]--; },
    receiving_cid_var200_c_0 -> received_cid_var200_c_0 { sync receiver_confirm[cid_var200_c]?; },
    received_cid_var200_c_0 -> exit_loop_body_0 { },
    exit_inlined_fanin3_0 -> enter_loop_cond_0 { assign i0 = 0; },
    exit_loop_cond_0 -> enter_loop_body_0 { guard i0 < 10; },
    exit_loop_cond_0 -> exit_loop_0 { guard i0 >= 10; },
    exit_loop_body_0 -> enter_loop_cond_0 { assign i0++; },
    exit_loop_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process process_A(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var194_c = -1;

state
    made_cid_var194_c_0,
    created_process_A_func94_0,
    started_process_A_func94_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> made_cid_var194_c_0 { assign cid_var194_c = make_chan(0); },
    made_cid_var194_c_0 -> created_process_A_func94_0 { assign p = make_process_A_func94(), cap_cid_var214_c[p] = cid_var194_c; },
    created_process_A_func94_0 -> started_process_A_func94_0 { sync async_process_A_func94[p]!; },
    started_process_A_func94_0 -> ending { assign res_process_A_0_Chan[pid] = cid_var194_c; },
    starting -> started { sync async_process_A[pid]?; assign is_sync = false; },
    starting -> started { sync sync_process_A[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_A[pid]!; };
}

process process_A_func94(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var214_c = -1;
void initialize() {
    cid_var214_c = cap_cid_var214_c[pid];
}

state
    exit_loop_cond_0,
    enter_loop_body_0,
    sending_cid_var214_c_0,
    starting,
    started,
    ending,
    enter_loop_cond_0,
    ended,
    exit_loop_body_0,
    exit_loop_0,
    sent_cid_var214_c_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_cid_var214_c_0 { sync sender_trigger[cid_var214_c]!; assign chan_counter[cid_var214_c]++; },
    sending_cid_var214_c_0 -> sent_cid_var214_c_0 { sync sender_confirm[cid_var214_c]?; },
    sent_cid_var214_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_process_A_func94[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_process_A_func94[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_A_func94[pid]!; };
}

process process_Aprime(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var196_c = -1;

state
    started_process_Aprime_func96_0,
    starting,
    started,
    ending,
    ended,
    made_cid_var196_c_0,
    created_process_Aprime_func96_0;
init
    starting;
trans
    started -> made_cid_var196_c_0 { assign cid_var196_c = make_chan(0); },
    made_cid_var196_c_0 -> created_process_Aprime_func96_0 { assign p = make_process_Aprime_func96(), cap_cid_var216_c[p] = cid_var196_c; },
    created_process_Aprime_func96_0 -> started_process_Aprime_func96_0 { sync async_process_Aprime_func96[p]!; },
    started_process_Aprime_func96_0 -> ending { assign res_process_Aprime_0_Chan[pid] = cid_var196_c; },
    starting -> started { sync async_process_Aprime[pid]?; assign is_sync = false; },
    starting -> started { sync sync_process_Aprime[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_Aprime[pid]!; };
}

process process_Aprime_func96(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var216_c = -1;
void initialize() {
    cid_var216_c = cap_cid_var216_c[pid];
}

state
    enter_loop_cond_0,
    exit_loop_cond_0,
    exit_loop_body_0,
    sent_cid_var216_c_0,
    started,
    ended,
    enter_loop_body_0,
    exit_loop_0,
    sending_cid_var216_c_0,
    starting,
    ending;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_cid_var216_c_0 { sync sender_trigger[cid_var216_c]!; assign chan_counter[cid_var216_c]++; },
    sending_cid_var216_c_0 -> sent_cid_var216_c_0 { sync sender_confirm[cid_var216_c]?; },
    sent_cid_var216_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_process_Aprime_func96[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_process_Aprime_func96[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_Aprime_func96[pid]!; };
}

process process_B(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var195_c = -1;

state
    starting,
    started,
    ending,
    ended,
    made_cid_var195_c_0,
    created_process_B_func95_0,
    started_process_B_func95_0;
init
    starting;
trans
    started -> made_cid_var195_c_0 { assign cid_var195_c = make_chan(0); },
    made_cid_var195_c_0 -> created_process_B_func95_0 { assign p = make_process_B_func95(), cap_cid_var215_c[p] = cid_var195_c; },
    created_process_B_func95_0 -> started_process_B_func95_0 { sync async_process_B_func95[p]!; },
    started_process_B_func95_0 -> ending { assign res_process_B_0_Chan[pid] = cid_var195_c; },
    starting -> started { sync async_process_B[pid]?; assign is_sync = false; },
    starting -> started { sync sync_process_B[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_B[pid]!; };
}

process process_B_func95(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var215_c = -1;
void initialize() {
    cid_var215_c = cap_cid_var215_c[pid];
}

state
    starting,
    ended,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    sending_cid_var215_c_0,
    started,
    ending,
    exit_loop_body_0,
    exit_loop_0,
    sent_cid_var215_c_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_cid_var215_c_0 { sync sender_trigger[cid_var215_c]!; assign chan_counter[cid_var215_c]++; },
    sending_cid_var215_c_0 -> sent_cid_var215_c_0 { sync sender_confirm[cid_var215_c]?; },
    sent_cid_var215_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_process_B_func95[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_process_B_func95[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_B_func95[pid]!; };
}

process process_Bprime(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var197_c = -1;

state
    made_cid_var197_c_0,
    created_process_Bprime_func97_0,
    started_process_Bprime_func97_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> made_cid_var197_c_0 { assign cid_var197_c = make_chan(0); },
    made_cid_var197_c_0 -> created_process_Bprime_func97_0 { assign p = make_process_Bprime_func97(), cap_cid_var217_c[p] = cid_var197_c; },
    created_process_Bprime_func97_0 -> started_process_Bprime_func97_0 { sync async_process_Bprime_func97[p]!; },
    started_process_Bprime_func97_0 -> ending { assign res_process_Bprime_0_Chan[pid] = cid_var197_c; },
    starting -> started { sync async_process_Bprime[pid]?; assign is_sync = false; },
    starting -> started { sync sync_process_Bprime[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_Bprime[pid]!; };
}

process process_Bprime_func97(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var217_c = -1;
void initialize() {
    cid_var217_c = cap_cid_var217_c[pid];
}

state
    sent_cid_var217_c_0,
    starting,
    started,
    ending,
    enter_loop_cond_0,
    exit_loop_cond_0,
    enter_loop_body_0,
    sending_cid_var217_c_0,
    ended,
    exit_loop_body_0,
    exit_loop_0;
init
    starting;
trans
    enter_loop_cond_0 -> exit_loop_cond_0 { },
    enter_loop_body_0 -> sending_cid_var217_c_0 { sync sender_trigger[cid_var217_c]!; assign chan_counter[cid_var217_c]++; },
    sending_cid_var217_c_0 -> sent_cid_var217_c_0 { sync sender_confirm[cid_var217_c]?; },
    sent_cid_var217_c_0 -> exit_loop_body_0 { },
    started -> enter_loop_cond_0 { },
    exit_loop_cond_0 -> enter_loop_body_0 { },
    exit_loop_body_0 -> enter_loop_cond_0 { },
    exit_loop_0 -> ending { },
    starting -> started { sync async_process_Bprime_func97[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_process_Bprime_func97[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_process_Bprime_func97[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
Channel5 = Channel(5);
Channel6 = Channel(6);
Channel7 = Channel(7);
Channel8 = Channel(8);
Channel9 = Channel(9);
fanin10 = fanin1(0);
fanin1_func900 = fanin1_func90(0);
fanin1_func910 = fanin1_func91(0);
fanin20 = fanin2(0);
fanin2_func920 = fanin2_func92(0);
fanin30 = fanin3(0);
fanin3_func930 = fanin3_func93(0);
process_A0 = process_A(0);
process_A_func940 = process_A_func94(0);
process_Aprime0 = process_Aprime(0);
process_Aprime_func960 = process_Aprime_func96(0);
process_B0 = process_B(0);
process_B_func950 = process_B_func95(0);
process_Bprime0 = process_Bprime(0);
process_Bprime_func970 = process_Bprime_func97(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, Channel5, Channel6, Channel7, Channel8, Channel9, fanin10, fanin1_func900, fanin1_func910, fanin20, fanin2_func920, fanin30, fanin3_func930, main, process_A0, process_A_func940, process_Aprime0, process_Aprime_func960, process_B0, process_B_func950, process_Bprime0, process_Bprime_func970;

