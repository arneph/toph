// Place global declarations here.
int fid_var23_fakeSearch = 11;
int fid_var24_SequentialSearch = 12;
int fid_var25_ConcurrentSearch = 13;
int fid_var26_ConcurrentSearchWithCutOff = 14;
int fid_var27_First = 15;
int fid_var28_ReplicaSearch = 16;
int fid_var29_main = 17;

int fakeSearch_count = 0;
chan async_fakeSearch[1];
chan sync_fakeSearch[1];
int make_fakeSearch() {
    int pid = fakeSearch_count;
    fakeSearch_count++;
    return pid;
}

int SequentialSearch_count = 0;
chan async_SequentialSearch[1];
chan sync_SequentialSearch[1];
int make_SequentialSearch() {
    int pid = SequentialSearch_count;
    SequentialSearch_count++;
    return pid;
}

int ConcurrentSearch_count = 0;
chan async_ConcurrentSearch[1];
chan sync_ConcurrentSearch[1];
int make_ConcurrentSearch() {
    int pid = ConcurrentSearch_count;
    ConcurrentSearch_count++;
    return pid;
}

int ConcurrentSearchWithCutOff_count = 0;
chan async_ConcurrentSearchWithCutOff[1];
chan sync_ConcurrentSearchWithCutOff[1];
int make_ConcurrentSearchWithCutOff() {
    int pid = ConcurrentSearchWithCutOff_count;
    ConcurrentSearchWithCutOff_count++;
    return pid;
}

int First_count = 0;
chan async_First[1];
chan sync_First[1];
int make_First() {
    int pid = First_count;
    First_count++;
    return pid;
}

int ReplicaSearch_count = 0;
chan async_ReplicaSearch[1];
chan sync_ReplicaSearch[1];
int make_ReplicaSearch() {
    int pid = ReplicaSearch_count;
    ReplicaSearch_count++;
    return pid;
}

int func18_count = 0;
chan async_func18[1];
chan sync_func18[1];
int make_func18() {
    int pid = func18_count;
    func18_count++;
    return pid;
}

int func19_count = 0;
int cap_cid_var32_c[1];
chan async_func19[1];
chan sync_func19[1];
int make_func19() {
    int pid = func19_count;
    func19_count++;
    return pid;
}

int func20_count = 0;
int cap_cid_var33_c[1];
chan async_func20[1];
chan sync_func20[1];
int make_func20() {
    int pid = func20_count;
    func20_count++;
    return pid;
}

int func21_count = 0;
int cap_cid_var34_c[1];
chan async_func21[1];
chan sync_func21[1];
int make_func21() {
    int pid = func21_count;
    func21_count++;
    return pid;
}

int func22_count = 0;
int cap_cid_var36_c[1];
chan async_func22[1];
chan sync_func22[1];
int make_func22() {
    int pid = func22_count;
    func22_count++;
    return pid;
}

int func23_count = 0;
int cap_cid_var37_c[1];
chan async_func23[1];
chan sync_func23[1];
int make_func23() {
    int pid = func23_count;
    func23_count++;
    return pid;
}

int func24_count = 0;
int cap_cid_var38_c[1];
chan async_func24[1];
chan sync_func24[1];
int make_func24() {
    int pid = func24_count;
    func24_count++;
    return pid;
}

int func25_count = 0;
int cap_cid_var42_c[1];
chan async_func25[1];
chan sync_func25[1];
int make_func25() {
    int pid = func25_count;
    func25_count++;
    return pid;
}

int func26_count = 0;
int cap_cid_var45_c[1];
chan async_func26[1];
chan sync_func26[1];
int make_func26() {
    int pid = func26_count;
    func26_count++;
    return pid;
}

int func27_count = 0;
int cap_cid_var46_c[1];
chan async_func27[1];
chan sync_func27[1];
int make_func27() {
    int pid = func27_count;
    func27_count++;
    return pid;
}

int func28_count = 0;
int cap_cid_var47_c[1];
chan async_func28[1];
chan sync_func28[1];
int make_func28() {
    int pid = func28_count;
    func28_count++;
    return pid;
}

int chan_count = 0;
int chan_counter[10];
int chan_buffer[10];
chan sender_alpha[10];
chan sender_omega[10];
chan receiver_alpha[10];
chan receiver_omega[10];
chan close[10];

int make_chan(int buffer) {
    int cid = chan_count;
    chan_count++;
    chan_counter[cid] = 0;
    chan_buffer[cid] = buffer;
    return cid;
}


process func19(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var32_c = -1;
void initialize() {
    cid_var32_c = cap_cid_var32_c[pid];
}

state
    sent_cid_var32_c_0,
    starting,
    started,
    ending,
    ended,
    sending_cid_var32_c_0;
init
    starting;
trans
    started -> sending_cid_var32_c_0 { sync sender_alpha[cid_var32_c]!; },
    sending_cid_var32_c_0 -> sent_cid_var32_c_0 { sync sender_omega[cid_var32_c]?; },
    sent_cid_var32_c_0 -> ending { },
    starting -> started { sync async_func19[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func19[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func19[pid]!; };
}

process func26(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var45_c = -1;
void initialize() {
    cid_var45_c = cap_cid_var45_c[pid];
}

state
    ending,
    created_First_0,
    started_First_0,
    awaited_First_0,
    sent_cid_var45_c_0,
    starting,
    started,
    ended,
    sending_cid_var45_c_0;
init
    starting;
trans
    started -> created_First_0 { assign p = make_First(); },
    created_First_0 -> started_First_0 { sync sync_First[p]!; },
    started_First_0 -> awaited_First_0 { sync sync_First[p]?; },
    awaited_First_0 -> sending_cid_var45_c_0 { sync sender_alpha[cid_var45_c]!; },
    sending_cid_var45_c_0 -> sent_cid_var45_c_0 { sync sender_omega[cid_var45_c]?; },
    sent_cid_var45_c_0 -> ending { },
    starting -> started { sync async_func26[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func26[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func26[pid]!; };
}

process func28(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var47_c = -1;
void initialize() {
    cid_var47_c = cap_cid_var47_c[pid];
}

state
    ended,
    awaited_First_0,
    sending_cid_var47_c_0,
    sent_cid_var47_c_0,
    starting,
    started,
    ending,
    created_First_0,
    started_First_0;
init
    starting;
trans
    started -> created_First_0 { assign p = make_First(); },
    created_First_0 -> started_First_0 { sync sync_First[p]!; },
    started_First_0 -> awaited_First_0 { sync sync_First[p]?; },
    awaited_First_0 -> sending_cid_var47_c_0 { sync sender_alpha[cid_var47_c]!; },
    sending_cid_var47_c_0 -> sent_cid_var47_c_0 { sync sender_omega[cid_var47_c]?; },
    sent_cid_var47_c_0 -> ending { },
    starting -> started { sync async_func28[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func28[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func28[pid]!; };
}

process SequentialSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;

state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_SequentialSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_SequentialSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_SequentialSearch[pid]!; };
}

process ConcurrentSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var31_c = -1;

state
    ended,
    created_func19_0,
    started_func19_0,
    created_func21_0,
    exit_loop_cond0,
    receiving_cid_var31_c_0,
    starting,
    made_cid_var31_c_0,
    started_func21_0,
    enter_loop_cond0,
    exit_loop_body0,
    ending,
    created_func20_0,
    enter_loop_body0,
    received_cid_var31_c_0,
    started,
    started_func20_0,
    exit_loop0;
init
    starting;
trans
    started -> made_cid_var31_c_0 { assign cid_var31_c = make_chan(0); },
    made_cid_var31_c_0 -> created_func19_0 { assign p = make_func19(), cap_cid_var32_c[p] = cid_var31_c; },
    created_func19_0 -> started_func19_0 { sync async_func19[p]!; },
    started_func19_0 -> created_func20_0 { assign p = make_func20(), cap_cid_var33_c[p] = cid_var31_c; },
    created_func20_0 -> started_func20_0 { sync async_func20[p]!; },
    started_func20_0 -> created_func21_0 { assign p = make_func21(), cap_cid_var34_c[p] = cid_var31_c; },
    created_func21_0 -> started_func21_0 { sync async_func21[p]!; },
    enter_loop_cond0 -> exit_loop_cond0 { },
    enter_loop_body0 -> receiving_cid_var31_c_0 { sync receiver_alpha[cid_var31_c]!; },
    receiving_cid_var31_c_0 -> received_cid_var31_c_0 { sync receiver_omega[cid_var31_c]?; },
    received_cid_var31_c_0 -> exit_loop_body0 { },
    started_func21_0 -> enter_loop_cond0 { },
    exit_loop_cond0 -> enter_loop_body0 { },
    exit_loop_cond0 -> exit_loop0 { },
    exit_loop_body0 -> enter_loop_cond0 { },
    exit_loop0 -> ending { },
    starting -> started { sync async_ConcurrentSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearch[pid]!; };
}

process ReplicaSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var44_c = -1;
int cid_var48_timeout = -1;

state
    started_func28_0,
    started,
    made_cid_var44_c_0,
    started_func27_0,
    created_func28_0,
    ending,
    exit_loop_cond0,
    exit_loop_body0,
    ended,
    created_func26_0,
    started_func26_0,
    exit_loop0,
    starting,
    created_func27_0,
    enter_loop_cond0,
    enter_loop_body0;
init
    starting;
trans
    started -> made_cid_var44_c_0 { assign cid_var44_c = make_chan(0); },
    made_cid_var44_c_0 -> created_func26_0 { assign p = make_func26(), cap_cid_var45_c[p] = cid_var44_c; },
    created_func26_0 -> started_func26_0 { sync async_func26[p]!; },
    started_func26_0 -> created_func27_0 { assign p = make_func27(), cap_cid_var46_c[p] = cid_var44_c; },
    created_func27_0 -> started_func27_0 { sync async_func27[p]!; },
    started_func27_0 -> created_func28_0 { assign p = make_func28(), cap_cid_var47_c[p] = cid_var44_c; },
    created_func28_0 -> started_func28_0 { sync async_func28[p]!; },
    enter_loop_cond0 -> exit_loop_cond0 { },
    enter_loop_body0 -> exit_loop_body0 { },
    started_func28_0 -> enter_loop_cond0 { },
    exit_loop_cond0 -> enter_loop_body0 { },
    exit_loop_cond0 -> exit_loop0 { },
    exit_loop_body0 -> enter_loop_cond0 { },
    exit_loop0 -> ending { },
    starting -> started { sync async_ReplicaSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ReplicaSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ReplicaSearch[pid]!; };
}

process fakeSearch(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int fid_var30 = 18;

state
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_fakeSearch[pid]?; assign is_sync = false; },
    starting -> started { sync sync_fakeSearch[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_fakeSearch[pid]!; };
}

process func18(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;

state
    started,
    ending,
    ended,
    starting;
init
    starting;
trans
    started -> ending { },
    starting -> started { sync async_func18[pid]?; assign is_sync = false; },
    starting -> started { sync sync_func18[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func18[pid]!; };
}

process func23(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var37_c = -1;
void initialize() {
    cid_var37_c = cap_cid_var37_c[pid];
}

state
    ended,
    sending_cid_var37_c_0,
    sent_cid_var37_c_0,
    starting,
    started,
    ending;
init
    starting;
trans
    started -> sending_cid_var37_c_0 { sync sender_alpha[cid_var37_c]!; },
    sending_cid_var37_c_0 -> sent_cid_var37_c_0 { sync sender_omega[cid_var37_c]?; },
    sent_cid_var37_c_0 -> ending { },
    starting -> started { sync async_func23[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func23[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func23[pid]!; };
}

process func22(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var36_c = -1;
void initialize() {
    cid_var36_c = cap_cid_var36_c[pid];
}

state
    ending,
    ended,
    sending_cid_var36_c_0,
    sent_cid_var36_c_0,
    starting,
    started;
init
    starting;
trans
    started -> sending_cid_var36_c_0 { sync sender_alpha[cid_var36_c]!; },
    sending_cid_var36_c_0 -> sent_cid_var36_c_0 { sync sender_omega[cid_var36_c]?; },
    sent_cid_var36_c_0 -> ending { },
    starting -> started { sync async_func22[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func22[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func22[pid]!; };
}

process func24(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var38_c = -1;
void initialize() {
    cid_var38_c = cap_cid_var38_c[pid];
}

state
    ending,
    ended,
    sending_cid_var38_c_0,
    sent_cid_var38_c_0,
    starting,
    started;
init
    starting;
trans
    started -> sending_cid_var38_c_0 { sync sender_alpha[cid_var38_c]!; },
    sending_cid_var38_c_0 -> sent_cid_var38_c_0 { sync sender_omega[cid_var38_c]?; },
    sent_cid_var38_c_0 -> ending { },
    starting -> started { sync async_func24[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func24[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func24[pid]!; };
}

process ConcurrentSearchWithCutOff(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var35_c = -1;
int cid_var39_timeout = -1;

state
    ended,
    started_func22_0,
    enter_loop_cond0,
    enter_loop_body0,
    started_func24_0,
    exit_loop0,
    started,
    ending,
    created_func23_0,
    created_func24_0,
    exit_loop_body0,
    starting,
    made_cid_var35_c_0,
    created_func22_0,
    started_func23_0,
    exit_loop_cond0;
init
    starting;
trans
    started -> made_cid_var35_c_0 { assign cid_var35_c = make_chan(0); },
    made_cid_var35_c_0 -> created_func22_0 { assign p = make_func22(), cap_cid_var36_c[p] = cid_var35_c; },
    created_func22_0 -> started_func22_0 { sync async_func22[p]!; },
    started_func22_0 -> created_func23_0 { assign p = make_func23(), cap_cid_var37_c[p] = cid_var35_c; },
    created_func23_0 -> started_func23_0 { sync async_func23[p]!; },
    started_func23_0 -> created_func24_0 { assign p = make_func24(), cap_cid_var38_c[p] = cid_var35_c; },
    created_func24_0 -> started_func24_0 { sync async_func24[p]!; },
    enter_loop_cond0 -> exit_loop_cond0 { },
    enter_loop_body0 -> exit_loop_body0 { },
    started_func24_0 -> enter_loop_cond0 { },
    exit_loop_cond0 -> enter_loop_body0 { },
    exit_loop_cond0 -> exit_loop0 { },
    exit_loop_body0 -> enter_loop_cond0 { },
    exit_loop0 -> ending { },
    starting -> started { sync async_ConcurrentSearchWithCutOff[pid]?; assign is_sync = false; },
    starting -> started { sync sync_ConcurrentSearchWithCutOff[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_ConcurrentSearchWithCutOff[pid]!; };
}

process First(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var40_c = -1;
int fid_var43 = 25;
int fid_var41_searchReplica = -1;

state
    started,
    ending,
    made_cid_var40_c_0,
    enter_loop_cond0,
    exit_loop_body0,
    receiving_cid_var40_c_0,
    starting,
    assigned_fid_var41_searchReplica_0,
    exit_loop_cond0,
    enter_loop_body0,
    exit_loop0,
    received_cid_var40_c_0,
    ended;
init
    starting;
trans
    started -> made_cid_var40_c_0 { assign cid_var40_c = make_chan(0); },
    made_cid_var40_c_0 -> assigned_fid_var41_searchReplica_0 { assign fid_var41_searchReplica = fid_var43; },
    enter_loop_cond0 -> exit_loop_cond0 { },
    enter_loop_body0 -> exit_loop_body0 { },
    assigned_fid_var41_searchReplica_0 -> enter_loop_cond0 { },
    exit_loop_cond0 -> enter_loop_body0 { },
    exit_loop_cond0 -> exit_loop0 { },
    exit_loop_body0 -> enter_loop_cond0 { },
    exit_loop0 -> receiving_cid_var40_c_0 { sync receiver_alpha[cid_var40_c]!; },
    receiving_cid_var40_c_0 -> received_cid_var40_c_0 { sync receiver_omega[cid_var40_c]?; },
    received_cid_var40_c_0 -> ending { },
    starting -> started { sync async_First[pid]?; assign is_sync = false; },
    starting -> started { sync sync_First[pid]?; assign is_sync = true; },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_First[pid]!; };
}

process func21(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var34_c = -1;
void initialize() {
    cid_var34_c = cap_cid_var34_c[pid];
}

state
    sending_cid_var34_c_0,
    sent_cid_var34_c_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> sending_cid_var34_c_0 { sync sender_alpha[cid_var34_c]!; },
    sending_cid_var34_c_0 -> sent_cid_var34_c_0 { sync sender_omega[cid_var34_c]?; },
    sent_cid_var34_c_0 -> ending { },
    starting -> started { sync async_func21[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func21[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func21[pid]!; };
}

process func27(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var46_c = -1;
void initialize() {
    cid_var46_c = cap_cid_var46_c[pid];
}

state
    starting,
    started,
    ending,
    ended,
    created_First_0,
    awaited_First_0,
    sent_cid_var46_c_0,
    started_First_0,
    sending_cid_var46_c_0;
init
    starting;
trans
    started -> created_First_0 { assign p = make_First(); },
    created_First_0 -> started_First_0 { sync sync_First[p]!; },
    started_First_0 -> awaited_First_0 { sync sync_First[p]?; },
    awaited_First_0 -> sending_cid_var46_c_0 { sync sender_alpha[cid_var46_c]!; },
    sending_cid_var46_c_0 -> sent_cid_var46_c_0 { sync sender_omega[cid_var46_c]?; },
    sent_cid_var46_c_0 -> ending { },
    starting -> started { sync async_func27[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func27[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func27[pid]!; };
}

process Channel(int[0, 9] i) {
// Place local declarations here.

state
    confirming_closed,
    new_receiver,
    confirming_b,
    closing,
    confirming_closing,
    closed,
    bad,
    idle,
    new_sender,
    confirming_a;
commit
    new_receiver,
    confirming_b,
    closing,
    confirming_closed,
    new_sender,
    confirming_a,
    confirming_closing;
init
    idle;
trans
    idle -> new_sender { sync sender_alpha[i]?; assign chan_counter[i]++; },
    new_sender -> idle { guard chan_counter[i] > chan_buffer[i]; },
    new_sender -> confirming_a { guard chan_counter[i] <= chan_buffer[i]; sync sender_omega[i]!; },
    confirming_a -> idle { guard chan_counter[i] > 0; },
    confirming_a -> idle { guard chan_counter[i] <= 0; sync receiver_omega[i]!; },
    idle -> new_receiver { sync receiver_alpha[i]?; assign chan_counter[i]--; },
    new_receiver -> idle { guard chan_counter[i] < 0; },
    new_receiver -> confirming_b { guard chan_counter[i] >= 0; sync receiver_omega[i]!; },
    confirming_b -> idle { guard chan_counter[i] < chan_buffer[i]; },
    confirming_b -> idle { guard chan_counter[i] >= chan_buffer[i]; sync sender_omega[i]!; },
    idle -> confirming_closing { guard chan_counter[i] < 0; sync close[i]?; },
    confirming_closing -> confirming_closing { guard chan_counter[i] < 0; sync receiver_omega[i]!; assign chan_counter[i]++; },
    confirming_closing -> closing { guard chan_counter[i] == 0; },
    idle -> closing { guard 0 <= chan_counter[i] && chan_counter[i] <= chan_buffer[i]; sync close[i]?; },
    idle -> bad { guard chan_counter[i] > chan_buffer[i]; sync close[i]?; },
    closing -> closed { assign chan_counter[i] = 1,
chan_buffer[i] = -1; },
    closed -> confirming_closed { sync receiver_alpha[i]?; },
    confirming_closed -> closed { sync receiver_omega[i]!; },
    closed -> bad { sync sender_alpha[i]?; },
    closed -> bad { sync close[i]?; };
}

process main() {
// Place local declarations here.
bool is_sync;
int p = -1;

state
    starting,
    started,
    ending,
    ended,
    created_ReplicaSearch_0,
    started_ReplicaSearch_0,
    awaited_ReplicaSearch_0;
init
    starting;
trans
    started -> created_ReplicaSearch_0 { assign p = make_ReplicaSearch(); },
    created_ReplicaSearch_0 -> started_ReplicaSearch_0 { sync sync_ReplicaSearch[p]!; },
    started_ReplicaSearch_0 -> awaited_ReplicaSearch_0 { sync sync_ReplicaSearch[p]?; },
    awaited_ReplicaSearch_0 -> ending { },
    starting -> started { },
    ending -> ended { };
}

process func20(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var33_c = -1;
void initialize() {
    cid_var33_c = cap_cid_var33_c[pid];
}

state
    sending_cid_var33_c_0,
    sent_cid_var33_c_0,
    starting,
    started,
    ending,
    ended;
init
    starting;
trans
    started -> sending_cid_var33_c_0 { sync sender_alpha[cid_var33_c]!; },
    sending_cid_var33_c_0 -> sent_cid_var33_c_0 { sync sender_omega[cid_var33_c]?; },
    sent_cid_var33_c_0 -> ending { },
    starting -> started { sync async_func20[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func20[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func20[pid]!; };
}

process func25(int[0, 0] pid) {
// Place local declarations here.
bool is_sync;
int p = -1;
int cid_var42_c = -1;
void initialize() {
    cid_var42_c = cap_cid_var42_c[pid];
}

state
    starting,
    started,
    ending,
    ended,
    sending_cid_var42_c_0,
    sent_cid_var42_c_0;
init
    starting;
trans
    started -> sending_cid_var42_c_0 { sync sender_alpha[cid_var42_c]!; },
    sending_cid_var42_c_0 -> sent_cid_var42_c_0 { sync sender_omega[cid_var42_c]?; },
    sent_cid_var42_c_0 -> ending { },
    starting -> started { sync async_func25[pid]?; assign is_sync = false, initialize(); },
    starting -> started { sync sync_func25[pid]?; assign is_sync = true, initialize(); },
    ending -> ended { guard is_sync == false; },
    ending -> ended { guard is_sync == true; sync sync_func25[pid]!; };
}

Channel0 = Channel(0);
Channel1 = Channel(1);
Channel2 = Channel(2);
Channel3 = Channel(3);
Channel4 = Channel(4);
Channel5 = Channel(5);
Channel6 = Channel(6);
Channel7 = Channel(7);
Channel8 = Channel(8);
Channel9 = Channel(9);
ConcurrentSearch0 = ConcurrentSearch(0);
ConcurrentSearchWithCutOff0 = ConcurrentSearchWithCutOff(0);
First0 = First(0);
ReplicaSearch0 = ReplicaSearch(0);
SequentialSearch0 = SequentialSearch(0);
fakeSearch0 = fakeSearch(0);
func180 = func18(0);
func190 = func19(0);
func200 = func20(0);
func210 = func21(0);
func220 = func22(0);
func230 = func23(0);
func240 = func24(0);
func250 = func25(0);
func260 = func26(0);
func270 = func27(0);
func280 = func28(0);
system Channel0, Channel1, Channel2, Channel3, Channel4, Channel5, Channel6, Channel7, Channel8, Channel9, ConcurrentSearch0, ConcurrentSearchWithCutOff0, First0, ReplicaSearch0, SequentialSearch0, fakeSearch0, func180, func190, func200, func210, func220, func230, func240, func250, func260, func270, func280, main;

